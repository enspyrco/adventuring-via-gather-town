/* eslint-disable */
import * as Long from "long";
import * as _m0 from "protobufjs/minimal";
import {
  AccessRequest as AccessRequest172,
  AccessRequestRespondedTo as AccessRequestRespondedTo157,
  AccessRequestsUpdated as AccessRequestsUpdated156,
  ActivelySpeaking as ActivelySpeaking192,
  AddInventoryItem as AddInventoryItem232,
  AllowedUsers as AllowedUsers16,
  Announcer as Announcer24,
  AreaPosition as AreaPosition19,
  Asset as Asset25,
  BackedUpDeskObject as BackedUpDeskObject11,
  Ban as Ban184,
  Block as Block220,
  Chat as Chat187,
  ChatMessageUpdated as ChatMessageUpdated229,
  ChatReply as ChatReply168,
  ClientBackupHeartbeat as ClientBackupHeartbeat177,
  ClientHeartbeat as ClientHeartbeat176,
  ClientServerAction as ClientServerAction175,
  CookieFound as CookieFound69,
  Craft as Craft238,
  Craft_InputsEntry as Craft_InputsEntry297,
  CustomAction as CustomAction219,
  CustomEvent as CustomEvent105,
  DBOutfit as DBOutfit2,
  DeskInfo as DeskInfo9,
  DeskInfoV2 as DeskInfoV2171,
  DeskObjects as DeskObjects12,
  DeskObjects_ObjectsEntry as DeskObjects_ObjectsEntry279,
  DynamicGate as DynamicGate166,
  DynamicGates as DynamicGates139,
  Enter as Enter197,
  EnterPortal as EnterPortal226,
  EnterWhisper as EnterWhisper189,
  EnterWithTeammatesHostInitiatesEnterSpace as EnterWithTeammatesHostInitiatesEnterSpace162,
  EnterWithTeammatesInitiateEnterSpace as EnterWithTeammatesInitiateEnterSpace263,
  EnterWithTeammatesLobbyStateUpdated as EnterWithTeammatesLobbyStateUpdated161,
  EnterWithTeammatesLobbyUser as EnterWithTeammatesLobbyUser31,
  EnterWithTeammatesSetOwnLobbyInfo as EnterWithTeammatesSetOwnLobbyInfo262,
  ErrorEvent as ErrorEvent35,
  Exit as Exit196,
  FXShakeCamera as FXShakeCamera121,
  FXShakeObject as FXShakeObject120,
  Ghost as Ghost201,
  GotRequestMute as GotRequestMute136,
  HighFive as HighFive236,
  HipToBeSquare as HipToBeSquare131,
  Info as Info33,
  Init as Init202,
  Interact as Interact188,
  InteractionEnum_ENUM as InteractionEnum_ENUM5,
  interactionEnum_ENUMFromJSON as interactionEnum_ENUMFromJSON269,
  interactionEnum_ENUMToJSON as interactionEnum_ENUMToJSON270,
  Inventory_ItemsEntry as Inventory_ItemsEntry286,
  Inventory_OrderEntry as Inventory_OrderEntry287,
  InventoryItem as InventoryItem29,
  ItemAbility as ItemAbility30,
  Kick as Kick185,
  LeaveWhisper as LeaveWhisper190,
  MapAddObject as MapAddObject211,
  MapAndDesk as MapAndDesk174,
  MapCommitsChanges as MapCommitsChanges116,
  MapDeleteObject as MapDeleteObject89,
  MapDeleteObjectById as MapDeleteObjectById218,
  MapLocation as MapLocation170,
  MapMoveObject as MapMoveObject118,
  MapSetAnnouncer as MapSetAnnouncer80,
  MapSetAreas as MapSetAreas88,
  MapSetAreas_AreasEntry as MapSetAreas_AreasEntry285,
  MapSetAssets as MapSetAssets81,
  MapSetBackgroundImagePath as MapSetBackgroundImagePath74,
  MapSetCollisions as MapSetCollisions73,
  MapSetCollisionsBits as MapSetCollisionsBits151,
  MapSetDecoration as MapSetDecoration95,
  MapSetDescription as MapSetDescription94,
  MapSetDimensions as MapSetDimensions72,
  MapSetEnabledChats as MapSetEnabledChats93,
  MapSetFloors as MapSetFloors87,
  MapSetFloors_FloorsEntry as MapSetFloors_FloorsEntry284,
  MapSetForegroundImagePath as MapSetForegroundImagePath75,
  MapSetMiniMapImagePath as MapSetMiniMapImagePath97,
  MapSetMuteOnEntry as MapSetMuteOnEntry84,
  MapSetName as MapSetName83,
  MapSetNooks as MapSetNooks138,
  MapSetNooks_NooksEntry as MapSetNooks_NooksEntry281,
  MapSetObjects as MapSetObjects82,
  MapSetObjects_ObjectsEntry as MapSetObjects_ObjectsEntry282,
  MapSetPortals as MapSetPortals79,
  MapSetScript as MapSetScript99,
  MapSetSpaces as MapSetSpaces77,
  MapSetSpawn as MapSetSpawn90,
  MapSetSpawns as MapSetSpawns78,
  MapSetSprites as MapSetSprites76,
  MapSetTutorialTasks as MapSetTutorialTasks96,
  MapSetUseDrawnBG as MapSetUseDrawnBG85,
  MapSetWalls as MapSetWalls86,
  MapSetWalls_WallsEntry as MapSetWalls_WallsEntry283,
  Move as Move179,
  MoveDirectionEnum_ENUM as MoveDirectionEnum_ENUM1,
  moveDirectionEnum_ENUMFromJSON as moveDirectionEnum_ENUMFromJSON273,
  moveDirectionEnum_ENUMToJSON as moveDirectionEnum_ENUMToJSON274,
  NookCoords as NookCoords15,
  NookDiff as NookDiff21,
  Notify as Notify223,
  ObjectTime as ObjectTime7,
  PlayerActivelySpeaks as PlayerActivelySpeaks48,
  PlayerBlocks as PlayerBlocks106,
  PlayerChats as PlayerChats43,
  PlayerCrafts as PlayerCrafts132,
  PlayerCrafts_InputsEntry as PlayerCrafts_InputsEntry291,
  PlayerEditsChatMessage as PlayerEditsChatMessage119,
  PlayerEntersPortal as PlayerEntersPortal60,
  PlayerEntersWhisper as PlayerEntersWhisper46,
  PlayerEntersWhisperV2 as PlayerEntersWhisperV270,
  PlayerExits as PlayerExits54,
  PlayerGhosts as PlayerGhosts45,
  PlayerGuestPassStatus as PlayerGuestPassStatus173,
  PlayerHighFives as PlayerHighFives129,
  PlayerInitInfo as PlayerInitInfo267,
  PlayerInteracts as PlayerInteracts44,
  PlayerJoins as PlayerJoins92,
  PlayerLeavesWhisper as PlayerLeavesWhisper47,
  PlayerMoves as PlayerMoves39,
  PlayerNotifies as PlayerNotifies108,
  PlayerRequestsToLead as PlayerRequestsToLead112,
  PlayerRings as PlayerRings42,
  PlayerSendsCommand as PlayerSendsCommand122,
  PlayerSetsAffiliation as PlayerSetsAffiliation53,
  PlayerSetsAllowScreenPointer as PlayerSetsAllowScreenPointer134,
  PlayerSetsAvailability as PlayerSetsAvailability159,
  PlayerSetsAway as PlayerSetsAway150,
  PlayerSetsCity as PlayerSetsCity152,
  PlayerSetsCountry as PlayerSetsCountry153,
  PlayerSetsCurrentArea as PlayerSetsCurrentArea67,
  PlayerSetsCurrentDesk as PlayerSetsCurrentDesk66,
  PlayerSetsDescription as PlayerSetsDescription144,
  PlayerSetsDeskInfo as PlayerSetsDeskInfo137,
  PlayerSetsEmojiStatus as PlayerSetsEmojiStatus52,
  PlayerSetsEmoteV2 as PlayerSetsEmoteV2102,
  PlayerSetsEventStatus as PlayerSetsEventStatus64,
  PlayerSetsFocusModeEndTime as PlayerSetsFocusModeEndTime103,
  PlayerSetsFollowTarget as PlayerSetsFollowTarget111,
  PlayerSetsGoKartId as PlayerSetsGoKartId71,
  PlayerSetsImagePointer as PlayerSetsImagePointer68,
  PlayerSetsInConversation as PlayerSetsInConversation65,
  PlayerSetsIsAlone as PlayerSetsIsAlone91,
  PlayerSetsIsMobile as PlayerSetsIsMobile100,
  PlayerSetsIsNpc as PlayerSetsIsNpc114,
  PlayerSetsIsSignedIn as PlayerSetsIsSignedIn57,
  PlayerSetsItemString as PlayerSetsItemString109,
  PlayerSetsLastActive as PlayerSetsLastActive62,
  PlayerSetsManualVideoSrc as PlayerSetsManualVideoSrc113,
  PlayerSetsName as PlayerSetsName50,
  PlayerSetsOutfitString as PlayerSetsOutfitString56,
  PlayerSetsPersonalImageUrl as PlayerSetsPersonalImageUrl146,
  PlayerSetsPhone as PlayerSetsPhone145,
  PlayerSetsProfileImageUrl as PlayerSetsProfileImageUrl147,
  PlayerSetsPronouns as PlayerSetsPronouns141,
  PlayerSetsSpeedModifier as PlayerSetsSpeedModifier128,
  PlayerSetsStartDate as PlayerSetsStartDate154,
  PlayerSetsStatus as PlayerSetsStatus40,
  PlayerSetsSubtitle as PlayerSetsSubtitle115,
  PlayerSetsTextStatus as PlayerSetsTextStatus51,
  PlayerSetsTimezone as PlayerSetsTimezone143,
  PlayerSetsTitle as PlayerSetsTitle142,
  PlayerSetsVehicleId as PlayerSetsVehicleId127,
  PlayerSetsWorkCondition as PlayerSetsWorkCondition49,
  PlayerShootsConfetti as PlayerShootsConfetti63,
  PlayerSpotlights as PlayerSpotlights41,
  PlayerStartsRecording as PlayerStartsRecording155,
  PlayerTriggersInventoryItem as PlayerTriggersInventoryItem133,
  PlayerTriggersItem as PlayerTriggersItem110,
  PlayerUpdatesFocusModeStatus as PlayerUpdatesFocusModeStatus107,
  PlayerUpdatesInventory as PlayerUpdatesInventory125,
  PlayerUpdatesInventory_ItemsEntry as PlayerUpdatesInventory_ItemsEntry292,
  PlayerUpdatesInventory_OrderEntry as PlayerUpdatesInventory_OrderEntry293,
  PlayerUpdatesSession as PlayerUpdatesSession117,
  PlayerWaves as PlayerWaves140,
  PlaySound as PlaySound213,
  Portal as Portal23,
  PrecomputedEnterLocation as PrecomputedEnterLocation135,
  PrecomputeEnter as PrecomputeEnter241,
  Ready as Ready36,
  RecordingInfo as RecordingInfo18,
  RegisterCommand as RegisterCommand230,
  RemoveInventoryItem as RemoveInventoryItem233,
  RequestAccessViaCheckIn as RequestAccessViaCheckIn259,
  RequestedUsers as RequestedUsers17,
  RequestedUsers_UsersEntry as RequestedUsers_UsersEntry280,
  RequestMute as RequestMute242,
  RequestToJoinNook as RequestToJoinNook244,
  RequestToLead as RequestToLead225,
  RequestUser as RequestUser14,
  Respawn as Respawn199,
  RespawnAtDesk as RespawnAtDesk264,
  RespawnComplete as RespawnComplete55,
  RespondToAccessRequest as RespondToAccessRequest260,
  RespondToAccessRequest_LocationTypeEnum as RespondToAccessRequest_LocationTypeEnum268,
  respondToAccessRequest_LocationTypeEnumFromJSON as respondToAccessRequest_LocationTypeEnumFromJSON275,
  respondToAccessRequest_LocationTypeEnumToJSON as respondToAccessRequest_LocationTypeEnumToJSON276,
  Ring as Ring183,
  SendCommand as SendCommand231,
  ServerClientEvent as ServerClientEvent32,
  ServerHeartbeat as ServerHeartbeat37,
  SetAffiliation as SetAffiliation180,
  SetAllowScreenPointer as SetAllowScreenPointer240,
  SetAvailability as SetAvailability261,
  SetAway as SetAway254,
  SetCity as SetCity255,
  SetCountry as SetCountry256,
  SetCurrentArea as SetCurrentArea208,
  SetCurrentDesk as SetCurrentDesk207,
  SetDescription as SetDescription251,
  SetDeskFromNextAvailableDesk as SetDeskFromNextAvailableDesk265,
  SetDeskInfo as SetDeskInfo243,
  SetEmojiStatus as SetEmojiStatus191,
  SetEmoteV2 as SetEmoteV2216,
  SetEventStatus as SetEventStatus205,
  SetFocusModeEndTime as SetFocusModeEndTime217,
  SetFollowTarget as SetFollowTarget224,
  SetGoKartId as SetGoKartId210,
  SetImagePointer as SetImagePointer209,
  SetImpassable as SetImpassable186,
  SetInConversation as SetInConversation206,
  SetIsAlone as SetIsAlone212,
  SetIsMobile as SetIsMobile214,
  SetItemString as SetItemString221,
  SetManualVideoSrc as SetManualVideoSrc227,
  SetName as SetName193,
  SetOutfitString as SetOutfitString203,
  SetPersonalImageUrl as SetPersonalImageUrl253,
  SetPhone as SetPhone250,
  SetProfileImageUrl as SetProfileImageUrl252,
  SetPronouns as SetPronouns247,
  SetScreenPointer as SetScreenPointer215,
  SetScreenPointerServer as SetScreenPointerServer101,
  SetSpaceRolePermissionOverride as SetSpaceRolePermissionOverride266,
  SetSpeedModifier as SetSpeedModifier235,
  SetStartDate as SetStartDate257,
  SetStatus as SetStatus181,
  SetSubtitle as SetSubtitle228,
  SetTextStatus as SetTextStatus194,
  SetTimezone as SetTimezone249,
  SetTitle as SetTitle248,
  SetVehicleId as SetVehicleId234,
  SetWorkCondition as SetWorkCondition198,
  ShootConfetti as ShootConfetti204,
  Sound as Sound6,
  Space as Space20,
  SpaceIsClosed as SpaceIsClosed59,
  SpaceItem as SpaceItem169,
  SpaceItem_AbilitiesEntry as SpaceItem_AbilitiesEntry289,
  SpaceItem_MetaEntry as SpaceItem_MetaEntry288,
  SpaceMemberInfo as SpaceMemberInfo167,
  SpaceMemberInfo_RolesEntry as SpaceMemberInfo_RolesEntry278,
  SpaceOverCapacityDeniesUser as SpaceOverCapacityDeniesUser149,
  SpaceOverwrites as SpaceOverwrites58,
  SpacePlaysSound as SpacePlaysSound98,
  SpaceRegistersCommand as SpaceRegistersCommand123,
  SpaceRolePermissionOverrideUpdated as SpaceRolePermissionOverrideUpdated163,
  SpaceSetsCapacity as SpaceSetsCapacity148,
  SpaceSetsGuestPassStatuses as SpaceSetsGuestPassStatuses158,
  SpaceSetsIdMapping as SpaceSetsIdMapping61,
  SpaceSetsSpaceMembers as SpaceSetsSpaceMembers104,
  SpaceSetsSpaceMembers_MembersEntry as SpaceSetsSpaceMembers_MembersEntry290,
  SpaceStopsSound as SpaceStopsSound130,
  SpaceUpdatesItems as SpaceUpdatesItems126,
  SpaceUpdatesItems_ItemsEntry as SpaceUpdatesItems_ItemsEntry294,
  Spawn as Spawn200,
  SpawnPoint as SpawnPoint22,
  SpeakerUpdatesSession as SpeakerUpdatesSession124,
  Spotlight as Spotlight182,
  SpriteDirectionEnum_ENUM as SpriteDirectionEnum_ENUM164,
  spriteDirectionEnum_ENUMFromJSON as spriteDirectionEnum_ENUMFromJSON271,
  spriteDirectionEnum_ENUMToJSON as spriteDirectionEnum_ENUMToJSON272,
  StartRecording as StartRecording258,
  StopSound as StopSound237,
  SubscriptionsUpdated as SubscriptionsUpdated160,
  Teleport as Teleport195,
  Timestamp as Timestamp165,
  TransactionStatus as TransactionStatus38,
  TriggerInventoryItem as TriggerInventoryItem239,
  TriggerItem as TriggerItem222,
  TutorialTaskMapArea as TutorialTaskMapArea28,
  UpdateNookPermission as UpdateNookPermission245,
  UpdateSubscriptions as UpdateSubscriptions178,
  UpdateSubscriptions_MapUpdateIdsEntry as UpdateSubscriptions_MapUpdateIdsEntry296,
  UpdateSubscriptions_SubscriptionsEntry as UpdateSubscriptions_SubscriptionsEntry295,
  Warn as Warn34,
  Wave as Wave246,
  WireArea as WireArea26,
  WireObject as WireObject10,
  WireObjectSpriteAnimConfig as WireObjectSpriteAnimConfig4,
  WireObjectSpritesheet as WireObjectSpritesheet8,
  WireObjectSpritesheet_AnimationsEntry as WireObjectSpritesheet_AnimationsEntry277,
  WireObjectSpritesheetFraming as WireObjectSpritesheetFraming3,
  WirePoint as WirePoint13,
  WireTutorialTasks as WireTutorialTasks27,
} from "../../..";

export const protobufPackage = "";

export interface SpriteDirectionEnum {
}

export enum SpriteDirectionEnum_ENUM {
  Stand = 0,
  Down = 1,
  DownAlt = 2,
  Up = 3,
  UpAlt = 4,
  Left = 5,
  LeftAlt = 6,
  Right = 7,
  RightAlt = 8,
  Dance1 = 9,
  Dance2 = 10,
  Dance3 = 11,
  Dance4 = 12,
  UNRECOGNIZED = -1,
}

export function spriteDirectionEnum_ENUMFromJSON(object: any): SpriteDirectionEnum_ENUM {
  switch (object) {
    case 0:
    case "Stand":
      return SpriteDirectionEnum_ENUM.Stand;
    case 1:
    case "Down":
      return SpriteDirectionEnum_ENUM.Down;
    case 2:
    case "DownAlt":
      return SpriteDirectionEnum_ENUM.DownAlt;
    case 3:
    case "Up":
      return SpriteDirectionEnum_ENUM.Up;
    case 4:
    case "UpAlt":
      return SpriteDirectionEnum_ENUM.UpAlt;
    case 5:
    case "Left":
      return SpriteDirectionEnum_ENUM.Left;
    case 6:
    case "LeftAlt":
      return SpriteDirectionEnum_ENUM.LeftAlt;
    case 7:
    case "Right":
      return SpriteDirectionEnum_ENUM.Right;
    case 8:
    case "RightAlt":
      return SpriteDirectionEnum_ENUM.RightAlt;
    case 9:
    case "Dance1":
      return SpriteDirectionEnum_ENUM.Dance1;
    case 10:
    case "Dance2":
      return SpriteDirectionEnum_ENUM.Dance2;
    case 11:
    case "Dance3":
      return SpriteDirectionEnum_ENUM.Dance3;
    case 12:
    case "Dance4":
      return SpriteDirectionEnum_ENUM.Dance4;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SpriteDirectionEnum_ENUM.UNRECOGNIZED;
  }
}

export function spriteDirectionEnum_ENUMToJSON(object: SpriteDirectionEnum_ENUM): string {
  switch (object) {
    case SpriteDirectionEnum_ENUM.Stand:
      return "Stand";
    case SpriteDirectionEnum_ENUM.Down:
      return "Down";
    case SpriteDirectionEnum_ENUM.DownAlt:
      return "DownAlt";
    case SpriteDirectionEnum_ENUM.Up:
      return "Up";
    case SpriteDirectionEnum_ENUM.UpAlt:
      return "UpAlt";
    case SpriteDirectionEnum_ENUM.Left:
      return "Left";
    case SpriteDirectionEnum_ENUM.LeftAlt:
      return "LeftAlt";
    case SpriteDirectionEnum_ENUM.Right:
      return "Right";
    case SpriteDirectionEnum_ENUM.RightAlt:
      return "RightAlt";
    case SpriteDirectionEnum_ENUM.Dance1:
      return "Dance1";
    case SpriteDirectionEnum_ENUM.Dance2:
      return "Dance2";
    case SpriteDirectionEnum_ENUM.Dance3:
      return "Dance3";
    case SpriteDirectionEnum_ENUM.Dance4:
      return "Dance4";
    case SpriteDirectionEnum_ENUM.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MoveDirectionEnum {
}

export enum MoveDirectionEnum_ENUM {
  Left = 0,
  Right = 1,
  Up = 2,
  Down = 3,
  Dance = 4,
  UNRECOGNIZED = -1,
}

export function moveDirectionEnum_ENUMFromJSON(object: any): MoveDirectionEnum_ENUM {
  switch (object) {
    case 0:
    case "Left":
      return MoveDirectionEnum_ENUM.Left;
    case 1:
    case "Right":
      return MoveDirectionEnum_ENUM.Right;
    case 2:
    case "Up":
      return MoveDirectionEnum_ENUM.Up;
    case 3:
    case "Down":
      return MoveDirectionEnum_ENUM.Down;
    case 4:
    case "Dance":
      return MoveDirectionEnum_ENUM.Dance;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MoveDirectionEnum_ENUM.UNRECOGNIZED;
  }
}

export function moveDirectionEnum_ENUMToJSON(object: MoveDirectionEnum_ENUM): string {
  switch (object) {
    case MoveDirectionEnum_ENUM.Left:
      return "Left";
    case MoveDirectionEnum_ENUM.Right:
      return "Right";
    case MoveDirectionEnum_ENUM.Up:
      return "Up";
    case MoveDirectionEnum_ENUM.Down:
      return "Down";
    case MoveDirectionEnum_ENUM.Dance:
      return "Dance";
    case MoveDirectionEnum_ENUM.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface InteractionEnum {
}

export enum InteractionEnum_ENUM {
  NONE = 0,
  EMBEDDED_WEBSITE = 1,
  POSTER = 2,
  VIDEO = 3,
  EXTERNAL_CALL = 4,
  EXTENSION = 5,
  NOTE = 6,
  MODAL_EXTENSION = 7,
  COMPONENT_MODAL = 8,
  SIDE_PANEL_TRIGGER = 9,
  UNRECOGNIZED = -1,
}

export function interactionEnum_ENUMFromJSON(object: any): InteractionEnum_ENUM {
  switch (object) {
    case 0:
    case "NONE":
      return InteractionEnum_ENUM.NONE;
    case 1:
    case "EMBEDDED_WEBSITE":
      return InteractionEnum_ENUM.EMBEDDED_WEBSITE;
    case 2:
    case "POSTER":
      return InteractionEnum_ENUM.POSTER;
    case 3:
    case "VIDEO":
      return InteractionEnum_ENUM.VIDEO;
    case 4:
    case "EXTERNAL_CALL":
      return InteractionEnum_ENUM.EXTERNAL_CALL;
    case 5:
    case "EXTENSION":
      return InteractionEnum_ENUM.EXTENSION;
    case 6:
    case "NOTE":
      return InteractionEnum_ENUM.NOTE;
    case 7:
    case "MODAL_EXTENSION":
      return InteractionEnum_ENUM.MODAL_EXTENSION;
    case 8:
    case "COMPONENT_MODAL":
      return InteractionEnum_ENUM.COMPONENT_MODAL;
    case 9:
    case "SIDE_PANEL_TRIGGER":
      return InteractionEnum_ENUM.SIDE_PANEL_TRIGGER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InteractionEnum_ENUM.UNRECOGNIZED;
  }
}

export function interactionEnum_ENUMToJSON(object: InteractionEnum_ENUM): string {
  switch (object) {
    case InteractionEnum_ENUM.NONE:
      return "NONE";
    case InteractionEnum_ENUM.EMBEDDED_WEBSITE:
      return "EMBEDDED_WEBSITE";
    case InteractionEnum_ENUM.POSTER:
      return "POSTER";
    case InteractionEnum_ENUM.VIDEO:
      return "VIDEO";
    case InteractionEnum_ENUM.EXTERNAL_CALL:
      return "EXTERNAL_CALL";
    case InteractionEnum_ENUM.EXTENSION:
      return "EXTENSION";
    case InteractionEnum_ENUM.NOTE:
      return "NOTE";
    case InteractionEnum_ENUM.MODAL_EXTENSION:
      return "MODAL_EXTENSION";
    case InteractionEnum_ENUM.COMPONENT_MODAL:
      return "COMPONENT_MODAL";
    case InteractionEnum_ENUM.SIDE_PANEL_TRIGGER:
      return "SIDE_PANEL_TRIGGER";
    case InteractionEnum_ENUM.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PlayerInitInfo {
  name?: string | undefined;
  x?: number | undefined;
  y?: number | undefined;
  map?: string | undefined;
  affiliation?: string | undefined;
  busy?: boolean | undefined;
  textStatus?: string | undefined;
  emojiStatus?: string | undefined;
  currentlyEquippedWearables?: DBOutfit2 | undefined;
  focusModeEndTime?: string | undefined;
  currentDesk?: string | undefined;
  itemString?: string | undefined;
  isNpc?: boolean | undefined;
}

export interface DBOutfit {
  skin: string;
  hair: string;
  facialHair: string;
  top: string;
  bottom: string;
  shoes: string;
  hat: string;
  glasses: string;
  other: string;
  costume?: string | undefined;
  mobility?: string | undefined;
  jacket?: string | undefined;
}

/** Defines how to slice an incoming animation spritesheet */
export interface WireObjectSpritesheetFraming {
  frameWidth: number;
  frameHeight: number;
}

/** Defines an Spritesheet referencing frames from the split spritesheet */
export interface WireObjectSpriteAnimConfig {
  /**
   * Defines how to interpret the `sequence `field. If `true`, `sequence` is interpreted as a set of
   * animation key frames which are interpolated between for the animation.
   * For example, `sequence: [0,10], useSequenceAsRange: true` would mean the animation spans frames
   * 0 _through_ 10 (inclusive). Use this when your animation uses sequential frames.
   *
   * Default: `false`
   */
  useSequenceAsRange?:
    | boolean
    | undefined;
  /**
   * Defines which spritesheet frames make up this animation.
   *
   * **By default,** `sequence` should be an array of arbitrary frame numbers defining this animation.
   *   ex: [4,5,4,5,4,6,6,6] animates between frames 4, 5, and 6 - but not necessarily in sequential order.
   *
   * **When `useSequenceAsRange` is `true`,** this should be set to two integers defining the **start** and **end** caps.
   *   ex: [0, 10] means this animation starts on frame 0 and ends on frame 10 (inclusive).
   *       (This is equivalent to setting sequence to `[0, 1, 2, ...]`)
   */
  sequence: number[];
  /** Does this animation repeat or should it stop on the last frame? (Default: false) */
  loop?:
    | boolean
    | undefined;
  /** Frames per second this animation should display. */
  frameRate: number;
}

/**
 * Animated objects need to declare their spritesheet, how to slice it, and the different Spritesheets
 * provided by the given spritesheet.
 */
export interface WireObjectSpritesheet {
  spritesheetUrl: string;
  framing: WireObjectSpritesheetFraming3 | undefined;
  animations: { [key: string]: WireObjectSpriteAnimConfig4 };
  currentAnim?: string | undefined;
  pauseAnimationsIfFpsBelowFramerate?: boolean | undefined;
}

export interface WireObjectSpritesheet_AnimationsEntry {
  key: string;
  value: WireObjectSpriteAnimConfig4 | undefined;
}

export interface WireObject {
  templateId?: string | undefined;
  Name?:
    | string
    | undefined;
  /** repeated is inherently optional */
  Tags: string[];
  x?: number | undefined;
  y?: number | undefined;
  offsetX?: number | undefined;
  offsetY?: number | undefined;
  color?: string | undefined;
  orientation?: number | undefined;
  normal?: string | undefined;
  highlighted?: string | undefined;
  type?:
    | InteractionEnum_ENUM5
    | undefined;
  /** deprecating hopefully? */
  width?:
    | number
    | undefined;
  /** deprecating hopefully? */
  height?:
    | number
    | undefined;
  /** experimental */
  extensionClass?:
    | string
    | undefined;
  /** Any custom value of `previewMessage` will be shown as is, not localized */
  previewMessage?: string | undefined;
  distThreshold?: number | undefined;
  propertiesJson?: string | undefined;
  sound?: Sound6 | undefined;
  objectStartTime?: ObjectTime7 | undefined;
  objectExpireTime?: ObjectTime7 | undefined;
  id?: string | undefined;
  customState?: string | undefined;
  objectPlacerId?:
    | string
    | undefined;
  /** experimental - this should have been in customState */
  numGoKarts?: number | undefined;
  spritesheet?: WireObjectSpritesheet8 | undefined;
  zIndex?: number | undefined;
}

export interface SpaceMemberInfo {
  /** deprecating */
  roles: { [key: string]: boolean };
  name?: string | undefined;
  currentlyEquippedWearables?: DBOutfit2 | undefined;
  deskInfo?: DeskInfo9 | undefined;
  allowScreenPointer?: boolean | undefined;
  role: string;
}

export interface SpaceMemberInfo_RolesEntry {
  key: string;
  value: boolean;
}

export interface BackedUpDeskObject {
  obj: WireObject10 | undefined;
  offsetX: number;
  offsetY: number;
}

export interface DeskObjects {
  objects: { [key: string]: BackedUpDeskObject11 };
}

export interface DeskObjects_ObjectsEntry {
  key: string;
  value: BackedUpDeskObject11 | undefined;
}

/** deprecating (NGN-702) */
export interface DeskInfo {
  deskId: string;
  description?: string | undefined;
  locked?: boolean | undefined;
}

export interface DeskInfoV2 {
  deskId?: string | undefined;
  description?: string | undefined;
  locked?:
    | boolean
    | undefined;
  /** this isn't up to date with what's actually on/around someone's desk, it just exists as a way to back up and restore those objects while they're switching desks */
  lastDeskObjects?: DeskObjects12 | undefined;
  mapId?: string | undefined;
}

export interface MapAndDesk {
  mapId: string;
  deskId: string;
}

export interface Sound {
  src: string;
  volume: number;
  loop: boolean;
  maxDistance: number;
  isPositional?: boolean | undefined;
  stream?: boolean | undefined;
}

export interface ObjectTime {
  Seconds: number;
  Timezone?: string | undefined;
}

export interface Space {
  spaceId: string;
  x: number;
  y: number;
  colored?: boolean | undefined;
}

export interface NookCoords {
  coords: WirePoint13[];
}

export interface AllowedUsers {
  users: string[];
}

export interface RequestUser {
  name?: string | undefined;
}

export interface RequestedUsers {
  /** maps uid to optional player metadata about users who requested to join */
  users: { [key: string]: RequestUser14 };
}

export interface RequestedUsers_UsersEntry {
  key: string;
  value: RequestUser14 | undefined;
}

export interface RecordingInfo {
  active: boolean;
  initiatingPlayer?: string | undefined;
  egressId?: string | undefined;
}

export interface NookDiff {
  nookCoords?: NookCoords15 | undefined;
  colored?: boolean | undefined;
  name?: string | undefined;
  bookable?: boolean | undefined;
  capacity?: number | undefined;
  restricted?: boolean | undefined;
  allowedUsers?: AllowedUsers16 | undefined;
  requestedUsers?: RequestedUsers17 | undefined;
  isInMeeting?: boolean | undefined;
  isDesk?: boolean | undefined;
  recordingInfo?: RecordingInfo18 | undefined;
}

export interface WirePoint {
  x: number;
  y: number;
}

export interface SpawnPoint {
  x: number;
  y: number;
  spawnId?: string | undefined;
}

export interface Portal {
  x: number;
  y: number;
  targetMap?: string | undefined;
  targetUrl?: string | undefined;
  targetX?: number | undefined;
  targetY?: number | undefined;
}

export interface Announcer {
  x: number;
  y: number;
}

/** deprecating (NGN-123) */
export interface Asset {
  x: number;
  y: number;
  src: string;
  width?: number | undefined;
  height?: number | undefined;
  inFront?: boolean | undefined;
}

export interface AreaPosition {
  x1: number;
  y1: number;
  x2: number;
  y2: number;
}

export interface WireArea {
  category?: string | undefined;
  coords: AreaPosition19[];
}

export interface DBDesk {
  coords: AreaPosition19[];
}

export interface MapSetDimensions {
  mapId: string;
  width: number;
  height: number;
}

/** this is the new version of impassable. maybe we should rename it? */
export interface MapSetCollisions {
  mapId: string;
  /** this is the x,y,w,h of the rectangle being updated by this mask */
  x: number;
  y: number;
  w: number;
  h: number;
  /** base64 encoded string of bytes, 0x00 is walkable 0x01 is impassable */
  mask: string;
}

export interface MapSetCollisionsBits {
  mapId: string;
  /** indicates whether to overwrite previous collision data (i.e. this represents the entire map) or merge */
  overwrite: boolean;
  /** this is the x,y,w,h of the rectangle being updated by this mask */
  x: number;
  y: number;
  w: number;
  h: number;
  /**
   * the mask stored as bits where 0 is walkable and 1 is impassable
   * to read a single bit:
   *  byteIndex = ((y * w + x) / 8) | 0
   *  bitIndex  = 1 << ((y * w + x) % 8)
   *  impassable = (mask[byteIndex] & (1 << bitIndex)) !== 0
   */
  mask: Uint8Array;
}

export interface MapSetBackgroundImagePath {
  mapId: string;
  /** url */
  backgroundImagePath: string;
}

export interface MapSetForegroundImagePath {
  mapId: string;
  foregroundImagePath: string;
  delete?: boolean | undefined;
}

export interface MapSetSprites {
  mapId: string;
  sprites: number[];
  delete?: boolean | undefined;
}

/** deprecating (NGN-707) */
export interface MapSetSpaces {
  mapId: string;
  spaces: Space20[];
}

export interface MapSetNooks {
  mapId: string;
  nooks: { [key: string]: NookDiff21 };
  overwrite?: boolean | undefined;
}

export interface MapSetNooks_NooksEntry {
  key: string;
  value: NookDiff21 | undefined;
}

export interface MapSetSpawn {
  mapId: string;
  spawn: WirePoint13 | undefined;
  delete?: boolean | undefined;
}

export interface MapSetSpawns {
  mapId: string;
  spawns: SpawnPoint22[];
}

export interface MapSetPortals {
  mapId: string;
  portals: Portal23[];
}

export interface MapSetAnnouncer {
  mapId: string;
  announcer: Announcer24[];
}

/** deprecating (NGN-123) */
export interface MapSetAssets {
  mapId: string;
  assets: Asset25[];
  delete?: boolean | undefined;
}

export interface MapSetObjects {
  mapId: string;
  objects: { [key: number]: WireObject10 };
  updatesAreOverwrites?: boolean | undefined;
}

export interface MapSetObjects_ObjectsEntry {
  key: number;
  value: WireObject10 | undefined;
}

export interface MapSetName {
  mapId: string;
  name: string;
  delete?: boolean | undefined;
}

export interface MapSetMuteOnEntry {
  mapId: string;
  muteOnEntry: boolean;
  delete?: boolean | undefined;
}

export interface MapSetUseDrawnBG {
  mapId: string;
  useDrawnBG: boolean;
  delete?: boolean | undefined;
}

export interface MapSetWalls {
  mapId: string;
  walls: { [key: string]: string };
  delete?: boolean | undefined;
}

export interface MapSetWalls_WallsEntry {
  key: string;
  value: string;
}

export interface MapSetFloors {
  mapId: string;
  floors: { [key: string]: string };
  delete?: boolean | undefined;
}

export interface MapSetFloors_FloorsEntry {
  key: string;
  value: string;
}

export interface MapSetAreas {
  mapId: string;
  areas: { [key: string]: WireArea26 };
  delete?: boolean | undefined;
}

export interface MapSetAreas_AreasEntry {
  key: string;
  value: WireArea26 | undefined;
}

export interface MapDeleteObject {
  mapId: string;
  key: number;
}

export interface MapDeleteObjectById {
  mapId: string;
  id: string;
}

export interface MapSetMiniMapImagePath {
  mapId: string;
  miniMapImagePath: string;
  delete?: boolean | undefined;
}

export interface MapSetEnabledChats {
  mapId: string;
  enabledChats: string[];
  delete?: boolean | undefined;
}

export interface MapSetDescription {
  mapId: string;
  description: string;
  delete?: boolean | undefined;
}

export interface MapSetDecoration {
  mapId: string;
  decoration: string;
  delete?: boolean | undefined;
}

export interface MapSetTutorialTasks {
  mapId: string;
  tutorialTasks: WireTutorialTasks27 | undefined;
  delete?: boolean | undefined;
}

export interface WireTutorialTasks {
  groupSetId: string;
  areas: TutorialTaskMapArea28[];
  autoStart?: boolean | undefined;
}

export interface TutorialTaskMapArea {
  areaId: string;
  x: number;
  y: number;
  height: number;
  width: number;
}

export interface MapSetScript {
  mapId: string;
  script: string;
  delete?: boolean | undefined;
}

export interface Inventory {
  items: { [key: string]: InventoryItem29 };
  order: { [key: string]: string };
}

export interface Inventory_ItemsEntry {
  key: string;
  value: InventoryItem29 | undefined;
}

export interface Inventory_OrderEntry {
  key: string;
  value: string;
}

export interface InventoryItem {
  count: number;
}

export interface SpaceItem {
  name: string;
  category?: string | undefined;
  description?: string | undefined;
  previewUrl: string;
  meta: { [key: string]: string };
  abilities: { [key: string]: ItemAbility30 };
}

export interface SpaceItem_MetaEntry {
  key: string;
  value: string;
}

export interface SpaceItem_AbilitiesEntry {
  key: string;
  value: ItemAbility30 | undefined;
}

export interface ItemAbility {
  name: string;
}

export interface MapLocation {
  map: string;
  x: number;
  y: number;
}

export interface EnterWithTeammatesLobbyUser {
  id: string;
  name: string;
  outfitString: string;
}

export interface EnterWithTeammatesLobbyStateUpdated {
  hostId?: string | undefined;
  users: EnterWithTeammatesLobbyUser31[];
}

export interface EnterWithTeammatesHostInitiatesEnterSpace {
  hostId: string;
}

export interface ServerClientBatch {
  /** don't add more stuff here */
  events: ServerClientEvent32[];
}

export interface ServerClientEvent {
  info?: Info33 | undefined;
  warn?: Warn34 | undefined;
  error?: ErrorEvent35 | undefined;
  ready?: Ready36 | undefined;
  serverHeartbeat?: ServerHeartbeat37 | undefined;
  transactionStatus?: TransactionStatus38 | undefined;
  playerMoves?: PlayerMoves39 | undefined;
  playerSetsStatus?: PlayerSetsStatus40 | undefined;
  playerSpotlights?: PlayerSpotlights41 | undefined;
  playerRings?: PlayerRings42 | undefined;
  playerChats?: PlayerChats43 | undefined;
  playerInteracts?: PlayerInteracts44 | undefined;
  playerGhosts?:
    | PlayerGhosts45
    | undefined;
  /** deprecating (NGN-114) */
  playerEntersWhisper?: PlayerEntersWhisper46 | undefined;
  playerLeavesWhisper?: PlayerLeavesWhisper47 | undefined;
  playerActivelySpeaks?: PlayerActivelySpeaks48 | undefined;
  playerSetsWorkCondition?: PlayerSetsWorkCondition49 | undefined;
  playerSetsName?: PlayerSetsName50 | undefined;
  playerSetsTextStatus?: PlayerSetsTextStatus51 | undefined;
  playerSetsEmojiStatus?: PlayerSetsEmojiStatus52 | undefined;
  playerSetsAffiliation?: PlayerSetsAffiliation53 | undefined;
  playerExits?:
    | PlayerExits54
    | undefined;
  /** deprecated (NGN-108) */
  respawnComplete?: RespawnComplete55 | undefined;
  playerSetsOutfitString?: PlayerSetsOutfitString56 | undefined;
  playerSetsIsSignedIn?: PlayerSetsIsSignedIn57 | undefined;
  spaceOverwrites?: SpaceOverwrites58 | undefined;
  spaceIsClosed?: SpaceIsClosed59 | undefined;
  playerEntersPortal?: PlayerEntersPortal60 | undefined;
  spaceSetsIdMapping?:
    | SpaceSetsIdMapping61
    | undefined;
  /** experimental */
  playerSetsLastActive?:
    | PlayerSetsLastActive62
    | undefined;
  /** experimental */
  playerShootsConfetti?:
    | PlayerShootsConfetti63
    | undefined;
  /** experimental */
  playerSetsEventStatus?:
    | PlayerSetsEventStatus64
    | undefined;
  /** experimental */
  playerSetsInConversation?:
    | PlayerSetsInConversation65
    | undefined;
  /** deprecating (NGN-696) */
  playerSetsCurrentDesk?:
    | PlayerSetsCurrentDesk66
    | undefined;
  /** experimental */
  playerSetsCurrentArea?: PlayerSetsCurrentArea67 | undefined;
  playerSetsImagePointer?:
    | PlayerSetsImagePointer68
    | undefined;
  /** experimental */
  cookieFound?: CookieFound69 | undefined;
  playerEntersWhisperV2?:
    | PlayerEntersWhisperV270
    | undefined;
  /** deprecated (NGN-709) */
  playerSetsGoKartId?: PlayerSetsGoKartId71 | undefined;
  mapSetDimensions?: MapSetDimensions72 | undefined;
  mapSetCollisions?: MapSetCollisions73 | undefined;
  mapSetBackgroundImagePath?: MapSetBackgroundImagePath74 | undefined;
  mapSetForegroundImagePath?:
    | MapSetForegroundImagePath75
    | undefined;
  /** deprecating (NGN-106) */
  mapSetSprites?:
    | MapSetSprites76
    | undefined;
  /** deprecating (NGN-707) */
  mapSetSpaces?: MapSetSpaces77 | undefined;
  mapSetSpawns?: MapSetSpawns78 | undefined;
  mapSetPortals?: MapSetPortals79 | undefined;
  mapSetAnnouncer?:
    | MapSetAnnouncer80
    | undefined;
  /** deprecating (NGN-123) */
  mapSetAssets?: MapSetAssets81 | undefined;
  mapSetObjects?: MapSetObjects82 | undefined;
  mapSetName?: MapSetName83 | undefined;
  mapSetMuteOnEntry?: MapSetMuteOnEntry84 | undefined;
  mapSetUseDrawnBG?: MapSetUseDrawnBG85 | undefined;
  mapSetWalls?: MapSetWalls86 | undefined;
  mapSetFloors?:
    | MapSetFloors87
    | undefined;
  /** experimental */
  mapSetAreas?: MapSetAreas88 | undefined;
  mapDeleteObject?:
    | MapDeleteObject89
    | undefined;
  /** deprecating (NGN-104) */
  mapSetSpawn?:
    | MapSetSpawn90
    | undefined;
  /** experimental */
  playerSetsIsAlone?: PlayerSetsIsAlone91 | undefined;
  playerJoins?: PlayerJoins92 | undefined;
  mapSetEnabledChats?: MapSetEnabledChats93 | undefined;
  mapSetDescription?: MapSetDescription94 | undefined;
  mapSetDecoration?: MapSetDecoration95 | undefined;
  mapSetTutorialTasks?: MapSetTutorialTasks96 | undefined;
  mapSetMiniMapImagePath?: MapSetMiniMapImagePath97 | undefined;
  spacePlaysSound?:
    | SpacePlaysSound98
    | undefined;
  /** experimental */
  mapSetScript?:
    | MapSetScript99
    | undefined;
  /** experimental */
  playerSetsIsMobile?: PlayerSetsIsMobile100 | undefined;
  setScreenPointerServer?: SetScreenPointerServer101 | undefined;
  playerSetsEmoteV2?:
    | PlayerSetsEmoteV2102
    | undefined;
  /** experimental */
  playerSetsFocusModeEndTime?: PlayerSetsFocusModeEndTime103 | undefined;
  spaceSetsSpaceMembers?: SpaceSetsSpaceMembers104 | undefined;
  customEvent?: CustomEvent105 | undefined;
  playerBlocks?: PlayerBlocks106 | undefined;
  playerUpdatesFocusModeStatus?: PlayerUpdatesFocusModeStatus107 | undefined;
  playerNotifies?: PlayerNotifies108 | undefined;
  playerSetsItemString?: PlayerSetsItemString109 | undefined;
  playerTriggersItem?: PlayerTriggersItem110 | undefined;
  playerSetsFollowTarget?: PlayerSetsFollowTarget111 | undefined;
  playerRequestsToLead?: PlayerRequestsToLead112 | undefined;
  playerSetsManualVideoSrc?: PlayerSetsManualVideoSrc113 | undefined;
  playerSetsIsNpc?: PlayerSetsIsNpc114 | undefined;
  playerSetsSubtitle?: PlayerSetsSubtitle115 | undefined;
  mapCommitsChanges?:
    | MapCommitsChanges116
    | undefined;
  /** deprecated (NGN-708) */
  playerUpdatesSession?: PlayerUpdatesSession117 | undefined;
  mapMoveObject?: MapMoveObject118 | undefined;
  playerEditsChatMessage?: PlayerEditsChatMessage119 | undefined;
  fxShakeObject?: FXShakeObject120 | undefined;
  fxShakeCamera?: FXShakeCamera121 | undefined;
  playerSendsCommand?: PlayerSendsCommand122 | undefined;
  spaceRegistersCommand?: SpaceRegistersCommand123 | undefined;
  speakerUpdatesSession?: SpeakerUpdatesSession124 | undefined;
  playerUpdatesInventory?: PlayerUpdatesInventory125 | undefined;
  spaceUpdatesItems?: SpaceUpdatesItems126 | undefined;
  playerSetsVehicleId?: PlayerSetsVehicleId127 | undefined;
  playerSetsSpeedModifier?: PlayerSetsSpeedModifier128 | undefined;
  playerHighFives?: PlayerHighFives129 | undefined;
  spaceStopsSound?: SpaceStopsSound130 | undefined;
  hipToBeSquare?: HipToBeSquare131 | undefined;
  playerCrafts?: PlayerCrafts132 | undefined;
  playerTriggersInventoryItem?: PlayerTriggersInventoryItem133 | undefined;
  playerSetsAllowScreenPointer?: PlayerSetsAllowScreenPointer134 | undefined;
  precomputedEnterLocation?: PrecomputedEnterLocation135 | undefined;
  gotRequestMute?: GotRequestMute136 | undefined;
  playerSetsDeskInfo?: PlayerSetsDeskInfo137 | undefined;
  mapSetNooks?: MapSetNooks138 | undefined;
  dynamicGates?: DynamicGates139 | undefined;
  playerWaves?: PlayerWaves140 | undefined;
  playerSetsPronouns?: PlayerSetsPronouns141 | undefined;
  playerSetsTitle?: PlayerSetsTitle142 | undefined;
  playerSetsTimezone?: PlayerSetsTimezone143 | undefined;
  playerSetsDescription?: PlayerSetsDescription144 | undefined;
  playerSetsPhone?: PlayerSetsPhone145 | undefined;
  playerSetsPersonalImageUrl?: PlayerSetsPersonalImageUrl146 | undefined;
  playerSetsProfileImageUrl?: PlayerSetsProfileImageUrl147 | undefined;
  spaceSetsCapacity?: SpaceSetsCapacity148 | undefined;
  spaceOverCapacityDeniesUser?: SpaceOverCapacityDeniesUser149 | undefined;
  playerSetsAway?: PlayerSetsAway150 | undefined;
  mapSetCollisionsBits?: MapSetCollisionsBits151 | undefined;
  playerSetsCity?: PlayerSetsCity152 | undefined;
  playerSetsCountry?: PlayerSetsCountry153 | undefined;
  playerSetsStartDate?: PlayerSetsStartDate154 | undefined;
  playerStartsRecording?: PlayerStartsRecording155 | undefined;
  accessRequestsUpdated?: AccessRequestsUpdated156 | undefined;
  accessRequestRespondedTo?: AccessRequestRespondedTo157 | undefined;
  spaceSetsGuestPassStatuses?: SpaceSetsGuestPassStatuses158 | undefined;
  playerSetsAvailability?: PlayerSetsAvailability159 | undefined;
  subscriptionsUpdated?: SubscriptionsUpdated160 | undefined;
  enterWithTeammatesLobbyStateUpdated?: EnterWithTeammatesLobbyStateUpdated161 | undefined;
  enterWithTeammatesHostInitiatesEnterSpace?:
    | EnterWithTeammatesHostInitiatesEnterSpace162
    | undefined;
  /** add lots more stuff here! */
  spaceRolePermissionOverrideUpdated?: SpaceRolePermissionOverrideUpdated163 | undefined;
}

/** the events the client is subscribed to has been changed on the server */
export interface SubscriptionsUpdated {
  /** array of event names the client will be notified about */
  subscriptions: string[];
}

export interface ServerHeartbeat {
  /** no longer used */
  lastRTT: number;
}

export interface Info {
  message: string;
}

export interface Warn {
  message: string;
}

export interface ErrorEvent {
  message: string;
  code: number;
}

export interface Ready {
  id: string;
}

export interface TransactionStatus {
  txnId: number;
  succeeded: boolean;
  reason?: string | undefined;
}

/**
 * Always sent as the first message about any given player. If there are fields that must be initialized on clients
 * immediately, they should be included in this message.
 */
export interface PlayerJoins {
  encId: number;
}

export interface GotRequestMute {
  muterId: string;
  video: boolean;
}

export interface PlayerMoves {
  encId: number;
  /** all optional, only send what's changed */
  x?: number | undefined;
  y?: number | undefined;
  direction?: SpriteDirectionEnum_ENUM164 | undefined;
  mapId?: string | undefined;
  lastInputId: number;
}

export interface PlayerSetsStatus {
  encId: number;
  busy: boolean;
}

export interface PlayerSetsAvailability {
  encId: number;
  status: string;
  statusUpdatedAt?: string | undefined;
  statusEndOption?: string | undefined;
}

export interface PlayerSpotlights {
  /** the person who is being spotlit */
  encId: number;
  /** the person who is doing the spotlighting; legacy \holdover */
  spotlightedBy: number;
  spotlighted: number;
}

export interface PlayerRings {
  /** the ringer */
  encId: number;
}

export interface PlayerSetsImagePointer {
  encId: number;
  objectId: string;
  x: number;
  y: number;
}

export interface SetScreenPointerServer {
  encId: number;
  screenId: string;
  x: number;
  y: number;
  color: string;
}

export interface PlayerChats {
  senderId: string;
  recipient: string;
  contents: string;
  senderName: string;
  /** deprecating (NGN-710) */
  timestamp?: Timestamp165 | undefined;
  messageType: string;
  unixTime: number;
  id?: string | undefined;
  roomId?: string | undefined;
  approved?: boolean | undefined;
  nookId?: string | undefined;
}

export interface PlayerWaves {
  encId: number;
  targetId: string;
  isReply: boolean;
}

/** deprecating this (NGN-710) */
export interface Timestamp {
  seconds: number;
  nanoseconds: number;
}

export interface PlayerInteracts {
  encId: number;
  objId: string;
  mapId?:
    | string
    | undefined;
  /** JSON string */
  dataJson?: string | undefined;
}

export interface PlayerGhosts {
  encId: number;
  ghost: number;
}

export interface PlayerEntersWhisper {
  encId: number;
  whisperRecipient: string;
  whisperId: string;
}

export interface PlayerEntersWhisperV2 {
  encId: number;
  /** the person you intend to be whispering; will apply whisperId property to them as well */
  encIdTarget: number;
  whisperId: string;
}

export interface PlayerLeavesWhisper {
  encId: number;
}

export interface PlayerActivelySpeaks {
  encId: number;
  activelySpeaking: number;
}

export interface PlayerSetsEmoteV2 {
  encId: number;
  emote?: string | undefined;
  count?: number | undefined;
}

export interface PlayerSetsWorkCondition {
  encId: number;
  workCondition: number;
}

export interface PlayerSetsLastActive {
  encId: number;
  lastActive: string;
}

export interface PlayerSetsName {
  encId: number;
  name: string;
}

export interface PlayerSetsTextStatus {
  encId: number;
  textStatus: string;
}

export interface PlayerSetsPronouns {
  encId: number;
  pronouns: string;
}

export interface PlayerSetsTitle {
  encId: number;
  title: string;
}

export interface PlayerSetsCity {
  encId: number;
  city: string;
}

export interface PlayerSetsCountry {
  encId: number;
  country: string;
}

export interface PlayerSetsStartDate {
  encId: number;
  startDate: string;
}

export interface PlayerSetsTimezone {
  encId: number;
  timezone: string;
}

export interface PlayerSetsPhone {
  encId: number;
  phone: string;
}

export interface PlayerSetsDescription {
  encId: number;
  description: string;
}

export interface PlayerSetsProfileImageUrl {
  encId: number;
  profileImageUrl: string;
}

export interface PlayerSetsPersonalImageUrl {
  encId: number;
  personalImageUrl: string;
}

export interface PlayerSetsIsMobile {
  encId: number;
  isMobile: boolean;
}

export interface PlayerSetsEmojiStatus {
  encId: number;
  emojiStatus: string;
}

export interface PlayerSetsAffiliation {
  encId: number;
  affiliation: string;
}

export interface PlayerExits {
  encId: number;
}

export interface PlayerSetsOutfitString {
  encId: number;
  outfitString: string;
}

export interface PlayerSetsIsSignedIn {
  encId: number;
  isSignedIn: boolean;
}

export interface RespawnComplete {
}

/**
 * It's pretty wack that we're using JSON to serialize / deserialize space data here.
 * TODO: improve this by splitting this up into several events or using a better message interface
 * for this or something that doesn't require the client to JSON.parse().
 */
export interface SpaceOverwrites {
  spaceData: string;
}

export interface DynamicGate {
  exposure: number;
  /** to hardcode a list of spaces that should have it on */
  spaces: string[];
  refreshOnChange?: boolean | undefined;
}

export interface DynamicGates {
  livekitEnabled: DynamicGate166 | undefined;
  livekitSelfhostEnabled?:
    | DynamicGate166
    | undefined;
  /** BEFORE ADDING MORE OF THESE, DO A PROPER DESIGN AND RFC PLEASE! */
  agoraEnabled?: DynamicGate166 | undefined;
}

export interface SpaceSetsSpaceMembers {
  members: { [key: string]: SpaceMemberInfo167 };
}

export interface SpaceSetsSpaceMembers_MembersEntry {
  key: string;
  value: SpaceMemberInfo167 | undefined;
}

export interface SpaceIsClosed {
}

export interface PlayerEntersPortal {
  targetUrl: string;
  bypassPrompt?: boolean | undefined;
}

export interface CookieFound {
  encId: number;
}

/**
 * Each client has a unique string id, but this is costly to send over the wire
 * so an integer value is used in its place and then converted back to the
 * corresponding string id on the client and server.
 * This event provides the mapping between a player's string id [uid]
 * and their corresponding integer id [encId].
 * (see "Player..." events above for use of encId)
 */
export interface SpaceSetsIdMapping {
  uid: string;
  encId: number;
}

export interface PlayerShootsConfetti {
  /** the confetti shooter */
  encId: number;
}

export interface PlayerSetsEventStatus {
  encId: number;
  eventStatus: string;
}

export interface PlayerSetsInConversation {
  encId: number;
  inConversation: boolean;
}

export interface PlayerSetsCurrentDesk {
  encId: number;
  currentDesk: string;
}

export interface PlayerSetsCurrentArea {
  encId: number;
  currentArea: string;
}

export interface PlayerSetsGoKartId {
  encId: number;
  goKartId: string;
}

export interface PlayerSetsVehicleId {
  encId: number;
  vehicleId: string;
  action: string;
  previousVehicleId: string;
}

export interface PlayerSetsSpeedModifier {
  encId: number;
  speedModifier: number;
}

export interface PlayerSetsIsAlone {
  encId: number;
  isAlone: boolean;
}

export interface SpacePlaysSound {
  src: string;
  volume: number;
}

export interface SpaceStopsSound {
  src: string;
}

export interface PlayerSetsFocusModeEndTime {
  encId: number;
  focusModeEndTime: string;
}

export interface PlayerBlocks {
  blockedBy: string;
  blocked: boolean;
}

export interface CustomEvent {
  name: string;
  payload: string;
}

export interface PlayerUpdatesFocusModeStatus {
  encId: number;
  isInFocusMode: boolean;
}

export interface PlayerSetsItemString {
  encId: number;
  itemString: string;
}

export interface PlayerTriggersItem {
  encId: number;
  closestObject?: string | undefined;
  closestObjectTemplate?: string | undefined;
}

export interface PlayerNotifies {
  encId: number;
  notification: string;
}

export interface PlayerSetsFollowTarget {
  encId: number;
  followTarget: string;
}

export interface PlayerRequestsToLead {
  encId: number;
  snapshot: string;
}

export interface PlayerSetsManualVideoSrc {
  encId: number;
  manualVideoSrc: string;
}

export interface PlayerSetsIsNpc {
  encId: number;
  isNpc: boolean;
}

export interface PlayerSetsSubtitle {
  encId: number;
  subtitle: string;
}

export interface PlayerCrafts {
  encId: number;
  inputs: { [key: string]: number };
}

export interface PlayerCrafts_InputsEntry {
  key: string;
  value: number;
}

export interface MapMoveObject {
  mapId: string;
  objectId: string;
  targetX: number;
  targetY: number;
  targetXOffset?: number | undefined;
  targetYOffset?:
    | number
    | undefined;
  /** Time it takes to move object (in milliseconds) */
  duration: number;
  /**
   * "Linear" (default) | "Cubic" | "Elastic" | "Bounce" | "Back"
   * ---
   * Linear = constant speed.
   * Cubic = slight easing.
   * Elastic = spring-like motion; object overshoots point and ping-pongs until settling on the target.
   * Bounce = similar to a bouncing object coming to rest
   * Back = object slightly overshoots point and quickly settles back onto target.
   */
  easing?: string | undefined;
}

export interface PlayerEditsChatMessage {
  id: string;
  likes?: number | undefined;
  replied?: boolean | undefined;
  reply?: ChatReply168 | undefined;
  approved?: boolean | undefined;
}

export interface FXShakeObject {
  mapId: string;
  targetId: string;
  intensity?: number | undefined;
  durationMs?: number | undefined;
  mode?: number | undefined;
}

export interface FXShakeCamera {
  intensity?: number | undefined;
  durationMs?:
    | number
    | undefined;
  /** Map on which this should be applied (empty = entire space shakes) */
  mapId?:
    | string
    | undefined;
  /**
   * User ID this shake should apply to (empty = everyone in the given map or space will shake)
   * If mapID _and_ a target is provided, the map ID is disregarded and only the target user will shake.
   */
  targetUserId?: string | undefined;
}

export interface PlayerHighFives {
  encId: number;
  encIdTarget: number;
  emote?: string | undefined;
}

export interface PlayerSendsCommand {
  encId: number;
  command: string;
}

export interface SpaceRegistersCommand {
  command: string;
}

export interface PlayerUpdatesInventory {
  encId: number;
  /** maps item ids to item data */
  items: { [key: string]: InventoryItem29 };
  /** maps item ids to order string (e.g. "1,2" or "left-hand") */
  order: { [key: string]: string };
}

export interface PlayerUpdatesInventory_ItemsEntry {
  key: string;
  value: InventoryItem29 | undefined;
}

export interface PlayerUpdatesInventory_OrderEntry {
  key: string;
  value: string;
}

export interface SpaceUpdatesItems {
  /** maps item id to the full info about that Item */
  items: { [key: string]: SpaceItem169 };
}

export interface SpaceUpdatesItems_ItemsEntry {
  key: string;
  value: SpaceItem169 | undefined;
}

export interface PlayerTriggersInventoryItem {
  encId: number;
  itemId: string;
  abilityId: string;
}

export interface PlayerSetsAllowScreenPointer {
  encId: number;
  allowScreenPointer: boolean;
}

export interface PrecomputedEnterLocation {
  enterLocation: MapLocation170 | undefined;
}

export interface PlayerSetsDeskInfo {
  encId: number;
  deskInfo: DeskInfoV2171 | undefined;
}

export interface SpaceSetsCapacity {
  capacity: number;
}

export interface SpaceOverCapacityDeniesUser {
  userId: string;
}

export interface PlayerSetsAway {
  encId: number;
  away: boolean;
}

export interface PlayerStartsRecording {
  encId: number;
  nookId: string;
  initializing?: boolean | undefined;
}

export interface AccessRequest {
  guestId: string;
  memberId: string;
  requestedAtUnixTime: number;
  guestName: string;
  guestOutfitString: string;
}

export interface AccessRequestsUpdated {
  requests: AccessRequest172[];
}

export interface AccessRequestRespondedTo {
  targetId: string;
  accepted: boolean;
  location: MapLocation170 | undefined;
}

export interface PlayerGuestPassStatus {
  userId: string;
  guestPassStatus: string;
}

export interface SpaceSetsGuestPassStatuses {
  playerGuestPassStatuses: PlayerGuestPassStatus173[];
}

export interface EnterWithTeammatesSetOwnLobbyInfo {
  name: string;
  outfitString: string;
}

export interface EnterWithTeammatesInitiateEnterSpace {
}

export interface SetDeskFromNextAvailableDesk {
  targetId?: string | undefined;
  preferredDesk?: MapAndDesk174 | undefined;
  desksToIgnore: MapAndDesk174[];
}

export interface SpaceRolePermissionOverrideUpdated {
  role: string;
  permission: string;
  enabled: boolean;
}

export interface ClientServerBatch {
  /** don't add more stuff here */
  actions: ClientServerAction175[];
}

export interface ClientServerAction {
  /** future: optional txnID field */
  txnId?: number | undefined;
  clientHeartbeat?: ClientHeartbeat176 | undefined;
  clientBackupHeartbeat?: ClientBackupHeartbeat177 | undefined;
  updateSubscriptions?: UpdateSubscriptions178 | undefined;
  move?: Move179 | undefined;
  setAffiliation?: SetAffiliation180 | undefined;
  setStatus?: SetStatus181 | undefined;
  spotlight?: Spotlight182 | undefined;
  ring?: Ring183 | undefined;
  ban?: Ban184 | undefined;
  kick?:
    | Kick185
    | undefined;
  /** deprecating (NGN-705) */
  setImpassable?: SetImpassable186 | undefined;
  chat?: Chat187 | undefined;
  interact?: Interact188 | undefined;
  enterWhisper?: EnterWhisper189 | undefined;
  leaveWhisper?: LeaveWhisper190 | undefined;
  setEmojiStatus?: SetEmojiStatus191 | undefined;
  activelySpeaking?: ActivelySpeaking192 | undefined;
  setName?: SetName193 | undefined;
  setTextStatus?: SetTextStatus194 | undefined;
  teleport?: Teleport195 | undefined;
  exit?: Exit196 | undefined;
  enter?: Enter197 | undefined;
  setWorkCondition?: SetWorkCondition198 | undefined;
  respawn?: Respawn199 | undefined;
  spawn?: Spawn200 | undefined;
  ghost?: Ghost201 | undefined;
  init?: Init202 | undefined;
  setOutfitString?:
    | SetOutfitString203
    | undefined;
  /** experimental */
  shootConfetti?:
    | ShootConfetti204
    | undefined;
  /** experimental */
  setEventStatus?:
    | SetEventStatus205
    | undefined;
  /** experimental */
  setInConversation?:
    | SetInConversation206
    | undefined;
  /** deprecating (NGN-696) */
  setCurrentDesk?:
    | SetCurrentDesk207
    | undefined;
  /** experimental */
  setCurrentArea?: SetCurrentArea208 | undefined;
  setImagePointer?:
    | SetImagePointer209
    | undefined;
  /** deprecated (NGN-706) */
  setGoKartId?: SetGoKartId210 | undefined;
  mapSetDimensions?: MapSetDimensions72 | undefined;
  mapSetCollisions?: MapSetCollisions73 | undefined;
  mapSetBackgroundImagePath?: MapSetBackgroundImagePath74 | undefined;
  mapSetForegroundImagePath?:
    | MapSetForegroundImagePath75
    | undefined;
  /** deprecated (NGN-106) */
  mapSetSprites?: MapSetSprites76 | undefined;
  mapSetSpawns?:
    | MapSetSpawns78
    | undefined;
  /** deprecating (NGN-707) */
  mapSetSpaces?: MapSetSpaces77 | undefined;
  mapSetPortals?: MapSetPortals79 | undefined;
  mapSetAnnouncer?:
    | MapSetAnnouncer80
    | undefined;
  /** deprecating (use type 0 objects) (NGN-123) */
  mapSetAssets?: MapSetAssets81 | undefined;
  mapSetObjects?: MapSetObjects82 | undefined;
  mapSetName?: MapSetName83 | undefined;
  mapSetMuteOnEntry?: MapSetMuteOnEntry84 | undefined;
  mapSetUseDrawnBG?: MapSetUseDrawnBG85 | undefined;
  mapSetWalls?: MapSetWalls86 | undefined;
  mapSetFloors?:
    | MapSetFloors87
    | undefined;
  /** experimental */
  mapSetAreas?: MapSetAreas88 | undefined;
  mapAddObject?: MapAddObject211 | undefined;
  mapDeleteObject?:
    | MapDeleteObject89
    | undefined;
  /** deprecating (NGN-104) */
  mapSetSpawn?:
    | MapSetSpawn90
    | undefined;
  /** experimental */
  setIsAlone?: SetIsAlone212 | undefined;
  mapSetMiniMapImagePath?: MapSetMiniMapImagePath97 | undefined;
  mapSetEnabledChats?: MapSetEnabledChats93 | undefined;
  mapSetDescription?: MapSetDescription94 | undefined;
  mapSetDecoration?: MapSetDecoration95 | undefined;
  mapSetTutorialTasks?: MapSetTutorialTasks96 | undefined;
  playSound?: PlaySound213 | undefined;
  mapSetScript?: MapSetScript99 | undefined;
  setIsMobile?: SetIsMobile214 | undefined;
  setScreenPointer?: SetScreenPointer215 | undefined;
  setEmoteV2?:
    | SetEmoteV2216
    | undefined;
  /** experimental */
  setFocusModeEndTime?: SetFocusModeEndTime217 | undefined;
  mapDeleteObjectById?: MapDeleteObjectById218 | undefined;
  customAction?: CustomAction219 | undefined;
  block?: Block220 | undefined;
  setItemString?: SetItemString221 | undefined;
  triggerItem?: TriggerItem222 | undefined;
  notify?: Notify223 | undefined;
  setFollowTarget?: SetFollowTarget224 | undefined;
  requestToLead?: RequestToLead225 | undefined;
  enterPortal?: EnterPortal226 | undefined;
  setManualVideoSrc?: SetManualVideoSrc227 | undefined;
  setSubtitle?: SetSubtitle228 | undefined;
  playerUpdatesSession?: PlayerUpdatesSession117 | undefined;
  mapMoveObject?: MapMoveObject118 | undefined;
  chatMessageUpdated?: ChatMessageUpdated229 | undefined;
  fxShakeObject?: FXShakeObject120 | undefined;
  fxShakeCamera?: FXShakeCamera121 | undefined;
  registerCommand?: RegisterCommand230 | undefined;
  sendCommand?: SendCommand231 | undefined;
  speakerUpdatesSession?: SpeakerUpdatesSession124 | undefined;
  addInventoryItem?: AddInventoryItem232 | undefined;
  removeInventoryItem?: RemoveInventoryItem233 | undefined;
  setVehicleId?: SetVehicleId234 | undefined;
  setSpeedModifier?: SetSpeedModifier235 | undefined;
  highFive?: HighFive236 | undefined;
  updateSpaceItems?: SpaceUpdatesItems126 | undefined;
  stopSound?: StopSound237 | undefined;
  hipToBeSquare?: HipToBeSquare131 | undefined;
  craft?: Craft238 | undefined;
  triggerInventoryItem?: TriggerInventoryItem239 | undefined;
  setAllowScreenPointer?: SetAllowScreenPointer240 | undefined;
  precomputeEnter?: PrecomputeEnter241 | undefined;
  requestMute?: RequestMute242 | undefined;
  setDeskInfo?: SetDeskInfo243 | undefined;
  mapSetNooks?: MapSetNooks138 | undefined;
  requestToJoinNook?: RequestToJoinNook244 | undefined;
  updateNookPermission?: UpdateNookPermission245 | undefined;
  wave?: Wave246 | undefined;
  setPronouns?: SetPronouns247 | undefined;
  setTitle?: SetTitle248 | undefined;
  setTimezone?: SetTimezone249 | undefined;
  setPhone?: SetPhone250 | undefined;
  setDescription?: SetDescription251 | undefined;
  setProfileImageUrl?: SetProfileImageUrl252 | undefined;
  setPersonalImageUrl?: SetPersonalImageUrl253 | undefined;
  setAway?: SetAway254 | undefined;
  setCity?: SetCity255 | undefined;
  setCountry?: SetCountry256 | undefined;
  setStartDate?: SetStartDate257 | undefined;
  startRecording?: StartRecording258 | undefined;
  requestAccessViaCheckIn?: RequestAccessViaCheckIn259 | undefined;
  respondToAccessRequest?: RespondToAccessRequest260 | undefined;
  setAvailability?: SetAvailability261 | undefined;
  enterWithTeammatesSetOwnLobbyInfo?: EnterWithTeammatesSetOwnLobbyInfo262 | undefined;
  enterWithTeammatesInitiateEnterSpace?: EnterWithTeammatesInitiateEnterSpace263 | undefined;
  respawnAtDesk?: RespawnAtDesk264 | undefined;
  setDeskFromNextAvailableDesk?:
    | SetDeskFromNextAvailableDesk265
    | undefined;
  /** add lots more stuff here! */
  setSpaceRolePermissionOverride?: SetSpaceRolePermissionOverride266 | undefined;
}

/** tbh this is half heartbeat half for measuring ping */
export interface ClientHeartbeat {
}

/** this is because we've attached timings and stuff to the former one, don't want to interfere */
export interface ClientBackupHeartbeat {
}

export interface UpdateSubscriptions {
  subscriptions: { [key: string]: boolean };
  mapUpdateIds: { [key: string]: number };
}

export interface UpdateSubscriptions_SubscriptionsEntry {
  key: string;
  value: boolean;
}

export interface UpdateSubscriptions_MapUpdateIdsEntry {
  key: string;
  value: number;
}

export interface Move {
  dir: MoveDirectionEnum_ENUM1;
  stopped: boolean;
  inputId: number;
  targetId?: string | undefined;
}

export interface RequestMute {
  target: string;
  video: boolean;
}

export interface SetAffiliation {
  affiliation: string;
  targetId?: string | undefined;
}

export interface SetStatus {
  status: boolean;
  targetId?: string | undefined;
}

export interface SetAvailability {
  availability: string;
  endOption?: string | undefined;
}

export interface SetOutfitString {
  outfitString: string;
  targetId?: string | undefined;
}

export interface Spotlight {
  spotlightedUser: string;
  isSpotlighted: boolean;
}

export interface Ring {
  user: string;
}

export interface SetImagePointer {
  objectId: string;
  x: number;
  y: number;
}

export interface SetScreenPointer {
  screenId: string;
  x: number;
  y: number;
}

export interface Ban {
  user: string;
}

export interface Kick {
  user: string;
}

export interface Block {
  blockedUserId: string;
  blocked: boolean;
}

export interface SetImpassable {
  mapId: string;
  x: number;
  y: number;
  impassable: boolean;
}

export interface Chat {
  chatRecipient: string;
  contents: string;
  localPlayerIds: string[];
  mapId: string;
  id?: string | undefined;
  nookId?: string | undefined;
}

export interface Notify {
  notification: string;
}

export interface Interact {
  objId: string;
  mapId?:
    | string
    | undefined;
  /** JSON string */
  dataJson?: string | undefined;
}

export interface ActivelySpeaking {
  activelySpeaking: boolean;
}

export interface EnterWhisper {
  recipientId: string;
  dir: MoveDirectionEnum_ENUM1;
}

export interface LeaveWhisper {
}

export interface Ghost {
  ghost: number;
  /** why is this a uint32? it is in the original impl so.. it stays */
  targetId?: string | undefined;
}

export interface SetEmoteV2 {
  emote?: string | undefined;
  targetId?: string | undefined;
  count?: number | undefined;
}

export interface SetName {
  name: string;
  targetId?: string | undefined;
}

export interface SetTextStatus {
  textStatus: string;
  targetId?: string | undefined;
}

export interface SetPronouns {
  pronouns: string;
  targetId?: string | undefined;
}

export interface SetTitle {
  title: string;
  targetId?: string | undefined;
}

export interface SetCity {
  city: string;
  targetId?: string | undefined;
}

export interface SetCountry {
  country: string;
  targetId?: string | undefined;
}

export interface SetStartDate {
  startDate: string;
  targetId?: string | undefined;
}

export interface SetTimezone {
  timezone: string;
  targetId?: string | undefined;
}

export interface SetPhone {
  phone: string;
  targetId?: string | undefined;
}

export interface SetDescription {
  description: string;
  targetId?: string | undefined;
}

export interface SetProfileImageUrl {
  profileImageUrl: string;
  targetId?: string | undefined;
}

export interface SetPersonalImageUrl {
  personalImageUrl: string;
  targetId?: string | undefined;
}

export interface Exit {
}

export interface Enter {
  info?: PlayerInitInfo267 | undefined;
  spawnToken?: string | undefined;
  targetId?: string | undefined;
}

export interface PrecomputeEnter {
  enterLocation?: MapLocation170 | undefined;
  spawnToken?: string | undefined;
}

export interface SetEmojiStatus {
  emojiStatus: string;
  targetId?: string | undefined;
}

export interface Teleport {
  mapId: string;
  x: number;
  y: number;
  targetId?: string | undefined;
  direction?: SpriteDirectionEnum_ENUM164 | undefined;
}

export interface SetWorkCondition {
  workCondition: boolean;
  targetId?: string | undefined;
}

export interface Spawn {
  spawnToken: string;
}

export interface Respawn {
}

export interface RespawnAtDesk {
}

export interface RequestToJoinNook {
  nookId: string;
  mapId: string;
  name?: string | undefined;
}

export interface UpdateNookPermission {
  playerId: string;
  nookId: string;
  granted: boolean;
}

export interface Init {
  spaceId: string;
  token?: string | undefined;
  apiKey?: string | undefined;
}

export interface MapAddObject {
  mapId: string;
  object: WireObject10 | undefined;
  objectIdToPrependTo?: string | undefined;
}

export interface ShootConfetti {
  targetId?: string | undefined;
}

export interface SetEventStatus {
  eventStatus: string;
  targetId?: string | undefined;
}

export interface SetInConversation {
  inConversation: boolean;
  targetId?: string | undefined;
}

export interface SetCurrentDesk {
  currentDesk: string;
  targetId?: string | undefined;
}

export interface SetCurrentArea {
  currentArea: string;
  targetId?: string | undefined;
}

export interface SetGoKartId {
  goKartId: string;
  targetId?: string | undefined;
}

export interface SetVehicleId {
  vehicleId: string;
  targetId?: string | undefined;
  action?: string | undefined;
}

export interface SetSpeedModifier {
  speedModifier: number;
  targetId?: string | undefined;
}

export interface SetIsAlone {
  isAlone: boolean;
  targetId?: string | undefined;
}

export interface SetIsMobile {
  isMobile: boolean;
}

export interface PlaySound {
  src: string;
  volume: number;
  targetId?: string | undefined;
}

export interface StopSound {
  src: string;
  targetId?: string | undefined;
}

export interface SetFocusModeEndTime {
  focusModeEndTime: string;
  targetId?: string | undefined;
}

export interface SetItemString {
  itemString: string;
  targetId?: string | undefined;
}

export interface TriggerItem {
  closestObject?: string | undefined;
  closestObjectTemplate?: string | undefined;
}

export interface CustomAction {
  name: string;
  payload: string;
  recipients: string[];
  sendToAll?: boolean | undefined;
}

export interface SetFollowTarget {
  followTarget: string;
  targetId?: string | undefined;
}

export interface RequestToLead {
  target: string;
  snapshot: string;
}

export interface EnterPortal {
  targetUrl: string;
  bypassPrompt?: boolean | undefined;
  targetId?: string | undefined;
}

export interface SetManualVideoSrc {
  manualVideoSrc: string;
  targetId?: string | undefined;
}

export interface SetSubtitle {
  subtitle: string;
  targetId?: string | undefined;
}

export interface MapCommitsChanges {
  mapId: string;
  updateId: number;
}

/** Deprecated. TODO: NGN-708 */
export interface PlayerUpdatesSession {
  roomChecked?: boolean | undefined;
  chatChecked?: boolean | undefined;
  qaChecked?: boolean | undefined;
  approveQuestionsChecked?: boolean | undefined;
  roomId: string;
}

export interface SpeakerUpdatesSession {
  sessionId: string;
  customizeRoomEnabled?: boolean | undefined;
  chatEnabled?: boolean | undefined;
  qaEnabled?: boolean | undefined;
  approveQuestionsEnabled?: boolean | undefined;
  massMuteEnabled?: boolean | undefined;
}

export interface ChatReply {
  senderId: string;
  senderName: string;
  contents: string;
}

export interface ChatMessageUpdated {
  id: string;
}

export interface SendCommand {
  command: string;
  targetId?: string | undefined;
}

export interface RegisterCommand {
  command: string;
}

export interface Craft {
  inputs: { [key: string]: number };
}

export interface Craft_InputsEntry {
  key: string;
  value: number;
}

export interface HighFive {
  targetId: string;
  emote?: string | undefined;
}

export interface AddInventoryItem {
  itemId: string;
  delta: number;
  targetId: string;
}

export interface RemoveInventoryItem {
  itemId: string;
  delta: number;
  targetId?: string | undefined;
}

export interface HipToBeSquare {
  data: string;
}

export interface TriggerInventoryItem {
  itemId: string;
  abilityId: string;
}

export interface SetAllowScreenPointer {
  allowScreenPointer: boolean;
}

export interface SetDeskInfo {
  deskInfo: DeskInfoV2171 | undefined;
  targetId?: string | undefined;
}

export interface Wave {
  user: string;
  isReply: boolean;
}

export interface SetAway {
  away: boolean;
  targetId?: string | undefined;
}

export interface StartRecording {
  nookId: string;
  initializing?: boolean | undefined;
}

export interface RequestAccessViaCheckIn {
  userId: string;
  canceled: boolean;
  name?: string | undefined;
  outfitString?: string | undefined;
}

export interface RespondToAccessRequest {
  userId: string;
  accepted: boolean;
  locationType?: RespondToAccessRequest_LocationTypeEnum268 | undefined;
}

export enum RespondToAccessRequest_LocationTypeEnum {
  MyLocation = 0,
  DefaultSpawn = 1,
  UNRECOGNIZED = -1,
}

export function respondToAccessRequest_LocationTypeEnumFromJSON(object: any): RespondToAccessRequest_LocationTypeEnum {
  switch (object) {
    case 0:
    case "MyLocation":
      return RespondToAccessRequest_LocationTypeEnum.MyLocation;
    case 1:
    case "DefaultSpawn":
      return RespondToAccessRequest_LocationTypeEnum.DefaultSpawn;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RespondToAccessRequest_LocationTypeEnum.UNRECOGNIZED;
  }
}

export function respondToAccessRequest_LocationTypeEnumToJSON(object: RespondToAccessRequest_LocationTypeEnum): string {
  switch (object) {
    case RespondToAccessRequest_LocationTypeEnum.MyLocation:
      return "MyLocation";
    case RespondToAccessRequest_LocationTypeEnum.DefaultSpawn:
      return "DefaultSpawn";
    case RespondToAccessRequest_LocationTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SetSpaceRolePermissionOverride {
  role: string;
  permission: string;
  enabled: boolean;
}

function createBaseSpriteDirectionEnum(): SpriteDirectionEnum {
  return {};
}

export const SpriteDirectionEnum = {
  encode(_: SpriteDirectionEnum, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpriteDirectionEnum {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpriteDirectionEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SpriteDirectionEnum {
    return {};
  },

  toJSON(_: SpriteDirectionEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SpriteDirectionEnum>, I>>(base?: I): SpriteDirectionEnum {
    return SpriteDirectionEnum.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpriteDirectionEnum>, I>>(_: I): SpriteDirectionEnum {
    const message = createBaseSpriteDirectionEnum();
    return message;
  },
};

function createBaseMoveDirectionEnum(): MoveDirectionEnum {
  return {};
}

export const MoveDirectionEnum = {
  encode(_: MoveDirectionEnum, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MoveDirectionEnum {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveDirectionEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MoveDirectionEnum {
    return {};
  },

  toJSON(_: MoveDirectionEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MoveDirectionEnum>, I>>(base?: I): MoveDirectionEnum {
    return MoveDirectionEnum.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MoveDirectionEnum>, I>>(_: I): MoveDirectionEnum {
    const message = createBaseMoveDirectionEnum();
    return message;
  },
};

function createBaseInteractionEnum(): InteractionEnum {
  return {};
}

export const InteractionEnum = {
  encode(_: InteractionEnum, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InteractionEnum {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInteractionEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InteractionEnum {
    return {};
  },

  toJSON(_: InteractionEnum): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<InteractionEnum>, I>>(base?: I): InteractionEnum {
    return InteractionEnum.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<InteractionEnum>, I>>(_: I): InteractionEnum {
    const message = createBaseInteractionEnum();
    return message;
  },
};

function createBasePlayerInitInfo(): PlayerInitInfo {
  return {
    name: undefined,
    x: undefined,
    y: undefined,
    map: undefined,
    affiliation: undefined,
    busy: undefined,
    textStatus: undefined,
    emojiStatus: undefined,
    currentlyEquippedWearables: undefined,
    focusModeEndTime: undefined,
    currentDesk: undefined,
    itemString: undefined,
    isNpc: undefined,
  };
}

export const PlayerInitInfo = {
  encode(message: PlayerInitInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.x !== undefined) {
      writer.uint32(24).uint32(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(32).uint32(message.y);
    }
    if (message.map !== undefined) {
      writer.uint32(42).string(message.map);
    }
    if (message.affiliation !== undefined) {
      writer.uint32(50).string(message.affiliation);
    }
    if (message.busy !== undefined) {
      writer.uint32(56).bool(message.busy);
    }
    if (message.textStatus !== undefined) {
      writer.uint32(66).string(message.textStatus);
    }
    if (message.emojiStatus !== undefined) {
      writer.uint32(74).string(message.emojiStatus);
    }
    if (message.currentlyEquippedWearables !== undefined) {
      DBOutfit2.encode(message.currentlyEquippedWearables, writer.uint32(82).fork()).ldelim();
    }
    if (message.focusModeEndTime !== undefined) {
      writer.uint32(90).string(message.focusModeEndTime);
    }
    if (message.currentDesk !== undefined) {
      writer.uint32(106).string(message.currentDesk);
    }
    if (message.itemString !== undefined) {
      writer.uint32(114).string(message.itemString);
    }
    if (message.isNpc !== undefined) {
      writer.uint32(120).bool(message.isNpc);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerInitInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerInitInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.map = reader.string();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.affiliation = reader.string();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }

          message.busy = reader.bool();
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.textStatus = reader.string();
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.emojiStatus = reader.string();
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.currentlyEquippedWearables = DBOutfit2.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.focusModeEndTime = reader.string();
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.currentDesk = reader.string();
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.itemString = reader.string();
          continue;
        case 15:
          if (tag != 120) {
            break;
          }

          message.isNpc = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerInitInfo {
    return {
      name: isSet(object.name) ? String(object.name) : undefined,
      x: isSet(object.x) ? Number(object.x) : undefined,
      y: isSet(object.y) ? Number(object.y) : undefined,
      map: isSet(object.map) ? String(object.map) : undefined,
      affiliation: isSet(object.affiliation) ? String(object.affiliation) : undefined,
      busy: isSet(object.busy) ? Boolean(object.busy) : undefined,
      textStatus: isSet(object.textStatus) ? String(object.textStatus) : undefined,
      emojiStatus: isSet(object.emojiStatus) ? String(object.emojiStatus) : undefined,
      currentlyEquippedWearables: isSet(object.currentlyEquippedWearables)
        ? DBOutfit2.fromJSON(object.currentlyEquippedWearables)
        : undefined,
      focusModeEndTime: isSet(object.focusModeEndTime) ? String(object.focusModeEndTime) : undefined,
      currentDesk: isSet(object.currentDesk) ? String(object.currentDesk) : undefined,
      itemString: isSet(object.itemString) ? String(object.itemString) : undefined,
      isNpc: isSet(object.isNpc) ? Boolean(object.isNpc) : undefined,
    };
  },

  toJSON(message: PlayerInitInfo): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.map !== undefined && (obj.map = message.map);
    message.affiliation !== undefined && (obj.affiliation = message.affiliation);
    message.busy !== undefined && (obj.busy = message.busy);
    message.textStatus !== undefined && (obj.textStatus = message.textStatus);
    message.emojiStatus !== undefined && (obj.emojiStatus = message.emojiStatus);
    message.currentlyEquippedWearables !== undefined &&
      (obj.currentlyEquippedWearables = message.currentlyEquippedWearables
        ? DBOutfit2.toJSON(message.currentlyEquippedWearables)
        : undefined);
    message.focusModeEndTime !== undefined && (obj.focusModeEndTime = message.focusModeEndTime);
    message.currentDesk !== undefined && (obj.currentDesk = message.currentDesk);
    message.itemString !== undefined && (obj.itemString = message.itemString);
    message.isNpc !== undefined && (obj.isNpc = message.isNpc);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerInitInfo>, I>>(base?: I): PlayerInitInfo {
    return PlayerInitInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerInitInfo>, I>>(object: I): PlayerInitInfo {
    const message = createBasePlayerInitInfo();
    message.name = object.name ?? undefined;
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.map = object.map ?? undefined;
    message.affiliation = object.affiliation ?? undefined;
    message.busy = object.busy ?? undefined;
    message.textStatus = object.textStatus ?? undefined;
    message.emojiStatus = object.emojiStatus ?? undefined;
    message.currentlyEquippedWearables =
      (object.currentlyEquippedWearables !== undefined && object.currentlyEquippedWearables !== null)
        ? DBOutfit2.fromPartial(object.currentlyEquippedWearables)
        : undefined;
    message.focusModeEndTime = object.focusModeEndTime ?? undefined;
    message.currentDesk = object.currentDesk ?? undefined;
    message.itemString = object.itemString ?? undefined;
    message.isNpc = object.isNpc ?? undefined;
    return message;
  },
};

function createBaseDBOutfit(): DBOutfit {
  return {
    skin: "",
    hair: "",
    facialHair: "",
    top: "",
    bottom: "",
    shoes: "",
    hat: "",
    glasses: "",
    other: "",
    costume: undefined,
    mobility: undefined,
    jacket: undefined,
  };
}

export const DBOutfit = {
  encode(message: DBOutfit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.skin !== "") {
      writer.uint32(10).string(message.skin);
    }
    if (message.hair !== "") {
      writer.uint32(18).string(message.hair);
    }
    if (message.facialHair !== "") {
      writer.uint32(26).string(message.facialHair);
    }
    if (message.top !== "") {
      writer.uint32(34).string(message.top);
    }
    if (message.bottom !== "") {
      writer.uint32(42).string(message.bottom);
    }
    if (message.shoes !== "") {
      writer.uint32(50).string(message.shoes);
    }
    if (message.hat !== "") {
      writer.uint32(58).string(message.hat);
    }
    if (message.glasses !== "") {
      writer.uint32(66).string(message.glasses);
    }
    if (message.other !== "") {
      writer.uint32(74).string(message.other);
    }
    if (message.costume !== undefined) {
      writer.uint32(82).string(message.costume);
    }
    if (message.mobility !== undefined) {
      writer.uint32(90).string(message.mobility);
    }
    if (message.jacket !== undefined) {
      writer.uint32(98).string(message.jacket);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DBOutfit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDBOutfit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.skin = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.hair = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.facialHair = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.top = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.bottom = reader.string();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.shoes = reader.string();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.hat = reader.string();
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.glasses = reader.string();
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.other = reader.string();
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.costume = reader.string();
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.mobility = reader.string();
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.jacket = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DBOutfit {
    return {
      skin: isSet(object.skin) ? String(object.skin) : "",
      hair: isSet(object.hair) ? String(object.hair) : "",
      facialHair: isSet(object.facialHair) ? String(object.facialHair) : "",
      top: isSet(object.top) ? String(object.top) : "",
      bottom: isSet(object.bottom) ? String(object.bottom) : "",
      shoes: isSet(object.shoes) ? String(object.shoes) : "",
      hat: isSet(object.hat) ? String(object.hat) : "",
      glasses: isSet(object.glasses) ? String(object.glasses) : "",
      other: isSet(object.other) ? String(object.other) : "",
      costume: isSet(object.costume) ? String(object.costume) : undefined,
      mobility: isSet(object.mobility) ? String(object.mobility) : undefined,
      jacket: isSet(object.jacket) ? String(object.jacket) : undefined,
    };
  },

  toJSON(message: DBOutfit): unknown {
    const obj: any = {};
    message.skin !== undefined && (obj.skin = message.skin);
    message.hair !== undefined && (obj.hair = message.hair);
    message.facialHair !== undefined && (obj.facialHair = message.facialHair);
    message.top !== undefined && (obj.top = message.top);
    message.bottom !== undefined && (obj.bottom = message.bottom);
    message.shoes !== undefined && (obj.shoes = message.shoes);
    message.hat !== undefined && (obj.hat = message.hat);
    message.glasses !== undefined && (obj.glasses = message.glasses);
    message.other !== undefined && (obj.other = message.other);
    message.costume !== undefined && (obj.costume = message.costume);
    message.mobility !== undefined && (obj.mobility = message.mobility);
    message.jacket !== undefined && (obj.jacket = message.jacket);
    return obj;
  },

  create<I extends Exact<DeepPartial<DBOutfit>, I>>(base?: I): DBOutfit {
    return DBOutfit.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DBOutfit>, I>>(object: I): DBOutfit {
    const message = createBaseDBOutfit();
    message.skin = object.skin ?? "";
    message.hair = object.hair ?? "";
    message.facialHair = object.facialHair ?? "";
    message.top = object.top ?? "";
    message.bottom = object.bottom ?? "";
    message.shoes = object.shoes ?? "";
    message.hat = object.hat ?? "";
    message.glasses = object.glasses ?? "";
    message.other = object.other ?? "";
    message.costume = object.costume ?? undefined;
    message.mobility = object.mobility ?? undefined;
    message.jacket = object.jacket ?? undefined;
    return message;
  },
};

function createBaseWireObjectSpritesheetFraming(): WireObjectSpritesheetFraming {
  return { frameWidth: 0, frameHeight: 0 };
}

export const WireObjectSpritesheetFraming = {
  encode(message: WireObjectSpritesheetFraming, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.frameWidth !== 0) {
      writer.uint32(8).int32(message.frameWidth);
    }
    if (message.frameHeight !== 0) {
      writer.uint32(16).int32(message.frameHeight);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireObjectSpritesheetFraming {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireObjectSpritesheetFraming();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.frameWidth = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.frameHeight = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireObjectSpritesheetFraming {
    return {
      frameWidth: isSet(object.frameWidth) ? Number(object.frameWidth) : 0,
      frameHeight: isSet(object.frameHeight) ? Number(object.frameHeight) : 0,
    };
  },

  toJSON(message: WireObjectSpritesheetFraming): unknown {
    const obj: any = {};
    message.frameWidth !== undefined && (obj.frameWidth = Math.round(message.frameWidth));
    message.frameHeight !== undefined && (obj.frameHeight = Math.round(message.frameHeight));
    return obj;
  },

  create<I extends Exact<DeepPartial<WireObjectSpritesheetFraming>, I>>(base?: I): WireObjectSpritesheetFraming {
    return WireObjectSpritesheetFraming.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireObjectSpritesheetFraming>, I>>(object: I): WireObjectSpritesheetFraming {
    const message = createBaseWireObjectSpritesheetFraming();
    message.frameWidth = object.frameWidth ?? 0;
    message.frameHeight = object.frameHeight ?? 0;
    return message;
  },
};

function createBaseWireObjectSpriteAnimConfig(): WireObjectSpriteAnimConfig {
  return { useSequenceAsRange: undefined, sequence: [], loop: undefined, frameRate: 0 };
}

export const WireObjectSpriteAnimConfig = {
  encode(message: WireObjectSpriteAnimConfig, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.useSequenceAsRange !== undefined) {
      writer.uint32(8).bool(message.useSequenceAsRange);
    }
    writer.uint32(18).fork();
    for (const v of message.sequence) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.loop !== undefined) {
      writer.uint32(24).bool(message.loop);
    }
    if (message.frameRate !== 0) {
      writer.uint32(32).uint32(message.frameRate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireObjectSpriteAnimConfig {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireObjectSpriteAnimConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.useSequenceAsRange = reader.bool();
          continue;
        case 2:
          if (tag == 16) {
            message.sequence.push(reader.uint32());
            continue;
          }

          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sequence.push(reader.uint32());
            }

            continue;
          }

          break;
        case 3:
          if (tag != 24) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.frameRate = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireObjectSpriteAnimConfig {
    return {
      useSequenceAsRange: isSet(object.useSequenceAsRange) ? Boolean(object.useSequenceAsRange) : undefined,
      sequence: Array.isArray(object?.sequence) ? object.sequence.map((e: any) => Number(e)) : [],
      loop: isSet(object.loop) ? Boolean(object.loop) : undefined,
      frameRate: isSet(object.frameRate) ? Number(object.frameRate) : 0,
    };
  },

  toJSON(message: WireObjectSpriteAnimConfig): unknown {
    const obj: any = {};
    message.useSequenceAsRange !== undefined && (obj.useSequenceAsRange = message.useSequenceAsRange);
    if (message.sequence) {
      obj.sequence = message.sequence.map((e) => Math.round(e));
    } else {
      obj.sequence = [];
    }
    message.loop !== undefined && (obj.loop = message.loop);
    message.frameRate !== undefined && (obj.frameRate = Math.round(message.frameRate));
    return obj;
  },

  create<I extends Exact<DeepPartial<WireObjectSpriteAnimConfig>, I>>(base?: I): WireObjectSpriteAnimConfig {
    return WireObjectSpriteAnimConfig.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireObjectSpriteAnimConfig>, I>>(object: I): WireObjectSpriteAnimConfig {
    const message = createBaseWireObjectSpriteAnimConfig();
    message.useSequenceAsRange = object.useSequenceAsRange ?? undefined;
    message.sequence = object.sequence?.map((e) => e) || [];
    message.loop = object.loop ?? undefined;
    message.frameRate = object.frameRate ?? 0;
    return message;
  },
};

function createBaseWireObjectSpritesheet(): WireObjectSpritesheet {
  return {
    spritesheetUrl: "",
    framing: undefined,
    animations: {},
    currentAnim: undefined,
    pauseAnimationsIfFpsBelowFramerate: undefined,
  };
}

export const WireObjectSpritesheet = {
  encode(message: WireObjectSpritesheet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spritesheetUrl !== "") {
      writer.uint32(10).string(message.spritesheetUrl);
    }
    if (message.framing !== undefined) {
      WireObjectSpritesheetFraming3.encode(message.framing, writer.uint32(18).fork()).ldelim();
    }
    Object.entries(message.animations).forEach(([key, value]) => {
      WireObjectSpritesheet_AnimationsEntry277.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    if (message.currentAnim !== undefined) {
      writer.uint32(34).string(message.currentAnim);
    }
    if (message.pauseAnimationsIfFpsBelowFramerate !== undefined) {
      writer.uint32(40).bool(message.pauseAnimationsIfFpsBelowFramerate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireObjectSpritesheet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireObjectSpritesheet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.spritesheetUrl = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.framing = WireObjectSpritesheetFraming3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          const entry3 = WireObjectSpritesheet_AnimationsEntry277.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.animations[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.currentAnim = reader.string();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.pauseAnimationsIfFpsBelowFramerate = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireObjectSpritesheet {
    return {
      spritesheetUrl: isSet(object.spritesheetUrl) ? String(object.spritesheetUrl) : "",
      framing: isSet(object.framing) ? WireObjectSpritesheetFraming3.fromJSON(object.framing) : undefined,
      animations: isObject(object.animations)
        ? Object.entries(object.animations).reduce<{ [key: string]: WireObjectSpriteAnimConfig4 }>(
          (acc, [key, value]) => {
            acc[key] = WireObjectSpriteAnimConfig4.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      currentAnim: isSet(object.currentAnim) ? String(object.currentAnim) : undefined,
      pauseAnimationsIfFpsBelowFramerate: isSet(object.pauseAnimationsIfFpsBelowFramerate)
        ? Boolean(object.pauseAnimationsIfFpsBelowFramerate)
        : undefined,
    };
  },

  toJSON(message: WireObjectSpritesheet): unknown {
    const obj: any = {};
    message.spritesheetUrl !== undefined && (obj.spritesheetUrl = message.spritesheetUrl);
    message.framing !== undefined &&
      (obj.framing = message.framing ? WireObjectSpritesheetFraming3.toJSON(message.framing) : undefined);
    obj.animations = {};
    if (message.animations) {
      Object.entries(message.animations).forEach(([k, v]) => {
        obj.animations[k] = WireObjectSpriteAnimConfig4.toJSON(v);
      });
    }
    message.currentAnim !== undefined && (obj.currentAnim = message.currentAnim);
    message.pauseAnimationsIfFpsBelowFramerate !== undefined &&
      (obj.pauseAnimationsIfFpsBelowFramerate = message.pauseAnimationsIfFpsBelowFramerate);
    return obj;
  },

  create<I extends Exact<DeepPartial<WireObjectSpritesheet>, I>>(base?: I): WireObjectSpritesheet {
    return WireObjectSpritesheet.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireObjectSpritesheet>, I>>(object: I): WireObjectSpritesheet {
    const message = createBaseWireObjectSpritesheet();
    message.spritesheetUrl = object.spritesheetUrl ?? "";
    message.framing = (object.framing !== undefined && object.framing !== null)
      ? WireObjectSpritesheetFraming3.fromPartial(object.framing)
      : undefined;
    message.animations = Object.entries(object.animations ?? {}).reduce<{ [key: string]: WireObjectSpriteAnimConfig4 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = WireObjectSpriteAnimConfig4.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.currentAnim = object.currentAnim ?? undefined;
    message.pauseAnimationsIfFpsBelowFramerate = object.pauseAnimationsIfFpsBelowFramerate ?? undefined;
    return message;
  },
};

function createBaseWireObjectSpritesheet_AnimationsEntry(): WireObjectSpritesheet_AnimationsEntry {
  return { key: "", value: undefined };
}

export const WireObjectSpritesheet_AnimationsEntry = {
  encode(message: WireObjectSpritesheet_AnimationsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      WireObjectSpriteAnimConfig4.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireObjectSpritesheet_AnimationsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireObjectSpritesheet_AnimationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = WireObjectSpriteAnimConfig4.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireObjectSpritesheet_AnimationsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? WireObjectSpriteAnimConfig4.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: WireObjectSpritesheet_AnimationsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined &&
      (obj.value = message.value ? WireObjectSpriteAnimConfig4.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<WireObjectSpritesheet_AnimationsEntry>, I>>(
    base?: I,
  ): WireObjectSpritesheet_AnimationsEntry {
    return WireObjectSpritesheet_AnimationsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireObjectSpritesheet_AnimationsEntry>, I>>(
    object: I,
  ): WireObjectSpritesheet_AnimationsEntry {
    const message = createBaseWireObjectSpritesheet_AnimationsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? WireObjectSpriteAnimConfig4.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseWireObject(): WireObject {
  return {
    templateId: undefined,
    Name: undefined,
    Tags: [],
    x: undefined,
    y: undefined,
    offsetX: undefined,
    offsetY: undefined,
    color: undefined,
    orientation: undefined,
    normal: undefined,
    highlighted: undefined,
    type: undefined,
    width: undefined,
    height: undefined,
    extensionClass: undefined,
    previewMessage: undefined,
    distThreshold: undefined,
    propertiesJson: undefined,
    sound: undefined,
    objectStartTime: undefined,
    objectExpireTime: undefined,
    id: undefined,
    customState: undefined,
    objectPlacerId: undefined,
    numGoKarts: undefined,
    spritesheet: undefined,
    zIndex: undefined,
  };
}

export const WireObject = {
  encode(message: WireObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.templateId !== undefined) {
      writer.uint32(10).string(message.templateId);
    }
    if (message.Name !== undefined) {
      writer.uint32(18).string(message.Name);
    }
    for (const v of message.Tags) {
      writer.uint32(26).string(v!);
    }
    if (message.x !== undefined) {
      writer.uint32(32).uint32(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(40).uint32(message.y);
    }
    if (message.offsetX !== undefined) {
      writer.uint32(53).float(message.offsetX);
    }
    if (message.offsetY !== undefined) {
      writer.uint32(61).float(message.offsetY);
    }
    if (message.color !== undefined) {
      writer.uint32(66).string(message.color);
    }
    if (message.orientation !== undefined) {
      writer.uint32(72).uint32(message.orientation);
    }
    if (message.normal !== undefined) {
      writer.uint32(82).string(message.normal);
    }
    if (message.highlighted !== undefined) {
      writer.uint32(90).string(message.highlighted);
    }
    if (message.type !== undefined) {
      writer.uint32(96).int32(message.type);
    }
    if (message.width !== undefined) {
      writer.uint32(104).uint32(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(112).uint32(message.height);
    }
    if (message.extensionClass !== undefined) {
      writer.uint32(122).string(message.extensionClass);
    }
    if (message.previewMessage !== undefined) {
      writer.uint32(130).string(message.previewMessage);
    }
    if (message.distThreshold !== undefined) {
      writer.uint32(136).uint32(message.distThreshold);
    }
    if (message.propertiesJson !== undefined) {
      writer.uint32(146).string(message.propertiesJson);
    }
    if (message.sound !== undefined) {
      Sound6.encode(message.sound, writer.uint32(154).fork()).ldelim();
    }
    if (message.objectStartTime !== undefined) {
      ObjectTime7.encode(message.objectStartTime, writer.uint32(162).fork()).ldelim();
    }
    if (message.objectExpireTime !== undefined) {
      ObjectTime7.encode(message.objectExpireTime, writer.uint32(170).fork()).ldelim();
    }
    if (message.id !== undefined) {
      writer.uint32(178).string(message.id);
    }
    if (message.customState !== undefined) {
      writer.uint32(186).string(message.customState);
    }
    if (message.objectPlacerId !== undefined) {
      writer.uint32(194).string(message.objectPlacerId);
    }
    if (message.numGoKarts !== undefined) {
      writer.uint32(200).uint32(message.numGoKarts);
    }
    if (message.spritesheet !== undefined) {
      WireObjectSpritesheet8.encode(message.spritesheet, writer.uint32(210).fork()).ldelim();
    }
    if (message.zIndex !== undefined) {
      writer.uint32(221).float(message.zIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.templateId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.Name = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.Tags.push(reader.string());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 6:
          if (tag != 53) {
            break;
          }

          message.offsetX = reader.float();
          continue;
        case 7:
          if (tag != 61) {
            break;
          }

          message.offsetY = reader.float();
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.color = reader.string();
          continue;
        case 9:
          if (tag != 72) {
            break;
          }

          message.orientation = reader.uint32();
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.normal = reader.string();
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.highlighted = reader.string();
          continue;
        case 12:
          if (tag != 96) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 13:
          if (tag != 104) {
            break;
          }

          message.width = reader.uint32();
          continue;
        case 14:
          if (tag != 112) {
            break;
          }

          message.height = reader.uint32();
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.extensionClass = reader.string();
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.previewMessage = reader.string();
          continue;
        case 17:
          if (tag != 136) {
            break;
          }

          message.distThreshold = reader.uint32();
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.propertiesJson = reader.string();
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.sound = Sound6.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.objectStartTime = ObjectTime7.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag != 170) {
            break;
          }

          message.objectExpireTime = ObjectTime7.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag != 178) {
            break;
          }

          message.id = reader.string();
          continue;
        case 23:
          if (tag != 186) {
            break;
          }

          message.customState = reader.string();
          continue;
        case 24:
          if (tag != 194) {
            break;
          }

          message.objectPlacerId = reader.string();
          continue;
        case 25:
          if (tag != 200) {
            break;
          }

          message.numGoKarts = reader.uint32();
          continue;
        case 26:
          if (tag != 210) {
            break;
          }

          message.spritesheet = WireObjectSpritesheet8.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag != 221) {
            break;
          }

          message.zIndex = reader.float();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireObject {
    return {
      templateId: isSet(object.templateId) ? String(object.templateId) : undefined,
      Name: isSet(object.Name) ? String(object.Name) : undefined,
      Tags: Array.isArray(object?.Tags) ? object.Tags.map((e: any) => String(e)) : [],
      x: isSet(object.x) ? Number(object.x) : undefined,
      y: isSet(object.y) ? Number(object.y) : undefined,
      offsetX: isSet(object.offsetX) ? Number(object.offsetX) : undefined,
      offsetY: isSet(object.offsetY) ? Number(object.offsetY) : undefined,
      color: isSet(object.color) ? String(object.color) : undefined,
      orientation: isSet(object.orientation) ? Number(object.orientation) : undefined,
      normal: isSet(object.normal) ? String(object.normal) : undefined,
      highlighted: isSet(object.highlighted) ? String(object.highlighted) : undefined,
      type: isSet(object.type) ? interactionEnum_ENUMFromJSON269(object.type) : undefined,
      width: isSet(object.width) ? Number(object.width) : undefined,
      height: isSet(object.height) ? Number(object.height) : undefined,
      extensionClass: isSet(object.extensionClass) ? String(object.extensionClass) : undefined,
      previewMessage: isSet(object.previewMessage) ? String(object.previewMessage) : undefined,
      distThreshold: isSet(object.distThreshold) ? Number(object.distThreshold) : undefined,
      propertiesJson: isSet(object.propertiesJson) ? String(object.propertiesJson) : undefined,
      sound: isSet(object.sound) ? Sound6.fromJSON(object.sound) : undefined,
      objectStartTime: isSet(object.objectStartTime) ? ObjectTime7.fromJSON(object.objectStartTime) : undefined,
      objectExpireTime: isSet(object.objectExpireTime) ? ObjectTime7.fromJSON(object.objectExpireTime) : undefined,
      id: isSet(object.id) ? String(object.id) : undefined,
      customState: isSet(object.customState) ? String(object.customState) : undefined,
      objectPlacerId: isSet(object.objectPlacerId) ? String(object.objectPlacerId) : undefined,
      numGoKarts: isSet(object.numGoKarts) ? Number(object.numGoKarts) : undefined,
      spritesheet: isSet(object.spritesheet) ? WireObjectSpritesheet8.fromJSON(object.spritesheet) : undefined,
      zIndex: isSet(object.zIndex) ? Number(object.zIndex) : undefined,
    };
  },

  toJSON(message: WireObject): unknown {
    const obj: any = {};
    message.templateId !== undefined && (obj.templateId = message.templateId);
    message.Name !== undefined && (obj.Name = message.Name);
    if (message.Tags) {
      obj.Tags = message.Tags.map((e) => e);
    } else {
      obj.Tags = [];
    }
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.offsetX !== undefined && (obj.offsetX = message.offsetX);
    message.offsetY !== undefined && (obj.offsetY = message.offsetY);
    message.color !== undefined && (obj.color = message.color);
    message.orientation !== undefined && (obj.orientation = Math.round(message.orientation));
    message.normal !== undefined && (obj.normal = message.normal);
    message.highlighted !== undefined && (obj.highlighted = message.highlighted);
    message.type !== undefined &&
      (obj.type = message.type !== undefined ? interactionEnum_ENUMToJSON270(message.type) : undefined);
    message.width !== undefined && (obj.width = Math.round(message.width));
    message.height !== undefined && (obj.height = Math.round(message.height));
    message.extensionClass !== undefined && (obj.extensionClass = message.extensionClass);
    message.previewMessage !== undefined && (obj.previewMessage = message.previewMessage);
    message.distThreshold !== undefined && (obj.distThreshold = Math.round(message.distThreshold));
    message.propertiesJson !== undefined && (obj.propertiesJson = message.propertiesJson);
    message.sound !== undefined && (obj.sound = message.sound ? Sound6.toJSON(message.sound) : undefined);
    message.objectStartTime !== undefined &&
      (obj.objectStartTime = message.objectStartTime ? ObjectTime7.toJSON(message.objectStartTime) : undefined);
    message.objectExpireTime !== undefined &&
      (obj.objectExpireTime = message.objectExpireTime ? ObjectTime7.toJSON(message.objectExpireTime) : undefined);
    message.id !== undefined && (obj.id = message.id);
    message.customState !== undefined && (obj.customState = message.customState);
    message.objectPlacerId !== undefined && (obj.objectPlacerId = message.objectPlacerId);
    message.numGoKarts !== undefined && (obj.numGoKarts = Math.round(message.numGoKarts));
    message.spritesheet !== undefined &&
      (obj.spritesheet = message.spritesheet ? WireObjectSpritesheet8.toJSON(message.spritesheet) : undefined);
    message.zIndex !== undefined && (obj.zIndex = message.zIndex);
    return obj;
  },

  create<I extends Exact<DeepPartial<WireObject>, I>>(base?: I): WireObject {
    return WireObject.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireObject>, I>>(object: I): WireObject {
    const message = createBaseWireObject();
    message.templateId = object.templateId ?? undefined;
    message.Name = object.Name ?? undefined;
    message.Tags = object.Tags?.map((e) => e) || [];
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.offsetX = object.offsetX ?? undefined;
    message.offsetY = object.offsetY ?? undefined;
    message.color = object.color ?? undefined;
    message.orientation = object.orientation ?? undefined;
    message.normal = object.normal ?? undefined;
    message.highlighted = object.highlighted ?? undefined;
    message.type = object.type ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.extensionClass = object.extensionClass ?? undefined;
    message.previewMessage = object.previewMessage ?? undefined;
    message.distThreshold = object.distThreshold ?? undefined;
    message.propertiesJson = object.propertiesJson ?? undefined;
    message.sound = (object.sound !== undefined && object.sound !== null)
      ? Sound6.fromPartial(object.sound)
      : undefined;
    message.objectStartTime = (object.objectStartTime !== undefined && object.objectStartTime !== null)
      ? ObjectTime7.fromPartial(object.objectStartTime)
      : undefined;
    message.objectExpireTime = (object.objectExpireTime !== undefined && object.objectExpireTime !== null)
      ? ObjectTime7.fromPartial(object.objectExpireTime)
      : undefined;
    message.id = object.id ?? undefined;
    message.customState = object.customState ?? undefined;
    message.objectPlacerId = object.objectPlacerId ?? undefined;
    message.numGoKarts = object.numGoKarts ?? undefined;
    message.spritesheet = (object.spritesheet !== undefined && object.spritesheet !== null)
      ? WireObjectSpritesheet8.fromPartial(object.spritesheet)
      : undefined;
    message.zIndex = object.zIndex ?? undefined;
    return message;
  },
};

function createBaseSpaceMemberInfo(): SpaceMemberInfo {
  return {
    roles: {},
    name: undefined,
    currentlyEquippedWearables: undefined,
    deskInfo: undefined,
    allowScreenPointer: undefined,
    role: "",
  };
}

export const SpaceMemberInfo = {
  encode(message: SpaceMemberInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.roles).forEach(([key, value]) => {
      SpaceMemberInfo_RolesEntry278.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.currentlyEquippedWearables !== undefined) {
      DBOutfit2.encode(message.currentlyEquippedWearables, writer.uint32(34).fork()).ldelim();
    }
    if (message.deskInfo !== undefined) {
      DeskInfo9.encode(message.deskInfo, writer.uint32(42).fork()).ldelim();
    }
    if (message.allowScreenPointer !== undefined) {
      writer.uint32(48).bool(message.allowScreenPointer);
    }
    if (message.role !== "") {
      writer.uint32(58).string(message.role);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceMemberInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceMemberInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = SpaceMemberInfo_RolesEntry278.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.roles[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.currentlyEquippedWearables = DBOutfit2.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.deskInfo = DeskInfo9.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.allowScreenPointer = reader.bool();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.role = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceMemberInfo {
    return {
      roles: isObject(object.roles)
        ? Object.entries(object.roles).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      name: isSet(object.name) ? String(object.name) : undefined,
      currentlyEquippedWearables: isSet(object.currentlyEquippedWearables)
        ? DBOutfit2.fromJSON(object.currentlyEquippedWearables)
        : undefined,
      deskInfo: isSet(object.deskInfo) ? DeskInfo9.fromJSON(object.deskInfo) : undefined,
      allowScreenPointer: isSet(object.allowScreenPointer) ? Boolean(object.allowScreenPointer) : undefined,
      role: isSet(object.role) ? String(object.role) : "",
    };
  },

  toJSON(message: SpaceMemberInfo): unknown {
    const obj: any = {};
    obj.roles = {};
    if (message.roles) {
      Object.entries(message.roles).forEach(([k, v]) => {
        obj.roles[k] = v;
      });
    }
    message.name !== undefined && (obj.name = message.name);
    message.currentlyEquippedWearables !== undefined &&
      (obj.currentlyEquippedWearables = message.currentlyEquippedWearables
        ? DBOutfit2.toJSON(message.currentlyEquippedWearables)
        : undefined);
    message.deskInfo !== undefined &&
      (obj.deskInfo = message.deskInfo ? DeskInfo9.toJSON(message.deskInfo) : undefined);
    message.allowScreenPointer !== undefined && (obj.allowScreenPointer = message.allowScreenPointer);
    message.role !== undefined && (obj.role = message.role);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceMemberInfo>, I>>(base?: I): SpaceMemberInfo {
    return SpaceMemberInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceMemberInfo>, I>>(object: I): SpaceMemberInfo {
    const message = createBaseSpaceMemberInfo();
    message.roles = Object.entries(object.roles ?? {}).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Boolean(value);
      }
      return acc;
    }, {});
    message.name = object.name ?? undefined;
    message.currentlyEquippedWearables =
      (object.currentlyEquippedWearables !== undefined && object.currentlyEquippedWearables !== null)
        ? DBOutfit2.fromPartial(object.currentlyEquippedWearables)
        : undefined;
    message.deskInfo = (object.deskInfo !== undefined && object.deskInfo !== null)
      ? DeskInfo9.fromPartial(object.deskInfo)
      : undefined;
    message.allowScreenPointer = object.allowScreenPointer ?? undefined;
    message.role = object.role ?? "";
    return message;
  },
};

function createBaseSpaceMemberInfo_RolesEntry(): SpaceMemberInfo_RolesEntry {
  return { key: "", value: false };
}

export const SpaceMemberInfo_RolesEntry = {
  encode(message: SpaceMemberInfo_RolesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value === true) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceMemberInfo_RolesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceMemberInfo_RolesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceMemberInfo_RolesEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? Boolean(object.value) : false,
    };
  },

  toJSON(message: SpaceMemberInfo_RolesEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceMemberInfo_RolesEntry>, I>>(base?: I): SpaceMemberInfo_RolesEntry {
    return SpaceMemberInfo_RolesEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceMemberInfo_RolesEntry>, I>>(object: I): SpaceMemberInfo_RolesEntry {
    const message = createBaseSpaceMemberInfo_RolesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseBackedUpDeskObject(): BackedUpDeskObject {
  return { obj: undefined, offsetX: 0, offsetY: 0 };
}

export const BackedUpDeskObject = {
  encode(message: BackedUpDeskObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.obj !== undefined) {
      WireObject10.encode(message.obj, writer.uint32(10).fork()).ldelim();
    }
    if (message.offsetX !== 0) {
      writer.uint32(16).uint32(message.offsetX);
    }
    if (message.offsetY !== 0) {
      writer.uint32(24).uint32(message.offsetY);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BackedUpDeskObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackedUpDeskObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.obj = WireObject10.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.offsetX = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.offsetY = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackedUpDeskObject {
    return {
      obj: isSet(object.obj) ? WireObject10.fromJSON(object.obj) : undefined,
      offsetX: isSet(object.offsetX) ? Number(object.offsetX) : 0,
      offsetY: isSet(object.offsetY) ? Number(object.offsetY) : 0,
    };
  },

  toJSON(message: BackedUpDeskObject): unknown {
    const obj: any = {};
    message.obj !== undefined && (obj.obj = message.obj ? WireObject10.toJSON(message.obj) : undefined);
    message.offsetX !== undefined && (obj.offsetX = Math.round(message.offsetX));
    message.offsetY !== undefined && (obj.offsetY = Math.round(message.offsetY));
    return obj;
  },

  create<I extends Exact<DeepPartial<BackedUpDeskObject>, I>>(base?: I): BackedUpDeskObject {
    return BackedUpDeskObject.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<BackedUpDeskObject>, I>>(object: I): BackedUpDeskObject {
    const message = createBaseBackedUpDeskObject();
    message.obj = (object.obj !== undefined && object.obj !== null) ? WireObject10.fromPartial(object.obj) : undefined;
    message.offsetX = object.offsetX ?? 0;
    message.offsetY = object.offsetY ?? 0;
    return message;
  },
};

function createBaseDeskObjects(): DeskObjects {
  return { objects: {} };
}

export const DeskObjects = {
  encode(message: DeskObjects, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.objects).forEach(([key, value]) => {
      DeskObjects_ObjectsEntry279.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeskObjects {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeskObjects();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = DeskObjects_ObjectsEntry279.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.objects[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeskObjects {
    return {
      objects: isObject(object.objects)
        ? Object.entries(object.objects).reduce<{ [key: string]: BackedUpDeskObject11 }>((acc, [key, value]) => {
          acc[key] = BackedUpDeskObject11.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DeskObjects): unknown {
    const obj: any = {};
    obj.objects = {};
    if (message.objects) {
      Object.entries(message.objects).forEach(([k, v]) => {
        obj.objects[k] = BackedUpDeskObject11.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeskObjects>, I>>(base?: I): DeskObjects {
    return DeskObjects.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DeskObjects>, I>>(object: I): DeskObjects {
    const message = createBaseDeskObjects();
    message.objects = Object.entries(object.objects ?? {}).reduce<{ [key: string]: BackedUpDeskObject11 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = BackedUpDeskObject11.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseDeskObjects_ObjectsEntry(): DeskObjects_ObjectsEntry {
  return { key: "", value: undefined };
}

export const DeskObjects_ObjectsEntry = {
  encode(message: DeskObjects_ObjectsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      BackedUpDeskObject11.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeskObjects_ObjectsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeskObjects_ObjectsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = BackedUpDeskObject11.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeskObjects_ObjectsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? BackedUpDeskObject11.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: DeskObjects_ObjectsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? BackedUpDeskObject11.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<DeskObjects_ObjectsEntry>, I>>(base?: I): DeskObjects_ObjectsEntry {
    return DeskObjects_ObjectsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DeskObjects_ObjectsEntry>, I>>(object: I): DeskObjects_ObjectsEntry {
    const message = createBaseDeskObjects_ObjectsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? BackedUpDeskObject11.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseDeskInfo(): DeskInfo {
  return { deskId: "", description: undefined, locked: undefined };
}

export const DeskInfo = {
  encode(message: DeskInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deskId !== "") {
      writer.uint32(10).string(message.deskId);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.locked !== undefined) {
      writer.uint32(24).bool(message.locked);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeskInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeskInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.deskId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.locked = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeskInfo {
    return {
      deskId: isSet(object.deskId) ? String(object.deskId) : "",
      description: isSet(object.description) ? String(object.description) : undefined,
      locked: isSet(object.locked) ? Boolean(object.locked) : undefined,
    };
  },

  toJSON(message: DeskInfo): unknown {
    const obj: any = {};
    message.deskId !== undefined && (obj.deskId = message.deskId);
    message.description !== undefined && (obj.description = message.description);
    message.locked !== undefined && (obj.locked = message.locked);
    return obj;
  },

  create<I extends Exact<DeepPartial<DeskInfo>, I>>(base?: I): DeskInfo {
    return DeskInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DeskInfo>, I>>(object: I): DeskInfo {
    const message = createBaseDeskInfo();
    message.deskId = object.deskId ?? "";
    message.description = object.description ?? undefined;
    message.locked = object.locked ?? undefined;
    return message;
  },
};

function createBaseDeskInfoV2(): DeskInfoV2 {
  return { deskId: undefined, description: undefined, locked: undefined, lastDeskObjects: undefined, mapId: undefined };
}

export const DeskInfoV2 = {
  encode(message: DeskInfoV2, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deskId !== undefined) {
      writer.uint32(10).string(message.deskId);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.locked !== undefined) {
      writer.uint32(24).bool(message.locked);
    }
    if (message.lastDeskObjects !== undefined) {
      DeskObjects12.encode(message.lastDeskObjects, writer.uint32(34).fork()).ldelim();
    }
    if (message.mapId !== undefined) {
      writer.uint32(42).string(message.mapId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeskInfoV2 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeskInfoV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.deskId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.locked = reader.bool();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.lastDeskObjects = DeskObjects12.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.mapId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeskInfoV2 {
    return {
      deskId: isSet(object.deskId) ? String(object.deskId) : undefined,
      description: isSet(object.description) ? String(object.description) : undefined,
      locked: isSet(object.locked) ? Boolean(object.locked) : undefined,
      lastDeskObjects: isSet(object.lastDeskObjects) ? DeskObjects12.fromJSON(object.lastDeskObjects) : undefined,
      mapId: isSet(object.mapId) ? String(object.mapId) : undefined,
    };
  },

  toJSON(message: DeskInfoV2): unknown {
    const obj: any = {};
    message.deskId !== undefined && (obj.deskId = message.deskId);
    message.description !== undefined && (obj.description = message.description);
    message.locked !== undefined && (obj.locked = message.locked);
    message.lastDeskObjects !== undefined &&
      (obj.lastDeskObjects = message.lastDeskObjects ? DeskObjects12.toJSON(message.lastDeskObjects) : undefined);
    message.mapId !== undefined && (obj.mapId = message.mapId);
    return obj;
  },

  create<I extends Exact<DeepPartial<DeskInfoV2>, I>>(base?: I): DeskInfoV2 {
    return DeskInfoV2.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DeskInfoV2>, I>>(object: I): DeskInfoV2 {
    const message = createBaseDeskInfoV2();
    message.deskId = object.deskId ?? undefined;
    message.description = object.description ?? undefined;
    message.locked = object.locked ?? undefined;
    message.lastDeskObjects = (object.lastDeskObjects !== undefined && object.lastDeskObjects !== null)
      ? DeskObjects12.fromPartial(object.lastDeskObjects)
      : undefined;
    message.mapId = object.mapId ?? undefined;
    return message;
  },
};

function createBaseMapAndDesk(): MapAndDesk {
  return { mapId: "", deskId: "" };
}

export const MapAndDesk = {
  encode(message: MapAndDesk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.deskId !== "") {
      writer.uint32(18).string(message.deskId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapAndDesk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapAndDesk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.deskId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapAndDesk {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      deskId: isSet(object.deskId) ? String(object.deskId) : "",
    };
  },

  toJSON(message: MapAndDesk): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.deskId !== undefined && (obj.deskId = message.deskId);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapAndDesk>, I>>(base?: I): MapAndDesk {
    return MapAndDesk.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapAndDesk>, I>>(object: I): MapAndDesk {
    const message = createBaseMapAndDesk();
    message.mapId = object.mapId ?? "";
    message.deskId = object.deskId ?? "";
    return message;
  },
};

function createBaseSound(): Sound {
  return { src: "", volume: 0, loop: false, maxDistance: 0, isPositional: undefined, stream: undefined };
}

export const Sound = {
  encode(message: Sound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.volume !== 0) {
      writer.uint32(21).float(message.volume);
    }
    if (message.loop === true) {
      writer.uint32(24).bool(message.loop);
    }
    if (message.maxDistance !== 0) {
      writer.uint32(32).uint32(message.maxDistance);
    }
    if (message.isPositional !== undefined) {
      writer.uint32(40).bool(message.isPositional);
    }
    if (message.stream !== undefined) {
      writer.uint32(48).bool(message.stream);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Sound {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 2:
          if (tag != 21) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.loop = reader.bool();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.maxDistance = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.isPositional = reader.bool();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.stream = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sound {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      volume: isSet(object.volume) ? Number(object.volume) : 0,
      loop: isSet(object.loop) ? Boolean(object.loop) : false,
      maxDistance: isSet(object.maxDistance) ? Number(object.maxDistance) : 0,
      isPositional: isSet(object.isPositional) ? Boolean(object.isPositional) : undefined,
      stream: isSet(object.stream) ? Boolean(object.stream) : undefined,
    };
  },

  toJSON(message: Sound): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.volume !== undefined && (obj.volume = message.volume);
    message.loop !== undefined && (obj.loop = message.loop);
    message.maxDistance !== undefined && (obj.maxDistance = Math.round(message.maxDistance));
    message.isPositional !== undefined && (obj.isPositional = message.isPositional);
    message.stream !== undefined && (obj.stream = message.stream);
    return obj;
  },

  create<I extends Exact<DeepPartial<Sound>, I>>(base?: I): Sound {
    return Sound.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Sound>, I>>(object: I): Sound {
    const message = createBaseSound();
    message.src = object.src ?? "";
    message.volume = object.volume ?? 0;
    message.loop = object.loop ?? false;
    message.maxDistance = object.maxDistance ?? 0;
    message.isPositional = object.isPositional ?? undefined;
    message.stream = object.stream ?? undefined;
    return message;
  },
};

function createBaseObjectTime(): ObjectTime {
  return { Seconds: 0, Timezone: undefined };
}

export const ObjectTime = {
  encode(message: ObjectTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Seconds !== 0) {
      writer.uint32(8).uint32(message.Seconds);
    }
    if (message.Timezone !== undefined) {
      writer.uint32(18).string(message.Timezone);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ObjectTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.Seconds = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.Timezone = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectTime {
    return {
      Seconds: isSet(object.Seconds) ? Number(object.Seconds) : 0,
      Timezone: isSet(object.Timezone) ? String(object.Timezone) : undefined,
    };
  },

  toJSON(message: ObjectTime): unknown {
    const obj: any = {};
    message.Seconds !== undefined && (obj.Seconds = Math.round(message.Seconds));
    message.Timezone !== undefined && (obj.Timezone = message.Timezone);
    return obj;
  },

  create<I extends Exact<DeepPartial<ObjectTime>, I>>(base?: I): ObjectTime {
    return ObjectTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ObjectTime>, I>>(object: I): ObjectTime {
    const message = createBaseObjectTime();
    message.Seconds = object.Seconds ?? 0;
    message.Timezone = object.Timezone ?? undefined;
    return message;
  },
};

function createBaseSpace(): Space {
  return { spaceId: "", x: 0, y: 0, colored: undefined };
}

export const Space = {
  encode(message: Space, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spaceId !== "") {
      writer.uint32(10).string(message.spaceId);
    }
    if (message.x !== 0) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    if (message.colored !== undefined) {
      writer.uint32(32).bool(message.colored);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Space {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.spaceId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.colored = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Space {
    return {
      spaceId: isSet(object.spaceId) ? String(object.spaceId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      colored: isSet(object.colored) ? Boolean(object.colored) : undefined,
    };
  },

  toJSON(message: Space): unknown {
    const obj: any = {};
    message.spaceId !== undefined && (obj.spaceId = message.spaceId);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.colored !== undefined && (obj.colored = message.colored);
    return obj;
  },

  create<I extends Exact<DeepPartial<Space>, I>>(base?: I): Space {
    return Space.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Space>, I>>(object: I): Space {
    const message = createBaseSpace();
    message.spaceId = object.spaceId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.colored = object.colored ?? undefined;
    return message;
  },
};

function createBaseNookCoords(): NookCoords {
  return { coords: [] };
}

export const NookCoords = {
  encode(message: NookCoords, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.coords) {
      WirePoint13.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NookCoords {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNookCoords();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.coords.push(WirePoint13.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NookCoords {
    return { coords: Array.isArray(object?.coords) ? object.coords.map((e: any) => WirePoint.fromJSON(e)) : [] };
  },

  toJSON(message: NookCoords): unknown {
    const obj: any = {};
    if (message.coords) {
      obj.coords = message.coords.map((e) => e ? WirePoint13.toJSON(e) : undefined);
    } else {
      obj.coords = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NookCoords>, I>>(base?: I): NookCoords {
    return NookCoords.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NookCoords>, I>>(object: I): NookCoords {
    const message = createBaseNookCoords();
    message.coords = object.coords?.map((e) => WirePoint13.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAllowedUsers(): AllowedUsers {
  return { users: [] };
}

export const AllowedUsers = {
  encode(message: AllowedUsers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.users) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AllowedUsers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllowedUsers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.users.push(reader.string());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllowedUsers {
    return { users: Array.isArray(object?.users) ? object.users.map((e: any) => String(e)) : [] };
  },

  toJSON(message: AllowedUsers): unknown {
    const obj: any = {};
    if (message.users) {
      obj.users = message.users.map((e) => e);
    } else {
      obj.users = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllowedUsers>, I>>(base?: I): AllowedUsers {
    return AllowedUsers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AllowedUsers>, I>>(object: I): AllowedUsers {
    const message = createBaseAllowedUsers();
    message.users = object.users?.map((e) => e) || [];
    return message;
  },
};

function createBaseRequestUser(): RequestUser {
  return { name: undefined };
}

export const RequestUser = {
  encode(message: RequestUser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestUser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestUser {
    return { name: isSet(object.name) ? String(object.name) : undefined };
  },

  toJSON(message: RequestUser): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestUser>, I>>(base?: I): RequestUser {
    return RequestUser.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestUser>, I>>(object: I): RequestUser {
    const message = createBaseRequestUser();
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseRequestedUsers(): RequestedUsers {
  return { users: {} };
}

export const RequestedUsers = {
  encode(message: RequestedUsers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.users).forEach(([key, value]) => {
      RequestedUsers_UsersEntry280.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestedUsers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestedUsers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = RequestedUsers_UsersEntry280.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.users[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestedUsers {
    return {
      users: isObject(object.users)
        ? Object.entries(object.users).reduce<{ [key: string]: RequestUser14 }>((acc, [key, value]) => {
          acc[key] = RequestUser14.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RequestedUsers): unknown {
    const obj: any = {};
    obj.users = {};
    if (message.users) {
      Object.entries(message.users).forEach(([k, v]) => {
        obj.users[k] = RequestUser14.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestedUsers>, I>>(base?: I): RequestedUsers {
    return RequestedUsers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestedUsers>, I>>(object: I): RequestedUsers {
    const message = createBaseRequestedUsers();
    message.users = Object.entries(object.users ?? {}).reduce<{ [key: string]: RequestUser14 }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = RequestUser14.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseRequestedUsers_UsersEntry(): RequestedUsers_UsersEntry {
  return { key: "", value: undefined };
}

export const RequestedUsers_UsersEntry = {
  encode(message: RequestedUsers_UsersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      RequestUser14.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestedUsers_UsersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestedUsers_UsersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = RequestUser14.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestedUsers_UsersEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? RequestUser14.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RequestedUsers_UsersEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? RequestUser14.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestedUsers_UsersEntry>, I>>(base?: I): RequestedUsers_UsersEntry {
    return RequestedUsers_UsersEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestedUsers_UsersEntry>, I>>(object: I): RequestedUsers_UsersEntry {
    const message = createBaseRequestedUsers_UsersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? RequestUser14.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseRecordingInfo(): RecordingInfo {
  return { active: false, initiatingPlayer: undefined, egressId: undefined };
}

export const RecordingInfo = {
  encode(message: RecordingInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.active === true) {
      writer.uint32(24).bool(message.active);
    }
    if (message.initiatingPlayer !== undefined) {
      writer.uint32(10).string(message.initiatingPlayer);
    }
    if (message.egressId !== undefined) {
      writer.uint32(34).string(message.egressId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RecordingInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordingInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag != 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        case 1:
          if (tag != 10) {
            break;
          }

          message.initiatingPlayer = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.egressId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordingInfo {
    return {
      active: isSet(object.active) ? Boolean(object.active) : false,
      initiatingPlayer: isSet(object.initiatingPlayer) ? String(object.initiatingPlayer) : undefined,
      egressId: isSet(object.egressId) ? String(object.egressId) : undefined,
    };
  },

  toJSON(message: RecordingInfo): unknown {
    const obj: any = {};
    message.active !== undefined && (obj.active = message.active);
    message.initiatingPlayer !== undefined && (obj.initiatingPlayer = message.initiatingPlayer);
    message.egressId !== undefined && (obj.egressId = message.egressId);
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordingInfo>, I>>(base?: I): RecordingInfo {
    return RecordingInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RecordingInfo>, I>>(object: I): RecordingInfo {
    const message = createBaseRecordingInfo();
    message.active = object.active ?? false;
    message.initiatingPlayer = object.initiatingPlayer ?? undefined;
    message.egressId = object.egressId ?? undefined;
    return message;
  },
};

function createBaseNookDiff(): NookDiff {
  return {
    nookCoords: undefined,
    colored: undefined,
    name: undefined,
    bookable: undefined,
    capacity: undefined,
    restricted: undefined,
    allowedUsers: undefined,
    requestedUsers: undefined,
    isInMeeting: undefined,
    isDesk: undefined,
    recordingInfo: undefined,
  };
}

export const NookDiff = {
  encode(message: NookDiff, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.nookCoords !== undefined) {
      NookCoords15.encode(message.nookCoords, writer.uint32(10).fork()).ldelim();
    }
    if (message.colored !== undefined) {
      writer.uint32(16).bool(message.colored);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.bookable !== undefined) {
      writer.uint32(32).bool(message.bookable);
    }
    if (message.capacity !== undefined) {
      writer.uint32(40).uint32(message.capacity);
    }
    if (message.restricted !== undefined) {
      writer.uint32(48).bool(message.restricted);
    }
    if (message.allowedUsers !== undefined) {
      AllowedUsers16.encode(message.allowedUsers, writer.uint32(58).fork()).ldelim();
    }
    if (message.requestedUsers !== undefined) {
      RequestedUsers17.encode(message.requestedUsers, writer.uint32(66).fork()).ldelim();
    }
    if (message.isInMeeting !== undefined) {
      writer.uint32(72).bool(message.isInMeeting);
    }
    if (message.isDesk !== undefined) {
      writer.uint32(80).bool(message.isDesk);
    }
    if (message.recordingInfo !== undefined) {
      RecordingInfo18.encode(message.recordingInfo, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): NookDiff {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNookDiff();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.nookCoords = NookCoords15.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.colored = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.bookable = reader.bool();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.capacity = reader.uint32();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.restricted = reader.bool();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.allowedUsers = AllowedUsers16.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.requestedUsers = RequestedUsers17.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 72) {
            break;
          }

          message.isInMeeting = reader.bool();
          continue;
        case 10:
          if (tag != 80) {
            break;
          }

          message.isDesk = reader.bool();
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.recordingInfo = RecordingInfo18.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NookDiff {
    return {
      nookCoords: isSet(object.nookCoords) ? NookCoords15.fromJSON(object.nookCoords) : undefined,
      colored: isSet(object.colored) ? Boolean(object.colored) : undefined,
      name: isSet(object.name) ? String(object.name) : undefined,
      bookable: isSet(object.bookable) ? Boolean(object.bookable) : undefined,
      capacity: isSet(object.capacity) ? Number(object.capacity) : undefined,
      restricted: isSet(object.restricted) ? Boolean(object.restricted) : undefined,
      allowedUsers: isSet(object.allowedUsers) ? AllowedUsers16.fromJSON(object.allowedUsers) : undefined,
      requestedUsers: isSet(object.requestedUsers) ? RequestedUsers17.fromJSON(object.requestedUsers) : undefined,
      isInMeeting: isSet(object.isInMeeting) ? Boolean(object.isInMeeting) : undefined,
      isDesk: isSet(object.isDesk) ? Boolean(object.isDesk) : undefined,
      recordingInfo: isSet(object.recordingInfo) ? RecordingInfo18.fromJSON(object.recordingInfo) : undefined,
    };
  },

  toJSON(message: NookDiff): unknown {
    const obj: any = {};
    message.nookCoords !== undefined &&
      (obj.nookCoords = message.nookCoords ? NookCoords15.toJSON(message.nookCoords) : undefined);
    message.colored !== undefined && (obj.colored = message.colored);
    message.name !== undefined && (obj.name = message.name);
    message.bookable !== undefined && (obj.bookable = message.bookable);
    message.capacity !== undefined && (obj.capacity = Math.round(message.capacity));
    message.restricted !== undefined && (obj.restricted = message.restricted);
    message.allowedUsers !== undefined &&
      (obj.allowedUsers = message.allowedUsers ? AllowedUsers16.toJSON(message.allowedUsers) : undefined);
    message.requestedUsers !== undefined &&
      (obj.requestedUsers = message.requestedUsers ? RequestedUsers17.toJSON(message.requestedUsers) : undefined);
    message.isInMeeting !== undefined && (obj.isInMeeting = message.isInMeeting);
    message.isDesk !== undefined && (obj.isDesk = message.isDesk);
    message.recordingInfo !== undefined &&
      (obj.recordingInfo = message.recordingInfo ? RecordingInfo18.toJSON(message.recordingInfo) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<NookDiff>, I>>(base?: I): NookDiff {
    return NookDiff.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<NookDiff>, I>>(object: I): NookDiff {
    const message = createBaseNookDiff();
    message.nookCoords = (object.nookCoords !== undefined && object.nookCoords !== null)
      ? NookCoords15.fromPartial(object.nookCoords)
      : undefined;
    message.colored = object.colored ?? undefined;
    message.name = object.name ?? undefined;
    message.bookable = object.bookable ?? undefined;
    message.capacity = object.capacity ?? undefined;
    message.restricted = object.restricted ?? undefined;
    message.allowedUsers = (object.allowedUsers !== undefined && object.allowedUsers !== null)
      ? AllowedUsers16.fromPartial(object.allowedUsers)
      : undefined;
    message.requestedUsers = (object.requestedUsers !== undefined && object.requestedUsers !== null)
      ? RequestedUsers17.fromPartial(object.requestedUsers)
      : undefined;
    message.isInMeeting = object.isInMeeting ?? undefined;
    message.isDesk = object.isDesk ?? undefined;
    message.recordingInfo = (object.recordingInfo !== undefined && object.recordingInfo !== null)
      ? RecordingInfo18.fromPartial(object.recordingInfo)
      : undefined;
    return message;
  },
};

function createBaseWirePoint(): WirePoint {
  return { x: 0, y: 0 };
}

export const WirePoint = {
  encode(message: WirePoint, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePoint {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePoint {
    return { x: isSet(object.x) ? Number(object.x) : 0, y: isSet(object.y) ? Number(object.y) : 0 };
  },

  toJSON(message: WirePoint): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePoint>, I>>(base?: I): WirePoint {
    return WirePoint.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WirePoint>, I>>(object: I): WirePoint {
    const message = createBaseWirePoint();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseSpawnPoint(): SpawnPoint {
  return { x: 0, y: 0, spawnId: undefined };
}

export const SpawnPoint = {
  encode(message: SpawnPoint, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    if (message.spawnId !== undefined) {
      writer.uint32(26).string(message.spawnId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpawnPoint {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawnPoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.spawnId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpawnPoint {
    return {
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      spawnId: isSet(object.spawnId) ? String(object.spawnId) : undefined,
    };
  },

  toJSON(message: SpawnPoint): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.spawnId !== undefined && (obj.spawnId = message.spawnId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpawnPoint>, I>>(base?: I): SpawnPoint {
    return SpawnPoint.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpawnPoint>, I>>(object: I): SpawnPoint {
    const message = createBaseSpawnPoint();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.spawnId = object.spawnId ?? undefined;
    return message;
  },
};

function createBasePortal(): Portal {
  return { x: 0, y: 0, targetMap: undefined, targetUrl: undefined, targetX: undefined, targetY: undefined };
}

export const Portal = {
  encode(message: Portal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    if (message.targetMap !== undefined) {
      writer.uint32(26).string(message.targetMap);
    }
    if (message.targetUrl !== undefined) {
      writer.uint32(34).string(message.targetUrl);
    }
    if (message.targetX !== undefined) {
      writer.uint32(40).uint32(message.targetX);
    }
    if (message.targetY !== undefined) {
      writer.uint32(48).uint32(message.targetY);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Portal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetMap = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.targetUrl = reader.string();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.targetX = reader.uint32();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.targetY = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Portal {
    return {
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      targetMap: isSet(object.targetMap) ? String(object.targetMap) : undefined,
      targetUrl: isSet(object.targetUrl) ? String(object.targetUrl) : undefined,
      targetX: isSet(object.targetX) ? Number(object.targetX) : undefined,
      targetY: isSet(object.targetY) ? Number(object.targetY) : undefined,
    };
  },

  toJSON(message: Portal): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.targetMap !== undefined && (obj.targetMap = message.targetMap);
    message.targetUrl !== undefined && (obj.targetUrl = message.targetUrl);
    message.targetX !== undefined && (obj.targetX = Math.round(message.targetX));
    message.targetY !== undefined && (obj.targetY = Math.round(message.targetY));
    return obj;
  },

  create<I extends Exact<DeepPartial<Portal>, I>>(base?: I): Portal {
    return Portal.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Portal>, I>>(object: I): Portal {
    const message = createBasePortal();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.targetMap = object.targetMap ?? undefined;
    message.targetUrl = object.targetUrl ?? undefined;
    message.targetX = object.targetX ?? undefined;
    message.targetY = object.targetY ?? undefined;
    return message;
  },
};

function createBaseAnnouncer(): Announcer {
  return { x: 0, y: 0 };
}

export const Announcer = {
  encode(message: Announcer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).uint32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Announcer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnnouncer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.y = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Announcer {
    return { x: isSet(object.x) ? Number(object.x) : 0, y: isSet(object.y) ? Number(object.y) : 0 };
  },

  toJSON(message: Announcer): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    return obj;
  },

  create<I extends Exact<DeepPartial<Announcer>, I>>(base?: I): Announcer {
    return Announcer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Announcer>, I>>(object: I): Announcer {
    const message = createBaseAnnouncer();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseAsset(): Asset {
  return { x: 0, y: 0, src: "", width: undefined, height: undefined, inFront: undefined };
}

export const Asset = {
  encode(message: Asset, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(13).float(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(21).float(message.y);
    }
    if (message.src !== "") {
      writer.uint32(26).string(message.src);
    }
    if (message.width !== undefined) {
      writer.uint32(32).uint32(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(40).uint32(message.height);
    }
    if (message.inFront !== undefined) {
      writer.uint32(48).bool(message.inFront);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Asset {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 13) {
            break;
          }

          message.x = reader.float();
          continue;
        case 2:
          if (tag != 21) {
            break;
          }

          message.y = reader.float();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.src = reader.string();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.width = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.height = reader.uint32();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.inFront = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Asset {
    return {
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      src: isSet(object.src) ? String(object.src) : "",
      width: isSet(object.width) ? Number(object.width) : undefined,
      height: isSet(object.height) ? Number(object.height) : undefined,
      inFront: isSet(object.inFront) ? Boolean(object.inFront) : undefined,
    };
  },

  toJSON(message: Asset): unknown {
    const obj: any = {};
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    message.src !== undefined && (obj.src = message.src);
    message.width !== undefined && (obj.width = Math.round(message.width));
    message.height !== undefined && (obj.height = Math.round(message.height));
    message.inFront !== undefined && (obj.inFront = message.inFront);
    return obj;
  },

  create<I extends Exact<DeepPartial<Asset>, I>>(base?: I): Asset {
    return Asset.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Asset>, I>>(object: I): Asset {
    const message = createBaseAsset();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.src = object.src ?? "";
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.inFront = object.inFront ?? undefined;
    return message;
  },
};

function createBaseAreaPosition(): AreaPosition {
  return { x1: 0, y1: 0, x2: 0, y2: 0 };
}

export const AreaPosition = {
  encode(message: AreaPosition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x1 !== 0) {
      writer.uint32(8).uint32(message.x1);
    }
    if (message.y1 !== 0) {
      writer.uint32(16).uint32(message.y1);
    }
    if (message.x2 !== 0) {
      writer.uint32(24).uint32(message.x2);
    }
    if (message.y2 !== 0) {
      writer.uint32(32).uint32(message.y2);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AreaPosition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAreaPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.x1 = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.y1 = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.x2 = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.y2 = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AreaPosition {
    return {
      x1: isSet(object.x1) ? Number(object.x1) : 0,
      y1: isSet(object.y1) ? Number(object.y1) : 0,
      x2: isSet(object.x2) ? Number(object.x2) : 0,
      y2: isSet(object.y2) ? Number(object.y2) : 0,
    };
  },

  toJSON(message: AreaPosition): unknown {
    const obj: any = {};
    message.x1 !== undefined && (obj.x1 = Math.round(message.x1));
    message.y1 !== undefined && (obj.y1 = Math.round(message.y1));
    message.x2 !== undefined && (obj.x2 = Math.round(message.x2));
    message.y2 !== undefined && (obj.y2 = Math.round(message.y2));
    return obj;
  },

  create<I extends Exact<DeepPartial<AreaPosition>, I>>(base?: I): AreaPosition {
    return AreaPosition.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AreaPosition>, I>>(object: I): AreaPosition {
    const message = createBaseAreaPosition();
    message.x1 = object.x1 ?? 0;
    message.y1 = object.y1 ?? 0;
    message.x2 = object.x2 ?? 0;
    message.y2 = object.y2 ?? 0;
    return message;
  },
};

function createBaseWireArea(): WireArea {
  return { category: undefined, coords: [] };
}

export const WireArea = {
  encode(message: WireArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.category !== undefined) {
      writer.uint32(10).string(message.category);
    }
    for (const v of message.coords) {
      AreaPosition19.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.category = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.coords.push(AreaPosition19.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireArea {
    return {
      category: isSet(object.category) ? String(object.category) : undefined,
      coords: Array.isArray(object?.coords) ? object.coords.map((e: any) => AreaPosition.fromJSON(e)) : [],
    };
  },

  toJSON(message: WireArea): unknown {
    const obj: any = {};
    message.category !== undefined && (obj.category = message.category);
    if (message.coords) {
      obj.coords = message.coords.map((e) => e ? AreaPosition19.toJSON(e) : undefined);
    } else {
      obj.coords = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireArea>, I>>(base?: I): WireArea {
    return WireArea.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireArea>, I>>(object: I): WireArea {
    const message = createBaseWireArea();
    message.category = object.category ?? undefined;
    message.coords = object.coords?.map((e) => AreaPosition19.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDBDesk(): DBDesk {
  return { coords: [] };
}

export const DBDesk = {
  encode(message: DBDesk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.coords) {
      AreaPosition19.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DBDesk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDBDesk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.coords.push(AreaPosition19.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DBDesk {
    return { coords: Array.isArray(object?.coords) ? object.coords.map((e: any) => AreaPosition.fromJSON(e)) : [] };
  },

  toJSON(message: DBDesk): unknown {
    const obj: any = {};
    if (message.coords) {
      obj.coords = message.coords.map((e) => e ? AreaPosition19.toJSON(e) : undefined);
    } else {
      obj.coords = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DBDesk>, I>>(base?: I): DBDesk {
    return DBDesk.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DBDesk>, I>>(object: I): DBDesk {
    const message = createBaseDBDesk();
    message.coords = object.coords?.map((e) => AreaPosition19.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMapSetDimensions(): MapSetDimensions {
  return { mapId: "", width: 0, height: 0 };
}

export const MapSetDimensions = {
  encode(message: MapSetDimensions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.width !== 0) {
      writer.uint32(16).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint32(message.height);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetDimensions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetDimensions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.width = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.height = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetDimensions {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      width: isSet(object.width) ? Number(object.width) : 0,
      height: isSet(object.height) ? Number(object.height) : 0,
    };
  },

  toJSON(message: MapSetDimensions): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.width !== undefined && (obj.width = Math.round(message.width));
    message.height !== undefined && (obj.height = Math.round(message.height));
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetDimensions>, I>>(base?: I): MapSetDimensions {
    return MapSetDimensions.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetDimensions>, I>>(object: I): MapSetDimensions {
    const message = createBaseMapSetDimensions();
    message.mapId = object.mapId ?? "";
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseMapSetCollisions(): MapSetCollisions {
  return { mapId: "", x: 0, y: 0, w: 0, h: 0, mask: "" };
}

export const MapSetCollisions = {
  encode(message: MapSetCollisions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.x !== 0) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    if (message.w !== 0) {
      writer.uint32(32).uint32(message.w);
    }
    if (message.h !== 0) {
      writer.uint32(40).uint32(message.h);
    }
    if (message.mask !== "") {
      writer.uint32(50).string(message.mask);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetCollisions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetCollisions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.w = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.h = reader.uint32();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.mask = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetCollisions {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      w: isSet(object.w) ? Number(object.w) : 0,
      h: isSet(object.h) ? Number(object.h) : 0,
      mask: isSet(object.mask) ? String(object.mask) : "",
    };
  },

  toJSON(message: MapSetCollisions): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.w !== undefined && (obj.w = Math.round(message.w));
    message.h !== undefined && (obj.h = Math.round(message.h));
    message.mask !== undefined && (obj.mask = message.mask);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetCollisions>, I>>(base?: I): MapSetCollisions {
    return MapSetCollisions.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetCollisions>, I>>(object: I): MapSetCollisions {
    const message = createBaseMapSetCollisions();
    message.mapId = object.mapId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.w = object.w ?? 0;
    message.h = object.h ?? 0;
    message.mask = object.mask ?? "";
    return message;
  },
};

function createBaseMapSetCollisionsBits(): MapSetCollisionsBits {
  return { mapId: "", overwrite: false, x: 0, y: 0, w: 0, h: 0, mask: new Uint8Array() };
}

export const MapSetCollisionsBits = {
  encode(message: MapSetCollisionsBits, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.overwrite === true) {
      writer.uint32(16).bool(message.overwrite);
    }
    if (message.x !== 0) {
      writer.uint32(24).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(32).uint32(message.y);
    }
    if (message.w !== 0) {
      writer.uint32(40).uint32(message.w);
    }
    if (message.h !== 0) {
      writer.uint32(48).uint32(message.h);
    }
    if (message.mask.length !== 0) {
      writer.uint32(58).bytes(message.mask);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetCollisionsBits {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetCollisionsBits();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.overwrite = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.w = reader.uint32();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.h = reader.uint32();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.mask = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetCollisionsBits {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      overwrite: isSet(object.overwrite) ? Boolean(object.overwrite) : false,
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      w: isSet(object.w) ? Number(object.w) : 0,
      h: isSet(object.h) ? Number(object.h) : 0,
      mask: isSet(object.mask) ? bytesFromBase64(object.mask) : new Uint8Array(),
    };
  },

  toJSON(message: MapSetCollisionsBits): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.overwrite !== undefined && (obj.overwrite = message.overwrite);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.w !== undefined && (obj.w = Math.round(message.w));
    message.h !== undefined && (obj.h = Math.round(message.h));
    message.mask !== undefined &&
      (obj.mask = base64FromBytes(message.mask !== undefined ? message.mask : new Uint8Array()));
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetCollisionsBits>, I>>(base?: I): MapSetCollisionsBits {
    return MapSetCollisionsBits.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetCollisionsBits>, I>>(object: I): MapSetCollisionsBits {
    const message = createBaseMapSetCollisionsBits();
    message.mapId = object.mapId ?? "";
    message.overwrite = object.overwrite ?? false;
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.w = object.w ?? 0;
    message.h = object.h ?? 0;
    message.mask = object.mask ?? new Uint8Array();
    return message;
  },
};

function createBaseMapSetBackgroundImagePath(): MapSetBackgroundImagePath {
  return { mapId: "", backgroundImagePath: "" };
}

export const MapSetBackgroundImagePath = {
  encode(message: MapSetBackgroundImagePath, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.backgroundImagePath !== "") {
      writer.uint32(18).string(message.backgroundImagePath);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetBackgroundImagePath {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetBackgroundImagePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.backgroundImagePath = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetBackgroundImagePath {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      backgroundImagePath: isSet(object.backgroundImagePath) ? String(object.backgroundImagePath) : "",
    };
  },

  toJSON(message: MapSetBackgroundImagePath): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.backgroundImagePath !== undefined && (obj.backgroundImagePath = message.backgroundImagePath);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetBackgroundImagePath>, I>>(base?: I): MapSetBackgroundImagePath {
    return MapSetBackgroundImagePath.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetBackgroundImagePath>, I>>(object: I): MapSetBackgroundImagePath {
    const message = createBaseMapSetBackgroundImagePath();
    message.mapId = object.mapId ?? "";
    message.backgroundImagePath = object.backgroundImagePath ?? "";
    return message;
  },
};

function createBaseMapSetForegroundImagePath(): MapSetForegroundImagePath {
  return { mapId: "", foregroundImagePath: "", delete: undefined };
}

export const MapSetForegroundImagePath = {
  encode(message: MapSetForegroundImagePath, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.foregroundImagePath !== "") {
      writer.uint32(18).string(message.foregroundImagePath);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetForegroundImagePath {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetForegroundImagePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.foregroundImagePath = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetForegroundImagePath {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      foregroundImagePath: isSet(object.foregroundImagePath) ? String(object.foregroundImagePath) : "",
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetForegroundImagePath): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.foregroundImagePath !== undefined && (obj.foregroundImagePath = message.foregroundImagePath);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetForegroundImagePath>, I>>(base?: I): MapSetForegroundImagePath {
    return MapSetForegroundImagePath.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetForegroundImagePath>, I>>(object: I): MapSetForegroundImagePath {
    const message = createBaseMapSetForegroundImagePath();
    message.mapId = object.mapId ?? "";
    message.foregroundImagePath = object.foregroundImagePath ?? "";
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetSprites(): MapSetSprites {
  return { mapId: "", sprites: [], delete: undefined };
}

export const MapSetSprites = {
  encode(message: MapSetSprites, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    writer.uint32(18).fork();
    for (const v of message.sprites) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetSprites {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetSprites();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag == 16) {
            message.sprites.push(reader.uint32());
            continue;
          }

          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sprites.push(reader.uint32());
            }

            continue;
          }

          break;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetSprites {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      sprites: Array.isArray(object?.sprites) ? object.sprites.map((e: any) => Number(e)) : [],
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetSprites): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.sprites) {
      obj.sprites = message.sprites.map((e) => Math.round(e));
    } else {
      obj.sprites = [];
    }
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetSprites>, I>>(base?: I): MapSetSprites {
    return MapSetSprites.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetSprites>, I>>(object: I): MapSetSprites {
    const message = createBaseMapSetSprites();
    message.mapId = object.mapId ?? "";
    message.sprites = object.sprites?.map((e) => e) || [];
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetSpaces(): MapSetSpaces {
  return { mapId: "", spaces: [] };
}

export const MapSetSpaces = {
  encode(message: MapSetSpaces, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    for (const v of message.spaces) {
      Space20.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetSpaces {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetSpaces();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.spaces.push(Space20.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetSpaces {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      spaces: Array.isArray(object?.spaces) ? object.spaces.map((e: any) => Space.fromJSON(e)) : [],
    };
  },

  toJSON(message: MapSetSpaces): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.spaces) {
      obj.spaces = message.spaces.map((e) => e ? Space20.toJSON(e) : undefined);
    } else {
      obj.spaces = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetSpaces>, I>>(base?: I): MapSetSpaces {
    return MapSetSpaces.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetSpaces>, I>>(object: I): MapSetSpaces {
    const message = createBaseMapSetSpaces();
    message.mapId = object.mapId ?? "";
    message.spaces = object.spaces?.map((e) => Space20.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMapSetNooks(): MapSetNooks {
  return { mapId: "", nooks: {}, overwrite: undefined };
}

export const MapSetNooks = {
  encode(message: MapSetNooks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    Object.entries(message.nooks).forEach(([key, value]) => {
      MapSetNooks_NooksEntry281.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.overwrite !== undefined) {
      writer.uint32(24).bool(message.overwrite);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetNooks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetNooks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = MapSetNooks_NooksEntry281.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.nooks[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.overwrite = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetNooks {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      nooks: isObject(object.nooks)
        ? Object.entries(object.nooks).reduce<{ [key: string]: NookDiff21 }>((acc, [key, value]) => {
          acc[key] = NookDiff21.fromJSON(value);
          return acc;
        }, {})
        : {},
      overwrite: isSet(object.overwrite) ? Boolean(object.overwrite) : undefined,
    };
  },

  toJSON(message: MapSetNooks): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    obj.nooks = {};
    if (message.nooks) {
      Object.entries(message.nooks).forEach(([k, v]) => {
        obj.nooks[k] = NookDiff21.toJSON(v);
      });
    }
    message.overwrite !== undefined && (obj.overwrite = message.overwrite);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetNooks>, I>>(base?: I): MapSetNooks {
    return MapSetNooks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetNooks>, I>>(object: I): MapSetNooks {
    const message = createBaseMapSetNooks();
    message.mapId = object.mapId ?? "";
    message.nooks = Object.entries(object.nooks ?? {}).reduce<{ [key: string]: NookDiff21 }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = NookDiff21.fromPartial(value);
      }
      return acc;
    }, {});
    message.overwrite = object.overwrite ?? undefined;
    return message;
  },
};

function createBaseMapSetNooks_NooksEntry(): MapSetNooks_NooksEntry {
  return { key: "", value: undefined };
}

export const MapSetNooks_NooksEntry = {
  encode(message: MapSetNooks_NooksEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      NookDiff21.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetNooks_NooksEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetNooks_NooksEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = NookDiff21.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetNooks_NooksEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? NookDiff21.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MapSetNooks_NooksEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? NookDiff21.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetNooks_NooksEntry>, I>>(base?: I): MapSetNooks_NooksEntry {
    return MapSetNooks_NooksEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetNooks_NooksEntry>, I>>(object: I): MapSetNooks_NooksEntry {
    const message = createBaseMapSetNooks_NooksEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? NookDiff21.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMapSetSpawn(): MapSetSpawn {
  return { mapId: "", spawn: undefined, delete: undefined };
}

export const MapSetSpawn = {
  encode(message: MapSetSpawn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.spawn !== undefined) {
      WirePoint13.encode(message.spawn, writer.uint32(18).fork()).ldelim();
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetSpawn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetSpawn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.spawn = WirePoint13.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetSpawn {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      spawn: isSet(object.spawn) ? WirePoint13.fromJSON(object.spawn) : undefined,
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetSpawn): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.spawn !== undefined && (obj.spawn = message.spawn ? WirePoint13.toJSON(message.spawn) : undefined);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetSpawn>, I>>(base?: I): MapSetSpawn {
    return MapSetSpawn.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetSpawn>, I>>(object: I): MapSetSpawn {
    const message = createBaseMapSetSpawn();
    message.mapId = object.mapId ?? "";
    message.spawn = (object.spawn !== undefined && object.spawn !== null)
      ? WirePoint13.fromPartial(object.spawn)
      : undefined;
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetSpawns(): MapSetSpawns {
  return { mapId: "", spawns: [] };
}

export const MapSetSpawns = {
  encode(message: MapSetSpawns, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    for (const v of message.spawns) {
      SpawnPoint22.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetSpawns {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetSpawns();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.spawns.push(SpawnPoint22.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetSpawns {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      spawns: Array.isArray(object?.spawns) ? object.spawns.map((e: any) => SpawnPoint.fromJSON(e)) : [],
    };
  },

  toJSON(message: MapSetSpawns): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.spawns) {
      obj.spawns = message.spawns.map((e) => e ? SpawnPoint22.toJSON(e) : undefined);
    } else {
      obj.spawns = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetSpawns>, I>>(base?: I): MapSetSpawns {
    return MapSetSpawns.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetSpawns>, I>>(object: I): MapSetSpawns {
    const message = createBaseMapSetSpawns();
    message.mapId = object.mapId ?? "";
    message.spawns = object.spawns?.map((e) => SpawnPoint22.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMapSetPortals(): MapSetPortals {
  return { mapId: "", portals: [] };
}

export const MapSetPortals = {
  encode(message: MapSetPortals, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    for (const v of message.portals) {
      Portal23.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetPortals {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetPortals();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.portals.push(Portal23.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetPortals {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      portals: Array.isArray(object?.portals) ? object.portals.map((e: any) => Portal.fromJSON(e)) : [],
    };
  },

  toJSON(message: MapSetPortals): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.portals) {
      obj.portals = message.portals.map((e) => e ? Portal23.toJSON(e) : undefined);
    } else {
      obj.portals = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetPortals>, I>>(base?: I): MapSetPortals {
    return MapSetPortals.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetPortals>, I>>(object: I): MapSetPortals {
    const message = createBaseMapSetPortals();
    message.mapId = object.mapId ?? "";
    message.portals = object.portals?.map((e) => Portal23.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMapSetAnnouncer(): MapSetAnnouncer {
  return { mapId: "", announcer: [] };
}

export const MapSetAnnouncer = {
  encode(message: MapSetAnnouncer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    for (const v of message.announcer) {
      Announcer24.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetAnnouncer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetAnnouncer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.announcer.push(Announcer24.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetAnnouncer {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      announcer: Array.isArray(object?.announcer) ? object.announcer.map((e: any) => Announcer.fromJSON(e)) : [],
    };
  },

  toJSON(message: MapSetAnnouncer): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.announcer) {
      obj.announcer = message.announcer.map((e) => e ? Announcer24.toJSON(e) : undefined);
    } else {
      obj.announcer = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetAnnouncer>, I>>(base?: I): MapSetAnnouncer {
    return MapSetAnnouncer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetAnnouncer>, I>>(object: I): MapSetAnnouncer {
    const message = createBaseMapSetAnnouncer();
    message.mapId = object.mapId ?? "";
    message.announcer = object.announcer?.map((e) => Announcer24.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMapSetAssets(): MapSetAssets {
  return { mapId: "", assets: [], delete: undefined };
}

export const MapSetAssets = {
  encode(message: MapSetAssets, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    for (const v of message.assets) {
      Asset25.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetAssets {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetAssets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.assets.push(Asset25.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetAssets {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      assets: Array.isArray(object?.assets) ? object.assets.map((e: any) => Asset.fromJSON(e)) : [],
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetAssets): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.assets) {
      obj.assets = message.assets.map((e) => e ? Asset25.toJSON(e) : undefined);
    } else {
      obj.assets = [];
    }
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetAssets>, I>>(base?: I): MapSetAssets {
    return MapSetAssets.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetAssets>, I>>(object: I): MapSetAssets {
    const message = createBaseMapSetAssets();
    message.mapId = object.mapId ?? "";
    message.assets = object.assets?.map((e) => Asset25.fromPartial(e)) || [];
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetObjects(): MapSetObjects {
  return { mapId: "", objects: {}, updatesAreOverwrites: undefined };
}

export const MapSetObjects = {
  encode(message: MapSetObjects, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    Object.entries(message.objects).forEach(([key, value]) => {
      MapSetObjects_ObjectsEntry282.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.updatesAreOverwrites !== undefined) {
      writer.uint32(24).bool(message.updatesAreOverwrites);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetObjects {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetObjects();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = MapSetObjects_ObjectsEntry282.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.objects[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.updatesAreOverwrites = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetObjects {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      objects: isObject(object.objects)
        ? Object.entries(object.objects).reduce<{ [key: number]: WireObject10 }>((acc, [key, value]) => {
          acc[Number(key)] = WireObject10.fromJSON(value);
          return acc;
        }, {})
        : {},
      updatesAreOverwrites: isSet(object.updatesAreOverwrites) ? Boolean(object.updatesAreOverwrites) : undefined,
    };
  },

  toJSON(message: MapSetObjects): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    obj.objects = {};
    if (message.objects) {
      Object.entries(message.objects).forEach(([k, v]) => {
        obj.objects[k] = WireObject10.toJSON(v);
      });
    }
    message.updatesAreOverwrites !== undefined && (obj.updatesAreOverwrites = message.updatesAreOverwrites);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetObjects>, I>>(base?: I): MapSetObjects {
    return MapSetObjects.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetObjects>, I>>(object: I): MapSetObjects {
    const message = createBaseMapSetObjects();
    message.mapId = object.mapId ?? "";
    message.objects = Object.entries(object.objects ?? {}).reduce<{ [key: number]: WireObject10 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[Number(key)] = WireObject10.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.updatesAreOverwrites = object.updatesAreOverwrites ?? undefined;
    return message;
  },
};

function createBaseMapSetObjects_ObjectsEntry(): MapSetObjects_ObjectsEntry {
  return { key: 0, value: undefined };
}

export const MapSetObjects_ObjectsEntry = {
  encode(message: MapSetObjects_ObjectsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      WireObject10.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetObjects_ObjectsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetObjects_ObjectsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = WireObject10.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetObjects_ObjectsEntry {
    return {
      key: isSet(object.key) ? Number(object.key) : 0,
      value: isSet(object.value) ? WireObject10.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MapSetObjects_ObjectsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = Math.round(message.key));
    message.value !== undefined && (obj.value = message.value ? WireObject10.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetObjects_ObjectsEntry>, I>>(base?: I): MapSetObjects_ObjectsEntry {
    return MapSetObjects_ObjectsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetObjects_ObjectsEntry>, I>>(object: I): MapSetObjects_ObjectsEntry {
    const message = createBaseMapSetObjects_ObjectsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? WireObject10.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMapSetName(): MapSetName {
  return { mapId: "", name: "", delete: undefined };
}

export const MapSetName = {
  encode(message: MapSetName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetName {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      name: isSet(object.name) ? String(object.name) : "",
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetName): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.name !== undefined && (obj.name = message.name);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetName>, I>>(base?: I): MapSetName {
    return MapSetName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetName>, I>>(object: I): MapSetName {
    const message = createBaseMapSetName();
    message.mapId = object.mapId ?? "";
    message.name = object.name ?? "";
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetMuteOnEntry(): MapSetMuteOnEntry {
  return { mapId: "", muteOnEntry: false, delete: undefined };
}

export const MapSetMuteOnEntry = {
  encode(message: MapSetMuteOnEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.muteOnEntry === true) {
      writer.uint32(16).bool(message.muteOnEntry);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetMuteOnEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetMuteOnEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.muteOnEntry = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetMuteOnEntry {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      muteOnEntry: isSet(object.muteOnEntry) ? Boolean(object.muteOnEntry) : false,
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetMuteOnEntry): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.muteOnEntry !== undefined && (obj.muteOnEntry = message.muteOnEntry);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetMuteOnEntry>, I>>(base?: I): MapSetMuteOnEntry {
    return MapSetMuteOnEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetMuteOnEntry>, I>>(object: I): MapSetMuteOnEntry {
    const message = createBaseMapSetMuteOnEntry();
    message.mapId = object.mapId ?? "";
    message.muteOnEntry = object.muteOnEntry ?? false;
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetUseDrawnBG(): MapSetUseDrawnBG {
  return { mapId: "", useDrawnBG: false, delete: undefined };
}

export const MapSetUseDrawnBG = {
  encode(message: MapSetUseDrawnBG, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.useDrawnBG === true) {
      writer.uint32(16).bool(message.useDrawnBG);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetUseDrawnBG {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetUseDrawnBG();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.useDrawnBG = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetUseDrawnBG {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      useDrawnBG: isSet(object.useDrawnBG) ? Boolean(object.useDrawnBG) : false,
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetUseDrawnBG): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.useDrawnBG !== undefined && (obj.useDrawnBG = message.useDrawnBG);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetUseDrawnBG>, I>>(base?: I): MapSetUseDrawnBG {
    return MapSetUseDrawnBG.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetUseDrawnBG>, I>>(object: I): MapSetUseDrawnBG {
    const message = createBaseMapSetUseDrawnBG();
    message.mapId = object.mapId ?? "";
    message.useDrawnBG = object.useDrawnBG ?? false;
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetWalls(): MapSetWalls {
  return { mapId: "", walls: {}, delete: undefined };
}

export const MapSetWalls = {
  encode(message: MapSetWalls, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    Object.entries(message.walls).forEach(([key, value]) => {
      MapSetWalls_WallsEntry283.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetWalls {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetWalls();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = MapSetWalls_WallsEntry283.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.walls[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetWalls {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      walls: isObject(object.walls)
        ? Object.entries(object.walls).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetWalls): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    obj.walls = {};
    if (message.walls) {
      Object.entries(message.walls).forEach(([k, v]) => {
        obj.walls[k] = v;
      });
    }
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetWalls>, I>>(base?: I): MapSetWalls {
    return MapSetWalls.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetWalls>, I>>(object: I): MapSetWalls {
    const message = createBaseMapSetWalls();
    message.mapId = object.mapId ?? "";
    message.walls = Object.entries(object.walls ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetWalls_WallsEntry(): MapSetWalls_WallsEntry {
  return { key: "", value: "" };
}

export const MapSetWalls_WallsEntry = {
  encode(message: MapSetWalls_WallsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetWalls_WallsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetWalls_WallsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetWalls_WallsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: MapSetWalls_WallsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetWalls_WallsEntry>, I>>(base?: I): MapSetWalls_WallsEntry {
    return MapSetWalls_WallsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetWalls_WallsEntry>, I>>(object: I): MapSetWalls_WallsEntry {
    const message = createBaseMapSetWalls_WallsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMapSetFloors(): MapSetFloors {
  return { mapId: "", floors: {}, delete: undefined };
}

export const MapSetFloors = {
  encode(message: MapSetFloors, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    Object.entries(message.floors).forEach(([key, value]) => {
      MapSetFloors_FloorsEntry284.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetFloors {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetFloors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = MapSetFloors_FloorsEntry284.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.floors[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetFloors {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      floors: isObject(object.floors)
        ? Object.entries(object.floors).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetFloors): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    obj.floors = {};
    if (message.floors) {
      Object.entries(message.floors).forEach(([k, v]) => {
        obj.floors[k] = v;
      });
    }
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetFloors>, I>>(base?: I): MapSetFloors {
    return MapSetFloors.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetFloors>, I>>(object: I): MapSetFloors {
    const message = createBaseMapSetFloors();
    message.mapId = object.mapId ?? "";
    message.floors = Object.entries(object.floors ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetFloors_FloorsEntry(): MapSetFloors_FloorsEntry {
  return { key: "", value: "" };
}

export const MapSetFloors_FloorsEntry = {
  encode(message: MapSetFloors_FloorsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetFloors_FloorsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetFloors_FloorsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetFloors_FloorsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: MapSetFloors_FloorsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetFloors_FloorsEntry>, I>>(base?: I): MapSetFloors_FloorsEntry {
    return MapSetFloors_FloorsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetFloors_FloorsEntry>, I>>(object: I): MapSetFloors_FloorsEntry {
    const message = createBaseMapSetFloors_FloorsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMapSetAreas(): MapSetAreas {
  return { mapId: "", areas: {}, delete: undefined };
}

export const MapSetAreas = {
  encode(message: MapSetAreas, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    Object.entries(message.areas).forEach(([key, value]) => {
      MapSetAreas_AreasEntry285.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetAreas {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetAreas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = MapSetAreas_AreasEntry285.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.areas[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetAreas {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      areas: isObject(object.areas)
        ? Object.entries(object.areas).reduce<{ [key: string]: WireArea26 }>((acc, [key, value]) => {
          acc[key] = WireArea26.fromJSON(value);
          return acc;
        }, {})
        : {},
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetAreas): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    obj.areas = {};
    if (message.areas) {
      Object.entries(message.areas).forEach(([k, v]) => {
        obj.areas[k] = WireArea26.toJSON(v);
      });
    }
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetAreas>, I>>(base?: I): MapSetAreas {
    return MapSetAreas.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetAreas>, I>>(object: I): MapSetAreas {
    const message = createBaseMapSetAreas();
    message.mapId = object.mapId ?? "";
    message.areas = Object.entries(object.areas ?? {}).reduce<{ [key: string]: WireArea26 }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = WireArea26.fromPartial(value);
      }
      return acc;
    }, {});
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetAreas_AreasEntry(): MapSetAreas_AreasEntry {
  return { key: "", value: undefined };
}

export const MapSetAreas_AreasEntry = {
  encode(message: MapSetAreas_AreasEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      WireArea26.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetAreas_AreasEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetAreas_AreasEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = WireArea26.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetAreas_AreasEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? WireArea26.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MapSetAreas_AreasEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? WireArea26.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetAreas_AreasEntry>, I>>(base?: I): MapSetAreas_AreasEntry {
    return MapSetAreas_AreasEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetAreas_AreasEntry>, I>>(object: I): MapSetAreas_AreasEntry {
    const message = createBaseMapSetAreas_AreasEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? WireArea26.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMapDeleteObject(): MapDeleteObject {
  return { mapId: "", key: 0 };
}

export const MapDeleteObject = {
  encode(message: MapDeleteObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.key !== 0) {
      writer.uint32(16).uint32(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapDeleteObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapDeleteObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.key = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapDeleteObject {
    return { mapId: isSet(object.mapId) ? String(object.mapId) : "", key: isSet(object.key) ? Number(object.key) : 0 };
  },

  toJSON(message: MapDeleteObject): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.key !== undefined && (obj.key = Math.round(message.key));
    return obj;
  },

  create<I extends Exact<DeepPartial<MapDeleteObject>, I>>(base?: I): MapDeleteObject {
    return MapDeleteObject.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapDeleteObject>, I>>(object: I): MapDeleteObject {
    const message = createBaseMapDeleteObject();
    message.mapId = object.mapId ?? "";
    message.key = object.key ?? 0;
    return message;
  },
};

function createBaseMapDeleteObjectById(): MapDeleteObjectById {
  return { mapId: "", id: "" };
}

export const MapDeleteObjectById = {
  encode(message: MapDeleteObjectById, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapDeleteObjectById {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapDeleteObjectById();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapDeleteObjectById {
    return { mapId: isSet(object.mapId) ? String(object.mapId) : "", id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: MapDeleteObjectById): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapDeleteObjectById>, I>>(base?: I): MapDeleteObjectById {
    return MapDeleteObjectById.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapDeleteObjectById>, I>>(object: I): MapDeleteObjectById {
    const message = createBaseMapDeleteObjectById();
    message.mapId = object.mapId ?? "";
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseMapSetMiniMapImagePath(): MapSetMiniMapImagePath {
  return { mapId: "", miniMapImagePath: "", delete: undefined };
}

export const MapSetMiniMapImagePath = {
  encode(message: MapSetMiniMapImagePath, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.miniMapImagePath !== "") {
      writer.uint32(18).string(message.miniMapImagePath);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetMiniMapImagePath {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetMiniMapImagePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.miniMapImagePath = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetMiniMapImagePath {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      miniMapImagePath: isSet(object.miniMapImagePath) ? String(object.miniMapImagePath) : "",
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetMiniMapImagePath): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.miniMapImagePath !== undefined && (obj.miniMapImagePath = message.miniMapImagePath);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetMiniMapImagePath>, I>>(base?: I): MapSetMiniMapImagePath {
    return MapSetMiniMapImagePath.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetMiniMapImagePath>, I>>(object: I): MapSetMiniMapImagePath {
    const message = createBaseMapSetMiniMapImagePath();
    message.mapId = object.mapId ?? "";
    message.miniMapImagePath = object.miniMapImagePath ?? "";
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetEnabledChats(): MapSetEnabledChats {
  return { mapId: "", enabledChats: [], delete: undefined };
}

export const MapSetEnabledChats = {
  encode(message: MapSetEnabledChats, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    for (const v of message.enabledChats) {
      writer.uint32(18).string(v!);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetEnabledChats {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetEnabledChats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.enabledChats.push(reader.string());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetEnabledChats {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      enabledChats: Array.isArray(object?.enabledChats) ? object.enabledChats.map((e: any) => String(e)) : [],
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetEnabledChats): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    if (message.enabledChats) {
      obj.enabledChats = message.enabledChats.map((e) => e);
    } else {
      obj.enabledChats = [];
    }
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetEnabledChats>, I>>(base?: I): MapSetEnabledChats {
    return MapSetEnabledChats.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetEnabledChats>, I>>(object: I): MapSetEnabledChats {
    const message = createBaseMapSetEnabledChats();
    message.mapId = object.mapId ?? "";
    message.enabledChats = object.enabledChats?.map((e) => e) || [];
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetDescription(): MapSetDescription {
  return { mapId: "", description: "", delete: undefined };
}

export const MapSetDescription = {
  encode(message: MapSetDescription, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetDescription {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetDescription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetDescription {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      description: isSet(object.description) ? String(object.description) : "",
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetDescription): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.description !== undefined && (obj.description = message.description);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetDescription>, I>>(base?: I): MapSetDescription {
    return MapSetDescription.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetDescription>, I>>(object: I): MapSetDescription {
    const message = createBaseMapSetDescription();
    message.mapId = object.mapId ?? "";
    message.description = object.description ?? "";
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetDecoration(): MapSetDecoration {
  return { mapId: "", decoration: "", delete: undefined };
}

export const MapSetDecoration = {
  encode(message: MapSetDecoration, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.decoration !== "") {
      writer.uint32(18).string(message.decoration);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetDecoration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetDecoration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.decoration = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetDecoration {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      decoration: isSet(object.decoration) ? String(object.decoration) : "",
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetDecoration): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.decoration !== undefined && (obj.decoration = message.decoration);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetDecoration>, I>>(base?: I): MapSetDecoration {
    return MapSetDecoration.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetDecoration>, I>>(object: I): MapSetDecoration {
    const message = createBaseMapSetDecoration();
    message.mapId = object.mapId ?? "";
    message.decoration = object.decoration ?? "";
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseMapSetTutorialTasks(): MapSetTutorialTasks {
  return { mapId: "", tutorialTasks: undefined, delete: undefined };
}

export const MapSetTutorialTasks = {
  encode(message: MapSetTutorialTasks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.tutorialTasks !== undefined) {
      WireTutorialTasks27.encode(message.tutorialTasks, writer.uint32(18).fork()).ldelim();
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetTutorialTasks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetTutorialTasks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.tutorialTasks = WireTutorialTasks27.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetTutorialTasks {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      tutorialTasks: isSet(object.tutorialTasks) ? WireTutorialTasks27.fromJSON(object.tutorialTasks) : undefined,
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetTutorialTasks): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.tutorialTasks !== undefined &&
      (obj.tutorialTasks = message.tutorialTasks ? WireTutorialTasks27.toJSON(message.tutorialTasks) : undefined);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetTutorialTasks>, I>>(base?: I): MapSetTutorialTasks {
    return MapSetTutorialTasks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetTutorialTasks>, I>>(object: I): MapSetTutorialTasks {
    const message = createBaseMapSetTutorialTasks();
    message.mapId = object.mapId ?? "";
    message.tutorialTasks = (object.tutorialTasks !== undefined && object.tutorialTasks !== null)
      ? WireTutorialTasks27.fromPartial(object.tutorialTasks)
      : undefined;
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseWireTutorialTasks(): WireTutorialTasks {
  return { groupSetId: "", areas: [], autoStart: undefined };
}

export const WireTutorialTasks = {
  encode(message: WireTutorialTasks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.groupSetId !== "") {
      writer.uint32(10).string(message.groupSetId);
    }
    for (const v of message.areas) {
      TutorialTaskMapArea28.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.autoStart !== undefined) {
      writer.uint32(24).bool(message.autoStart);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireTutorialTasks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireTutorialTasks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.groupSetId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.areas.push(TutorialTaskMapArea28.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.autoStart = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireTutorialTasks {
    return {
      groupSetId: isSet(object.groupSetId) ? String(object.groupSetId) : "",
      areas: Array.isArray(object?.areas) ? object.areas.map((e: any) => TutorialTaskMapArea.fromJSON(e)) : [],
      autoStart: isSet(object.autoStart) ? Boolean(object.autoStart) : undefined,
    };
  },

  toJSON(message: WireTutorialTasks): unknown {
    const obj: any = {};
    message.groupSetId !== undefined && (obj.groupSetId = message.groupSetId);
    if (message.areas) {
      obj.areas = message.areas.map((e) => e ? TutorialTaskMapArea28.toJSON(e) : undefined);
    } else {
      obj.areas = [];
    }
    message.autoStart !== undefined && (obj.autoStart = message.autoStart);
    return obj;
  },

  create<I extends Exact<DeepPartial<WireTutorialTasks>, I>>(base?: I): WireTutorialTasks {
    return WireTutorialTasks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<WireTutorialTasks>, I>>(object: I): WireTutorialTasks {
    const message = createBaseWireTutorialTasks();
    message.groupSetId = object.groupSetId ?? "";
    message.areas = object.areas?.map((e) => TutorialTaskMapArea28.fromPartial(e)) || [];
    message.autoStart = object.autoStart ?? undefined;
    return message;
  },
};

function createBaseTutorialTaskMapArea(): TutorialTaskMapArea {
  return { areaId: "", x: 0, y: 0, height: 0, width: 0 };
}

export const TutorialTaskMapArea = {
  encode(message: TutorialTaskMapArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.areaId !== "") {
      writer.uint32(10).string(message.areaId);
    }
    if (message.x !== 0) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    if (message.height !== 0) {
      writer.uint32(32).uint32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(40).uint32(message.width);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TutorialTaskMapArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTutorialTaskMapArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.areaId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.height = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.width = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TutorialTaskMapArea {
    return {
      areaId: isSet(object.areaId) ? String(object.areaId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      height: isSet(object.height) ? Number(object.height) : 0,
      width: isSet(object.width) ? Number(object.width) : 0,
    };
  },

  toJSON(message: TutorialTaskMapArea): unknown {
    const obj: any = {};
    message.areaId !== undefined && (obj.areaId = message.areaId);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.height !== undefined && (obj.height = Math.round(message.height));
    message.width !== undefined && (obj.width = Math.round(message.width));
    return obj;
  },

  create<I extends Exact<DeepPartial<TutorialTaskMapArea>, I>>(base?: I): TutorialTaskMapArea {
    return TutorialTaskMapArea.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<TutorialTaskMapArea>, I>>(object: I): TutorialTaskMapArea {
    const message = createBaseTutorialTaskMapArea();
    message.areaId = object.areaId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    return message;
  },
};

function createBaseMapSetScript(): MapSetScript {
  return { mapId: "", script: "", delete: undefined };
}

export const MapSetScript = {
  encode(message: MapSetScript, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.script !== "") {
      writer.uint32(18).string(message.script);
    }
    if (message.delete !== undefined) {
      writer.uint32(24).bool(message.delete);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapSetScript {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapSetScript();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.script = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.delete = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapSetScript {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      script: isSet(object.script) ? String(object.script) : "",
      delete: isSet(object.delete) ? Boolean(object.delete) : undefined,
    };
  },

  toJSON(message: MapSetScript): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.script !== undefined && (obj.script = message.script);
    message.delete !== undefined && (obj.delete = message.delete);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapSetScript>, I>>(base?: I): MapSetScript {
    return MapSetScript.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapSetScript>, I>>(object: I): MapSetScript {
    const message = createBaseMapSetScript();
    message.mapId = object.mapId ?? "";
    message.script = object.script ?? "";
    message.delete = object.delete ?? undefined;
    return message;
  },
};

function createBaseInventory(): Inventory {
  return { items: {}, order: {} };
}

export const Inventory = {
  encode(message: Inventory, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.items).forEach(([key, value]) => {
      Inventory_ItemsEntry286.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    Object.entries(message.order).forEach(([key, value]) => {
      Inventory_OrderEntry287.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Inventory {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = Inventory_ItemsEntry286.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.items[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = Inventory_OrderEntry287.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.order[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory {
    return {
      items: isObject(object.items)
        ? Object.entries(object.items).reduce<{ [key: string]: InventoryItem29 }>((acc, [key, value]) => {
          acc[key] = InventoryItem29.fromJSON(value);
          return acc;
        }, {})
        : {},
      order: isObject(object.order)
        ? Object.entries(object.order).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Inventory): unknown {
    const obj: any = {};
    obj.items = {};
    if (message.items) {
      Object.entries(message.items).forEach(([k, v]) => {
        obj.items[k] = InventoryItem29.toJSON(v);
      });
    }
    obj.order = {};
    if (message.order) {
      Object.entries(message.order).forEach(([k, v]) => {
        obj.order[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Inventory>, I>>(base?: I): Inventory {
    return Inventory.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Inventory>, I>>(object: I): Inventory {
    const message = createBaseInventory();
    message.items = Object.entries(object.items ?? {}).reduce<{ [key: string]: InventoryItem29 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = InventoryItem29.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.order = Object.entries(object.order ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseInventory_ItemsEntry(): Inventory_ItemsEntry {
  return { key: "", value: undefined };
}

export const Inventory_ItemsEntry = {
  encode(message: Inventory_ItemsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      InventoryItem29.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Inventory_ItemsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_ItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = InventoryItem29.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_ItemsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? InventoryItem29.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Inventory_ItemsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? InventoryItem29.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<Inventory_ItemsEntry>, I>>(base?: I): Inventory_ItemsEntry {
    return Inventory_ItemsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Inventory_ItemsEntry>, I>>(object: I): Inventory_ItemsEntry {
    const message = createBaseInventory_ItemsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? InventoryItem29.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseInventory_OrderEntry(): Inventory_OrderEntry {
  return { key: "", value: "" };
}

export const Inventory_OrderEntry = {
  encode(message: Inventory_OrderEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Inventory_OrderEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventory_OrderEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inventory_OrderEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: Inventory_OrderEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<Inventory_OrderEntry>, I>>(base?: I): Inventory_OrderEntry {
    return Inventory_OrderEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Inventory_OrderEntry>, I>>(object: I): Inventory_OrderEntry {
    const message = createBaseInventory_OrderEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseInventoryItem(): InventoryItem {
  return { count: 0 };
}

export const InventoryItem = {
  encode(message: InventoryItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.count !== 0) {
      writer.uint32(8).uint32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): InventoryItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.count = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoryItem {
    return { count: isSet(object.count) ? Number(object.count) : 0 };
  },

  toJSON(message: InventoryItem): unknown {
    const obj: any = {};
    message.count !== undefined && (obj.count = Math.round(message.count));
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoryItem>, I>>(base?: I): InventoryItem {
    return InventoryItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<InventoryItem>, I>>(object: I): InventoryItem {
    const message = createBaseInventoryItem();
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseSpaceItem(): SpaceItem {
  return { name: "", category: undefined, description: undefined, previewUrl: "", meta: {}, abilities: {} };
}

export const SpaceItem = {
  encode(message: SpaceItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.category !== undefined) {
      writer.uint32(18).string(message.category);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.previewUrl !== "") {
      writer.uint32(34).string(message.previewUrl);
    }
    Object.entries(message.meta).forEach(([key, value]) => {
      SpaceItem_MetaEntry288.encode({ key: key as any, value }, writer.uint32(42).fork()).ldelim();
    });
    Object.entries(message.abilities).forEach(([key, value]) => {
      SpaceItem_AbilitiesEntry289.encode({ key: key as any, value }, writer.uint32(50).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.previewUrl = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          const entry5 = SpaceItem_MetaEntry288.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.meta[entry5.key] = entry5.value;
          }
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          const entry6 = SpaceItem_AbilitiesEntry289.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.abilities[entry6.key] = entry6.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceItem {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      category: isSet(object.category) ? String(object.category) : undefined,
      description: isSet(object.description) ? String(object.description) : undefined,
      previewUrl: isSet(object.previewUrl) ? String(object.previewUrl) : "",
      meta: isObject(object.meta)
        ? Object.entries(object.meta).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      abilities: isObject(object.abilities)
        ? Object.entries(object.abilities).reduce<{ [key: string]: ItemAbility30 }>((acc, [key, value]) => {
          acc[key] = ItemAbility30.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SpaceItem): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.category !== undefined && (obj.category = message.category);
    message.description !== undefined && (obj.description = message.description);
    message.previewUrl !== undefined && (obj.previewUrl = message.previewUrl);
    obj.meta = {};
    if (message.meta) {
      Object.entries(message.meta).forEach(([k, v]) => {
        obj.meta[k] = v;
      });
    }
    obj.abilities = {};
    if (message.abilities) {
      Object.entries(message.abilities).forEach(([k, v]) => {
        obj.abilities[k] = ItemAbility30.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceItem>, I>>(base?: I): SpaceItem {
    return SpaceItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceItem>, I>>(object: I): SpaceItem {
    const message = createBaseSpaceItem();
    message.name = object.name ?? "";
    message.category = object.category ?? undefined;
    message.description = object.description ?? undefined;
    message.previewUrl = object.previewUrl ?? "";
    message.meta = Object.entries(object.meta ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    message.abilities = Object.entries(object.abilities ?? {}).reduce<{ [key: string]: ItemAbility30 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = ItemAbility30.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSpaceItem_MetaEntry(): SpaceItem_MetaEntry {
  return { key: "", value: "" };
}

export const SpaceItem_MetaEntry = {
  encode(message: SpaceItem_MetaEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceItem_MetaEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceItem_MetaEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceItem_MetaEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: SpaceItem_MetaEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceItem_MetaEntry>, I>>(base?: I): SpaceItem_MetaEntry {
    return SpaceItem_MetaEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceItem_MetaEntry>, I>>(object: I): SpaceItem_MetaEntry {
    const message = createBaseSpaceItem_MetaEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSpaceItem_AbilitiesEntry(): SpaceItem_AbilitiesEntry {
  return { key: "", value: undefined };
}

export const SpaceItem_AbilitiesEntry = {
  encode(message: SpaceItem_AbilitiesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      ItemAbility30.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceItem_AbilitiesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceItem_AbilitiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = ItemAbility30.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceItem_AbilitiesEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? ItemAbility30.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SpaceItem_AbilitiesEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? ItemAbility30.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceItem_AbilitiesEntry>, I>>(base?: I): SpaceItem_AbilitiesEntry {
    return SpaceItem_AbilitiesEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceItem_AbilitiesEntry>, I>>(object: I): SpaceItem_AbilitiesEntry {
    const message = createBaseSpaceItem_AbilitiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? ItemAbility30.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseItemAbility(): ItemAbility {
  return { name: "" };
}

export const ItemAbility = {
  encode(message: ItemAbility, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ItemAbility {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseItemAbility();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ItemAbility {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: ItemAbility): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<ItemAbility>, I>>(base?: I): ItemAbility {
    return ItemAbility.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ItemAbility>, I>>(object: I): ItemAbility {
    const message = createBaseItemAbility();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseMapLocation(): MapLocation {
  return { map: "", x: 0, y: 0 };
}

export const MapLocation = {
  encode(message: MapLocation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.map !== "") {
      writer.uint32(10).string(message.map);
    }
    if (message.x !== 0) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapLocation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.map = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapLocation {
    return {
      map: isSet(object.map) ? String(object.map) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
    };
  },

  toJSON(message: MapLocation): unknown {
    const obj: any = {};
    message.map !== undefined && (obj.map = message.map);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    return obj;
  },

  create<I extends Exact<DeepPartial<MapLocation>, I>>(base?: I): MapLocation {
    return MapLocation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapLocation>, I>>(object: I): MapLocation {
    const message = createBaseMapLocation();
    message.map = object.map ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseEnterWithTeammatesLobbyUser(): EnterWithTeammatesLobbyUser {
  return { id: "", name: "", outfitString: "" };
}

export const EnterWithTeammatesLobbyUser = {
  encode(message: EnterWithTeammatesLobbyUser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.outfitString !== "") {
      writer.uint32(26).string(message.outfitString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterWithTeammatesLobbyUser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterWithTeammatesLobbyUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.outfitString = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnterWithTeammatesLobbyUser {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      name: isSet(object.name) ? String(object.name) : "",
      outfitString: isSet(object.outfitString) ? String(object.outfitString) : "",
    };
  },

  toJSON(message: EnterWithTeammatesLobbyUser): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.name !== undefined && (obj.name = message.name);
    message.outfitString !== undefined && (obj.outfitString = message.outfitString);
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterWithTeammatesLobbyUser>, I>>(base?: I): EnterWithTeammatesLobbyUser {
    return EnterWithTeammatesLobbyUser.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterWithTeammatesLobbyUser>, I>>(object: I): EnterWithTeammatesLobbyUser {
    const message = createBaseEnterWithTeammatesLobbyUser();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.outfitString = object.outfitString ?? "";
    return message;
  },
};

function createBaseEnterWithTeammatesLobbyStateUpdated(): EnterWithTeammatesLobbyStateUpdated {
  return { hostId: undefined, users: [] };
}

export const EnterWithTeammatesLobbyStateUpdated = {
  encode(message: EnterWithTeammatesLobbyStateUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostId !== undefined) {
      writer.uint32(10).string(message.hostId);
    }
    for (const v of message.users) {
      EnterWithTeammatesLobbyUser31.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterWithTeammatesLobbyStateUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterWithTeammatesLobbyStateUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.hostId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.users.push(EnterWithTeammatesLobbyUser31.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnterWithTeammatesLobbyStateUpdated {
    return {
      hostId: isSet(object.hostId) ? String(object.hostId) : undefined,
      users: Array.isArray(object?.users) ? object.users.map((e: any) => EnterWithTeammatesLobbyUser.fromJSON(e)) : [],
    };
  },

  toJSON(message: EnterWithTeammatesLobbyStateUpdated): unknown {
    const obj: any = {};
    message.hostId !== undefined && (obj.hostId = message.hostId);
    if (message.users) {
      obj.users = message.users.map((e) => e ? EnterWithTeammatesLobbyUser31.toJSON(e) : undefined);
    } else {
      obj.users = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterWithTeammatesLobbyStateUpdated>, I>>(
    base?: I,
  ): EnterWithTeammatesLobbyStateUpdated {
    return EnterWithTeammatesLobbyStateUpdated.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterWithTeammatesLobbyStateUpdated>, I>>(
    object: I,
  ): EnterWithTeammatesLobbyStateUpdated {
    const message = createBaseEnterWithTeammatesLobbyStateUpdated();
    message.hostId = object.hostId ?? undefined;
    message.users = object.users?.map((e) => EnterWithTeammatesLobbyUser31.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEnterWithTeammatesHostInitiatesEnterSpace(): EnterWithTeammatesHostInitiatesEnterSpace {
  return { hostId: "" };
}

export const EnterWithTeammatesHostInitiatesEnterSpace = {
  encode(message: EnterWithTeammatesHostInitiatesEnterSpace, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostId !== "") {
      writer.uint32(10).string(message.hostId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterWithTeammatesHostInitiatesEnterSpace {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterWithTeammatesHostInitiatesEnterSpace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.hostId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnterWithTeammatesHostInitiatesEnterSpace {
    return { hostId: isSet(object.hostId) ? String(object.hostId) : "" };
  },

  toJSON(message: EnterWithTeammatesHostInitiatesEnterSpace): unknown {
    const obj: any = {};
    message.hostId !== undefined && (obj.hostId = message.hostId);
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterWithTeammatesHostInitiatesEnterSpace>, I>>(
    base?: I,
  ): EnterWithTeammatesHostInitiatesEnterSpace {
    return EnterWithTeammatesHostInitiatesEnterSpace.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterWithTeammatesHostInitiatesEnterSpace>, I>>(
    object: I,
  ): EnterWithTeammatesHostInitiatesEnterSpace {
    const message = createBaseEnterWithTeammatesHostInitiatesEnterSpace();
    message.hostId = object.hostId ?? "";
    return message;
  },
};

function createBaseServerClientBatch(): ServerClientBatch {
  return { events: [] };
}

export const ServerClientBatch = {
  encode(message: ServerClientBatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.events) {
      ServerClientEvent32.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerClientBatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerClientBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.events.push(ServerClientEvent32.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerClientBatch {
    return {
      events: Array.isArray(object?.events) ? object.events.map((e: any) => ServerClientEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: ServerClientBatch): unknown {
    const obj: any = {};
    if (message.events) {
      obj.events = message.events.map((e) => e ? ServerClientEvent32.toJSON(e) : undefined);
    } else {
      obj.events = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerClientBatch>, I>>(base?: I): ServerClientBatch {
    return ServerClientBatch.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ServerClientBatch>, I>>(object: I): ServerClientBatch {
    const message = createBaseServerClientBatch();
    message.events = object.events?.map((e) => ServerClientEvent32.fromPartial(e)) || [];
    return message;
  },
};

function createBaseServerClientEvent(): ServerClientEvent {
  return {
    info: undefined,
    warn: undefined,
    error: undefined,
    ready: undefined,
    serverHeartbeat: undefined,
    transactionStatus: undefined,
    playerMoves: undefined,
    playerSetsStatus: undefined,
    playerSpotlights: undefined,
    playerRings: undefined,
    playerChats: undefined,
    playerInteracts: undefined,
    playerGhosts: undefined,
    playerEntersWhisper: undefined,
    playerLeavesWhisper: undefined,
    playerActivelySpeaks: undefined,
    playerSetsWorkCondition: undefined,
    playerSetsName: undefined,
    playerSetsTextStatus: undefined,
    playerSetsEmojiStatus: undefined,
    playerSetsAffiliation: undefined,
    playerExits: undefined,
    respawnComplete: undefined,
    playerSetsOutfitString: undefined,
    playerSetsIsSignedIn: undefined,
    spaceOverwrites: undefined,
    spaceIsClosed: undefined,
    playerEntersPortal: undefined,
    spaceSetsIdMapping: undefined,
    playerSetsLastActive: undefined,
    playerShootsConfetti: undefined,
    playerSetsEventStatus: undefined,
    playerSetsInConversation: undefined,
    playerSetsCurrentDesk: undefined,
    playerSetsCurrentArea: undefined,
    playerSetsImagePointer: undefined,
    cookieFound: undefined,
    playerEntersWhisperV2: undefined,
    playerSetsGoKartId: undefined,
    mapSetDimensions: undefined,
    mapSetCollisions: undefined,
    mapSetBackgroundImagePath: undefined,
    mapSetForegroundImagePath: undefined,
    mapSetSprites: undefined,
    mapSetSpaces: undefined,
    mapSetSpawns: undefined,
    mapSetPortals: undefined,
    mapSetAnnouncer: undefined,
    mapSetAssets: undefined,
    mapSetObjects: undefined,
    mapSetName: undefined,
    mapSetMuteOnEntry: undefined,
    mapSetUseDrawnBG: undefined,
    mapSetWalls: undefined,
    mapSetFloors: undefined,
    mapSetAreas: undefined,
    mapDeleteObject: undefined,
    mapSetSpawn: undefined,
    playerSetsIsAlone: undefined,
    playerJoins: undefined,
    mapSetEnabledChats: undefined,
    mapSetDescription: undefined,
    mapSetDecoration: undefined,
    mapSetTutorialTasks: undefined,
    mapSetMiniMapImagePath: undefined,
    spacePlaysSound: undefined,
    mapSetScript: undefined,
    playerSetsIsMobile: undefined,
    setScreenPointerServer: undefined,
    playerSetsEmoteV2: undefined,
    playerSetsFocusModeEndTime: undefined,
    spaceSetsSpaceMembers: undefined,
    customEvent: undefined,
    playerBlocks: undefined,
    playerUpdatesFocusModeStatus: undefined,
    playerNotifies: undefined,
    playerSetsItemString: undefined,
    playerTriggersItem: undefined,
    playerSetsFollowTarget: undefined,
    playerRequestsToLead: undefined,
    playerSetsManualVideoSrc: undefined,
    playerSetsIsNpc: undefined,
    playerSetsSubtitle: undefined,
    mapCommitsChanges: undefined,
    playerUpdatesSession: undefined,
    mapMoveObject: undefined,
    playerEditsChatMessage: undefined,
    fxShakeObject: undefined,
    fxShakeCamera: undefined,
    playerSendsCommand: undefined,
    spaceRegistersCommand: undefined,
    speakerUpdatesSession: undefined,
    playerUpdatesInventory: undefined,
    spaceUpdatesItems: undefined,
    playerSetsVehicleId: undefined,
    playerSetsSpeedModifier: undefined,
    playerHighFives: undefined,
    spaceStopsSound: undefined,
    hipToBeSquare: undefined,
    playerCrafts: undefined,
    playerTriggersInventoryItem: undefined,
    playerSetsAllowScreenPointer: undefined,
    precomputedEnterLocation: undefined,
    gotRequestMute: undefined,
    playerSetsDeskInfo: undefined,
    mapSetNooks: undefined,
    dynamicGates: undefined,
    playerWaves: undefined,
    playerSetsPronouns: undefined,
    playerSetsTitle: undefined,
    playerSetsTimezone: undefined,
    playerSetsDescription: undefined,
    playerSetsPhone: undefined,
    playerSetsPersonalImageUrl: undefined,
    playerSetsProfileImageUrl: undefined,
    spaceSetsCapacity: undefined,
    spaceOverCapacityDeniesUser: undefined,
    playerSetsAway: undefined,
    mapSetCollisionsBits: undefined,
    playerSetsCity: undefined,
    playerSetsCountry: undefined,
    playerSetsStartDate: undefined,
    playerStartsRecording: undefined,
    accessRequestsUpdated: undefined,
    accessRequestRespondedTo: undefined,
    spaceSetsGuestPassStatuses: undefined,
    playerSetsAvailability: undefined,
    subscriptionsUpdated: undefined,
    enterWithTeammatesLobbyStateUpdated: undefined,
    enterWithTeammatesHostInitiatesEnterSpace: undefined,
    spaceRolePermissionOverrideUpdated: undefined,
  };
}

export const ServerClientEvent = {
  encode(message: ServerClientEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.info !== undefined) {
      Info33.encode(message.info, writer.uint32(802).fork()).ldelim();
    }
    if (message.warn !== undefined) {
      Warn34.encode(message.warn, writer.uint32(810).fork()).ldelim();
    }
    if (message.error !== undefined) {
      ErrorEvent35.encode(message.error, writer.uint32(818).fork()).ldelim();
    }
    if (message.ready !== undefined) {
      Ready36.encode(message.ready, writer.uint32(826).fork()).ldelim();
    }
    if (message.serverHeartbeat !== undefined) {
      ServerHeartbeat37.encode(message.serverHeartbeat, writer.uint32(842).fork()).ldelim();
    }
    if (message.transactionStatus !== undefined) {
      TransactionStatus38.encode(message.transactionStatus, writer.uint32(858).fork()).ldelim();
    }
    if (message.playerMoves !== undefined) {
      PlayerMoves39.encode(message.playerMoves, writer.uint32(10).fork()).ldelim();
    }
    if (message.playerSetsStatus !== undefined) {
      PlayerSetsStatus40.encode(message.playerSetsStatus, writer.uint32(42).fork()).ldelim();
    }
    if (message.playerSpotlights !== undefined) {
      PlayerSpotlights41.encode(message.playerSpotlights, writer.uint32(50).fork()).ldelim();
    }
    if (message.playerRings !== undefined) {
      PlayerRings42.encode(message.playerRings, writer.uint32(58).fork()).ldelim();
    }
    if (message.playerChats !== undefined) {
      PlayerChats43.encode(message.playerChats, writer.uint32(74).fork()).ldelim();
    }
    if (message.playerInteracts !== undefined) {
      PlayerInteracts44.encode(message.playerInteracts, writer.uint32(82).fork()).ldelim();
    }
    if (message.playerGhosts !== undefined) {
      PlayerGhosts45.encode(message.playerGhosts, writer.uint32(90).fork()).ldelim();
    }
    if (message.playerEntersWhisper !== undefined) {
      PlayerEntersWhisper46.encode(message.playerEntersWhisper, writer.uint32(98).fork()).ldelim();
    }
    if (message.playerLeavesWhisper !== undefined) {
      PlayerLeavesWhisper47.encode(message.playerLeavesWhisper, writer.uint32(106).fork()).ldelim();
    }
    if (message.playerActivelySpeaks !== undefined) {
      PlayerActivelySpeaks48.encode(message.playerActivelySpeaks, writer.uint32(114).fork()).ldelim();
    }
    if (message.playerSetsWorkCondition !== undefined) {
      PlayerSetsWorkCondition49.encode(message.playerSetsWorkCondition, writer.uint32(130).fork()).ldelim();
    }
    if (message.playerSetsName !== undefined) {
      PlayerSetsName50.encode(message.playerSetsName, writer.uint32(138).fork()).ldelim();
    }
    if (message.playerSetsTextStatus !== undefined) {
      PlayerSetsTextStatus51.encode(message.playerSetsTextStatus, writer.uint32(146).fork()).ldelim();
    }
    if (message.playerSetsEmojiStatus !== undefined) {
      PlayerSetsEmojiStatus52.encode(message.playerSetsEmojiStatus, writer.uint32(154).fork()).ldelim();
    }
    if (message.playerSetsAffiliation !== undefined) {
      PlayerSetsAffiliation53.encode(message.playerSetsAffiliation, writer.uint32(162).fork()).ldelim();
    }
    if (message.playerExits !== undefined) {
      PlayerExits54.encode(message.playerExits, writer.uint32(170).fork()).ldelim();
    }
    if (message.respawnComplete !== undefined) {
      RespawnComplete55.encode(message.respawnComplete, writer.uint32(314).fork()).ldelim();
    }
    if (message.playerSetsOutfitString !== undefined) {
      PlayerSetsOutfitString56.encode(message.playerSetsOutfitString, writer.uint32(322).fork()).ldelim();
    }
    if (message.playerSetsIsSignedIn !== undefined) {
      PlayerSetsIsSignedIn57.encode(message.playerSetsIsSignedIn, writer.uint32(330).fork()).ldelim();
    }
    if (message.spaceOverwrites !== undefined) {
      SpaceOverwrites58.encode(message.spaceOverwrites, writer.uint32(354).fork()).ldelim();
    }
    if (message.spaceIsClosed !== undefined) {
      SpaceIsClosed59.encode(message.spaceIsClosed, writer.uint32(362).fork()).ldelim();
    }
    if (message.playerEntersPortal !== undefined) {
      PlayerEntersPortal60.encode(message.playerEntersPortal, writer.uint32(370).fork()).ldelim();
    }
    if (message.spaceSetsIdMapping !== undefined) {
      SpaceSetsIdMapping61.encode(message.spaceSetsIdMapping, writer.uint32(378).fork()).ldelim();
    }
    if (message.playerSetsLastActive !== undefined) {
      PlayerSetsLastActive62.encode(message.playerSetsLastActive, writer.uint32(386).fork()).ldelim();
    }
    if (message.playerShootsConfetti !== undefined) {
      PlayerShootsConfetti63.encode(message.playerShootsConfetti, writer.uint32(394).fork()).ldelim();
    }
    if (message.playerSetsEventStatus !== undefined) {
      PlayerSetsEventStatus64.encode(message.playerSetsEventStatus, writer.uint32(402).fork()).ldelim();
    }
    if (message.playerSetsInConversation !== undefined) {
      PlayerSetsInConversation65.encode(message.playerSetsInConversation, writer.uint32(410).fork()).ldelim();
    }
    if (message.playerSetsCurrentDesk !== undefined) {
      PlayerSetsCurrentDesk66.encode(message.playerSetsCurrentDesk, writer.uint32(418).fork()).ldelim();
    }
    if (message.playerSetsCurrentArea !== undefined) {
      PlayerSetsCurrentArea67.encode(message.playerSetsCurrentArea, writer.uint32(426).fork()).ldelim();
    }
    if (message.playerSetsImagePointer !== undefined) {
      PlayerSetsImagePointer68.encode(message.playerSetsImagePointer, writer.uint32(434).fork()).ldelim();
    }
    if (message.cookieFound !== undefined) {
      CookieFound69.encode(message.cookieFound, writer.uint32(442).fork()).ldelim();
    }
    if (message.playerEntersWhisperV2 !== undefined) {
      PlayerEntersWhisperV270.encode(message.playerEntersWhisperV2, writer.uint32(450).fork()).ldelim();
    }
    if (message.playerSetsGoKartId !== undefined) {
      PlayerSetsGoKartId71.encode(message.playerSetsGoKartId, writer.uint32(458).fork()).ldelim();
    }
    if (message.mapSetDimensions !== undefined) {
      MapSetDimensions72.encode(message.mapSetDimensions, writer.uint32(466).fork()).ldelim();
    }
    if (message.mapSetCollisions !== undefined) {
      MapSetCollisions73.encode(message.mapSetCollisions, writer.uint32(474).fork()).ldelim();
    }
    if (message.mapSetBackgroundImagePath !== undefined) {
      MapSetBackgroundImagePath74.encode(message.mapSetBackgroundImagePath, writer.uint32(482).fork()).ldelim();
    }
    if (message.mapSetForegroundImagePath !== undefined) {
      MapSetForegroundImagePath75.encode(message.mapSetForegroundImagePath, writer.uint32(490).fork()).ldelim();
    }
    if (message.mapSetSprites !== undefined) {
      MapSetSprites76.encode(message.mapSetSprites, writer.uint32(498).fork()).ldelim();
    }
    if (message.mapSetSpaces !== undefined) {
      MapSetSpaces77.encode(message.mapSetSpaces, writer.uint32(506).fork()).ldelim();
    }
    if (message.mapSetSpawns !== undefined) {
      MapSetSpawns78.encode(message.mapSetSpawns, writer.uint32(514).fork()).ldelim();
    }
    if (message.mapSetPortals !== undefined) {
      MapSetPortals79.encode(message.mapSetPortals, writer.uint32(522).fork()).ldelim();
    }
    if (message.mapSetAnnouncer !== undefined) {
      MapSetAnnouncer80.encode(message.mapSetAnnouncer, writer.uint32(530).fork()).ldelim();
    }
    if (message.mapSetAssets !== undefined) {
      MapSetAssets81.encode(message.mapSetAssets, writer.uint32(554).fork()).ldelim();
    }
    if (message.mapSetObjects !== undefined) {
      MapSetObjects82.encode(message.mapSetObjects, writer.uint32(562).fork()).ldelim();
    }
    if (message.mapSetName !== undefined) {
      MapSetName83.encode(message.mapSetName, writer.uint32(570).fork()).ldelim();
    }
    if (message.mapSetMuteOnEntry !== undefined) {
      MapSetMuteOnEntry84.encode(message.mapSetMuteOnEntry, writer.uint32(586).fork()).ldelim();
    }
    if (message.mapSetUseDrawnBG !== undefined) {
      MapSetUseDrawnBG85.encode(message.mapSetUseDrawnBG, writer.uint32(594).fork()).ldelim();
    }
    if (message.mapSetWalls !== undefined) {
      MapSetWalls86.encode(message.mapSetWalls, writer.uint32(602).fork()).ldelim();
    }
    if (message.mapSetFloors !== undefined) {
      MapSetFloors87.encode(message.mapSetFloors, writer.uint32(610).fork()).ldelim();
    }
    if (message.mapSetAreas !== undefined) {
      MapSetAreas88.encode(message.mapSetAreas, writer.uint32(618).fork()).ldelim();
    }
    if (message.mapDeleteObject !== undefined) {
      MapDeleteObject89.encode(message.mapDeleteObject, writer.uint32(626).fork()).ldelim();
    }
    if (message.mapSetSpawn !== undefined) {
      MapSetSpawn90.encode(message.mapSetSpawn, writer.uint32(634).fork()).ldelim();
    }
    if (message.playerSetsIsAlone !== undefined) {
      PlayerSetsIsAlone91.encode(message.playerSetsIsAlone, writer.uint32(642).fork()).ldelim();
    }
    if (message.playerJoins !== undefined) {
      PlayerJoins92.encode(message.playerJoins, writer.uint32(650).fork()).ldelim();
    }
    if (message.mapSetEnabledChats !== undefined) {
      MapSetEnabledChats93.encode(message.mapSetEnabledChats, writer.uint32(658).fork()).ldelim();
    }
    if (message.mapSetDescription !== undefined) {
      MapSetDescription94.encode(message.mapSetDescription, writer.uint32(666).fork()).ldelim();
    }
    if (message.mapSetDecoration !== undefined) {
      MapSetDecoration95.encode(message.mapSetDecoration, writer.uint32(674).fork()).ldelim();
    }
    if (message.mapSetTutorialTasks !== undefined) {
      MapSetTutorialTasks96.encode(message.mapSetTutorialTasks, writer.uint32(682).fork()).ldelim();
    }
    if (message.mapSetMiniMapImagePath !== undefined) {
      MapSetMiniMapImagePath97.encode(message.mapSetMiniMapImagePath, writer.uint32(690).fork()).ldelim();
    }
    if (message.spacePlaysSound !== undefined) {
      SpacePlaysSound98.encode(message.spacePlaysSound, writer.uint32(698).fork()).ldelim();
    }
    if (message.mapSetScript !== undefined) {
      MapSetScript99.encode(message.mapSetScript, writer.uint32(706).fork()).ldelim();
    }
    if (message.playerSetsIsMobile !== undefined) {
      PlayerSetsIsMobile100.encode(message.playerSetsIsMobile, writer.uint32(722).fork()).ldelim();
    }
    if (message.setScreenPointerServer !== undefined) {
      SetScreenPointerServer101.encode(message.setScreenPointerServer, writer.uint32(730).fork()).ldelim();
    }
    if (message.playerSetsEmoteV2 !== undefined) {
      PlayerSetsEmoteV2102.encode(message.playerSetsEmoteV2, writer.uint32(738).fork()).ldelim();
    }
    if (message.playerSetsFocusModeEndTime !== undefined) {
      PlayerSetsFocusModeEndTime103.encode(message.playerSetsFocusModeEndTime, writer.uint32(746).fork()).ldelim();
    }
    if (message.spaceSetsSpaceMembers !== undefined) {
      SpaceSetsSpaceMembers104.encode(message.spaceSetsSpaceMembers, writer.uint32(754).fork()).ldelim();
    }
    if (message.customEvent !== undefined) {
      CustomEvent105.encode(message.customEvent, writer.uint32(762).fork()).ldelim();
    }
    if (message.playerBlocks !== undefined) {
      PlayerBlocks106.encode(message.playerBlocks, writer.uint32(778).fork()).ldelim();
    }
    if (message.playerUpdatesFocusModeStatus !== undefined) {
      PlayerUpdatesFocusModeStatus107.encode(message.playerUpdatesFocusModeStatus, writer.uint32(786).fork()).ldelim();
    }
    if (message.playerNotifies !== undefined) {
      PlayerNotifies108.encode(message.playerNotifies, writer.uint32(794).fork()).ldelim();
    }
    if (message.playerSetsItemString !== undefined) {
      PlayerSetsItemString109.encode(message.playerSetsItemString, writer.uint32(866).fork()).ldelim();
    }
    if (message.playerTriggersItem !== undefined) {
      PlayerTriggersItem110.encode(message.playerTriggersItem, writer.uint32(874).fork()).ldelim();
    }
    if (message.playerSetsFollowTarget !== undefined) {
      PlayerSetsFollowTarget111.encode(message.playerSetsFollowTarget, writer.uint32(882).fork()).ldelim();
    }
    if (message.playerRequestsToLead !== undefined) {
      PlayerRequestsToLead112.encode(message.playerRequestsToLead, writer.uint32(890).fork()).ldelim();
    }
    if (message.playerSetsManualVideoSrc !== undefined) {
      PlayerSetsManualVideoSrc113.encode(message.playerSetsManualVideoSrc, writer.uint32(898).fork()).ldelim();
    }
    if (message.playerSetsIsNpc !== undefined) {
      PlayerSetsIsNpc114.encode(message.playerSetsIsNpc, writer.uint32(906).fork()).ldelim();
    }
    if (message.playerSetsSubtitle !== undefined) {
      PlayerSetsSubtitle115.encode(message.playerSetsSubtitle, writer.uint32(914).fork()).ldelim();
    }
    if (message.mapCommitsChanges !== undefined) {
      MapCommitsChanges116.encode(message.mapCommitsChanges, writer.uint32(922).fork()).ldelim();
    }
    if (message.playerUpdatesSession !== undefined) {
      PlayerUpdatesSession117.encode(message.playerUpdatesSession, writer.uint32(930).fork()).ldelim();
    }
    if (message.mapMoveObject !== undefined) {
      MapMoveObject118.encode(message.mapMoveObject, writer.uint32(938).fork()).ldelim();
    }
    if (message.playerEditsChatMessage !== undefined) {
      PlayerEditsChatMessage119.encode(message.playerEditsChatMessage, writer.uint32(946).fork()).ldelim();
    }
    if (message.fxShakeObject !== undefined) {
      FXShakeObject120.encode(message.fxShakeObject, writer.uint32(954).fork()).ldelim();
    }
    if (message.fxShakeCamera !== undefined) {
      FXShakeCamera121.encode(message.fxShakeCamera, writer.uint32(962).fork()).ldelim();
    }
    if (message.playerSendsCommand !== undefined) {
      PlayerSendsCommand122.encode(message.playerSendsCommand, writer.uint32(970).fork()).ldelim();
    }
    if (message.spaceRegistersCommand !== undefined) {
      SpaceRegistersCommand123.encode(message.spaceRegistersCommand, writer.uint32(978).fork()).ldelim();
    }
    if (message.speakerUpdatesSession !== undefined) {
      SpeakerUpdatesSession124.encode(message.speakerUpdatesSession, writer.uint32(986).fork()).ldelim();
    }
    if (message.playerUpdatesInventory !== undefined) {
      PlayerUpdatesInventory125.encode(message.playerUpdatesInventory, writer.uint32(994).fork()).ldelim();
    }
    if (message.spaceUpdatesItems !== undefined) {
      SpaceUpdatesItems126.encode(message.spaceUpdatesItems, writer.uint32(1002).fork()).ldelim();
    }
    if (message.playerSetsVehicleId !== undefined) {
      PlayerSetsVehicleId127.encode(message.playerSetsVehicleId, writer.uint32(1010).fork()).ldelim();
    }
    if (message.playerSetsSpeedModifier !== undefined) {
      PlayerSetsSpeedModifier128.encode(message.playerSetsSpeedModifier, writer.uint32(1018).fork()).ldelim();
    }
    if (message.playerHighFives !== undefined) {
      PlayerHighFives129.encode(message.playerHighFives, writer.uint32(1026).fork()).ldelim();
    }
    if (message.spaceStopsSound !== undefined) {
      SpaceStopsSound130.encode(message.spaceStopsSound, writer.uint32(1042).fork()).ldelim();
    }
    if (message.hipToBeSquare !== undefined) {
      HipToBeSquare131.encode(message.hipToBeSquare, writer.uint32(1050).fork()).ldelim();
    }
    if (message.playerCrafts !== undefined) {
      PlayerCrafts132.encode(message.playerCrafts, writer.uint32(1058).fork()).ldelim();
    }
    if (message.playerTriggersInventoryItem !== undefined) {
      PlayerTriggersInventoryItem133.encode(message.playerTriggersInventoryItem, writer.uint32(1066).fork()).ldelim();
    }
    if (message.playerSetsAllowScreenPointer !== undefined) {
      PlayerSetsAllowScreenPointer134.encode(message.playerSetsAllowScreenPointer, writer.uint32(1074).fork()).ldelim();
    }
    if (message.precomputedEnterLocation !== undefined) {
      PrecomputedEnterLocation135.encode(message.precomputedEnterLocation, writer.uint32(1082).fork()).ldelim();
    }
    if (message.gotRequestMute !== undefined) {
      GotRequestMute136.encode(message.gotRequestMute, writer.uint32(1090).fork()).ldelim();
    }
    if (message.playerSetsDeskInfo !== undefined) {
      PlayerSetsDeskInfo137.encode(message.playerSetsDeskInfo, writer.uint32(1098).fork()).ldelim();
    }
    if (message.mapSetNooks !== undefined) {
      MapSetNooks138.encode(message.mapSetNooks, writer.uint32(1106).fork()).ldelim();
    }
    if (message.dynamicGates !== undefined) {
      DynamicGates139.encode(message.dynamicGates, writer.uint32(1114).fork()).ldelim();
    }
    if (message.playerWaves !== undefined) {
      PlayerWaves140.encode(message.playerWaves, writer.uint32(1122).fork()).ldelim();
    }
    if (message.playerSetsPronouns !== undefined) {
      PlayerSetsPronouns141.encode(message.playerSetsPronouns, writer.uint32(1130).fork()).ldelim();
    }
    if (message.playerSetsTitle !== undefined) {
      PlayerSetsTitle142.encode(message.playerSetsTitle, writer.uint32(1138).fork()).ldelim();
    }
    if (message.playerSetsTimezone !== undefined) {
      PlayerSetsTimezone143.encode(message.playerSetsTimezone, writer.uint32(1146).fork()).ldelim();
    }
    if (message.playerSetsDescription !== undefined) {
      PlayerSetsDescription144.encode(message.playerSetsDescription, writer.uint32(1154).fork()).ldelim();
    }
    if (message.playerSetsPhone !== undefined) {
      PlayerSetsPhone145.encode(message.playerSetsPhone, writer.uint32(1162).fork()).ldelim();
    }
    if (message.playerSetsPersonalImageUrl !== undefined) {
      PlayerSetsPersonalImageUrl146.encode(message.playerSetsPersonalImageUrl, writer.uint32(1170).fork()).ldelim();
    }
    if (message.playerSetsProfileImageUrl !== undefined) {
      PlayerSetsProfileImageUrl147.encode(message.playerSetsProfileImageUrl, writer.uint32(1178).fork()).ldelim();
    }
    if (message.spaceSetsCapacity !== undefined) {
      SpaceSetsCapacity148.encode(message.spaceSetsCapacity, writer.uint32(1186).fork()).ldelim();
    }
    if (message.spaceOverCapacityDeniesUser !== undefined) {
      SpaceOverCapacityDeniesUser149.encode(message.spaceOverCapacityDeniesUser, writer.uint32(1194).fork()).ldelim();
    }
    if (message.playerSetsAway !== undefined) {
      PlayerSetsAway150.encode(message.playerSetsAway, writer.uint32(1202).fork()).ldelim();
    }
    if (message.mapSetCollisionsBits !== undefined) {
      MapSetCollisionsBits151.encode(message.mapSetCollisionsBits, writer.uint32(1210).fork()).ldelim();
    }
    if (message.playerSetsCity !== undefined) {
      PlayerSetsCity152.encode(message.playerSetsCity, writer.uint32(1218).fork()).ldelim();
    }
    if (message.playerSetsCountry !== undefined) {
      PlayerSetsCountry153.encode(message.playerSetsCountry, writer.uint32(1226).fork()).ldelim();
    }
    if (message.playerSetsStartDate !== undefined) {
      PlayerSetsStartDate154.encode(message.playerSetsStartDate, writer.uint32(1234).fork()).ldelim();
    }
    if (message.playerStartsRecording !== undefined) {
      PlayerStartsRecording155.encode(message.playerStartsRecording, writer.uint32(1250).fork()).ldelim();
    }
    if (message.accessRequestsUpdated !== undefined) {
      AccessRequestsUpdated156.encode(message.accessRequestsUpdated, writer.uint32(1258).fork()).ldelim();
    }
    if (message.accessRequestRespondedTo !== undefined) {
      AccessRequestRespondedTo157.encode(message.accessRequestRespondedTo, writer.uint32(1266).fork()).ldelim();
    }
    if (message.spaceSetsGuestPassStatuses !== undefined) {
      SpaceSetsGuestPassStatuses158.encode(message.spaceSetsGuestPassStatuses, writer.uint32(1274).fork()).ldelim();
    }
    if (message.playerSetsAvailability !== undefined) {
      PlayerSetsAvailability159.encode(message.playerSetsAvailability, writer.uint32(1282).fork()).ldelim();
    }
    if (message.subscriptionsUpdated !== undefined) {
      SubscriptionsUpdated160.encode(message.subscriptionsUpdated, writer.uint32(1290).fork()).ldelim();
    }
    if (message.enterWithTeammatesLobbyStateUpdated !== undefined) {
      EnterWithTeammatesLobbyStateUpdated161.encode(
        message.enterWithTeammatesLobbyStateUpdated,
        writer.uint32(1298).fork(),
      ).ldelim();
    }
    if (message.enterWithTeammatesHostInitiatesEnterSpace !== undefined) {
      EnterWithTeammatesHostInitiatesEnterSpace162.encode(
        message.enterWithTeammatesHostInitiatesEnterSpace,
        writer.uint32(1306).fork(),
      ).ldelim();
    }
    if (message.spaceRolePermissionOverrideUpdated !== undefined) {
      SpaceRolePermissionOverrideUpdated163.encode(
        message.spaceRolePermissionOverrideUpdated,
        writer.uint32(1314).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerClientEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerClientEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100:
          if (tag != 802) {
            break;
          }

          message.info = Info33.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag != 810) {
            break;
          }

          message.warn = Warn34.decode(reader, reader.uint32());
          continue;
        case 102:
          if (tag != 818) {
            break;
          }

          message.error = ErrorEvent35.decode(reader, reader.uint32());
          continue;
        case 103:
          if (tag != 826) {
            break;
          }

          message.ready = Ready36.decode(reader, reader.uint32());
          continue;
        case 105:
          if (tag != 842) {
            break;
          }

          message.serverHeartbeat = ServerHeartbeat37.decode(reader, reader.uint32());
          continue;
        case 107:
          if (tag != 858) {
            break;
          }

          message.transactionStatus = TransactionStatus38.decode(reader, reader.uint32());
          continue;
        case 1:
          if (tag != 10) {
            break;
          }

          message.playerMoves = PlayerMoves39.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.playerSetsStatus = PlayerSetsStatus40.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.playerSpotlights = PlayerSpotlights41.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.playerRings = PlayerRings42.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.playerChats = PlayerChats43.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.playerInteracts = PlayerInteracts44.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.playerGhosts = PlayerGhosts45.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.playerEntersWhisper = PlayerEntersWhisper46.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.playerLeavesWhisper = PlayerLeavesWhisper47.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.playerActivelySpeaks = PlayerActivelySpeaks48.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.playerSetsWorkCondition = PlayerSetsWorkCondition49.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.playerSetsName = PlayerSetsName50.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.playerSetsTextStatus = PlayerSetsTextStatus51.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.playerSetsEmojiStatus = PlayerSetsEmojiStatus52.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.playerSetsAffiliation = PlayerSetsAffiliation53.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag != 170) {
            break;
          }

          message.playerExits = PlayerExits54.decode(reader, reader.uint32());
          continue;
        case 39:
          if (tag != 314) {
            break;
          }

          message.respawnComplete = RespawnComplete55.decode(reader, reader.uint32());
          continue;
        case 40:
          if (tag != 322) {
            break;
          }

          message.playerSetsOutfitString = PlayerSetsOutfitString56.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag != 330) {
            break;
          }

          message.playerSetsIsSignedIn = PlayerSetsIsSignedIn57.decode(reader, reader.uint32());
          continue;
        case 44:
          if (tag != 354) {
            break;
          }

          message.spaceOverwrites = SpaceOverwrites58.decode(reader, reader.uint32());
          continue;
        case 45:
          if (tag != 362) {
            break;
          }

          message.spaceIsClosed = SpaceIsClosed59.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag != 370) {
            break;
          }

          message.playerEntersPortal = PlayerEntersPortal60.decode(reader, reader.uint32());
          continue;
        case 47:
          if (tag != 378) {
            break;
          }

          message.spaceSetsIdMapping = SpaceSetsIdMapping61.decode(reader, reader.uint32());
          continue;
        case 48:
          if (tag != 386) {
            break;
          }

          message.playerSetsLastActive = PlayerSetsLastActive62.decode(reader, reader.uint32());
          continue;
        case 49:
          if (tag != 394) {
            break;
          }

          message.playerShootsConfetti = PlayerShootsConfetti63.decode(reader, reader.uint32());
          continue;
        case 50:
          if (tag != 402) {
            break;
          }

          message.playerSetsEventStatus = PlayerSetsEventStatus64.decode(reader, reader.uint32());
          continue;
        case 51:
          if (tag != 410) {
            break;
          }

          message.playerSetsInConversation = PlayerSetsInConversation65.decode(reader, reader.uint32());
          continue;
        case 52:
          if (tag != 418) {
            break;
          }

          message.playerSetsCurrentDesk = PlayerSetsCurrentDesk66.decode(reader, reader.uint32());
          continue;
        case 53:
          if (tag != 426) {
            break;
          }

          message.playerSetsCurrentArea = PlayerSetsCurrentArea67.decode(reader, reader.uint32());
          continue;
        case 54:
          if (tag != 434) {
            break;
          }

          message.playerSetsImagePointer = PlayerSetsImagePointer68.decode(reader, reader.uint32());
          continue;
        case 55:
          if (tag != 442) {
            break;
          }

          message.cookieFound = CookieFound69.decode(reader, reader.uint32());
          continue;
        case 56:
          if (tag != 450) {
            break;
          }

          message.playerEntersWhisperV2 = PlayerEntersWhisperV270.decode(reader, reader.uint32());
          continue;
        case 57:
          if (tag != 458) {
            break;
          }

          message.playerSetsGoKartId = PlayerSetsGoKartId71.decode(reader, reader.uint32());
          continue;
        case 58:
          if (tag != 466) {
            break;
          }

          message.mapSetDimensions = MapSetDimensions72.decode(reader, reader.uint32());
          continue;
        case 59:
          if (tag != 474) {
            break;
          }

          message.mapSetCollisions = MapSetCollisions73.decode(reader, reader.uint32());
          continue;
        case 60:
          if (tag != 482) {
            break;
          }

          message.mapSetBackgroundImagePath = MapSetBackgroundImagePath74.decode(reader, reader.uint32());
          continue;
        case 61:
          if (tag != 490) {
            break;
          }

          message.mapSetForegroundImagePath = MapSetForegroundImagePath75.decode(reader, reader.uint32());
          continue;
        case 62:
          if (tag != 498) {
            break;
          }

          message.mapSetSprites = MapSetSprites76.decode(reader, reader.uint32());
          continue;
        case 63:
          if (tag != 506) {
            break;
          }

          message.mapSetSpaces = MapSetSpaces77.decode(reader, reader.uint32());
          continue;
        case 64:
          if (tag != 514) {
            break;
          }

          message.mapSetSpawns = MapSetSpawns78.decode(reader, reader.uint32());
          continue;
        case 65:
          if (tag != 522) {
            break;
          }

          message.mapSetPortals = MapSetPortals79.decode(reader, reader.uint32());
          continue;
        case 66:
          if (tag != 530) {
            break;
          }

          message.mapSetAnnouncer = MapSetAnnouncer80.decode(reader, reader.uint32());
          continue;
        case 69:
          if (tag != 554) {
            break;
          }

          message.mapSetAssets = MapSetAssets81.decode(reader, reader.uint32());
          continue;
        case 70:
          if (tag != 562) {
            break;
          }

          message.mapSetObjects = MapSetObjects82.decode(reader, reader.uint32());
          continue;
        case 71:
          if (tag != 570) {
            break;
          }

          message.mapSetName = MapSetName83.decode(reader, reader.uint32());
          continue;
        case 73:
          if (tag != 586) {
            break;
          }

          message.mapSetMuteOnEntry = MapSetMuteOnEntry84.decode(reader, reader.uint32());
          continue;
        case 74:
          if (tag != 594) {
            break;
          }

          message.mapSetUseDrawnBG = MapSetUseDrawnBG85.decode(reader, reader.uint32());
          continue;
        case 75:
          if (tag != 602) {
            break;
          }

          message.mapSetWalls = MapSetWalls86.decode(reader, reader.uint32());
          continue;
        case 76:
          if (tag != 610) {
            break;
          }

          message.mapSetFloors = MapSetFloors87.decode(reader, reader.uint32());
          continue;
        case 77:
          if (tag != 618) {
            break;
          }

          message.mapSetAreas = MapSetAreas88.decode(reader, reader.uint32());
          continue;
        case 78:
          if (tag != 626) {
            break;
          }

          message.mapDeleteObject = MapDeleteObject89.decode(reader, reader.uint32());
          continue;
        case 79:
          if (tag != 634) {
            break;
          }

          message.mapSetSpawn = MapSetSpawn90.decode(reader, reader.uint32());
          continue;
        case 80:
          if (tag != 642) {
            break;
          }

          message.playerSetsIsAlone = PlayerSetsIsAlone91.decode(reader, reader.uint32());
          continue;
        case 81:
          if (tag != 650) {
            break;
          }

          message.playerJoins = PlayerJoins92.decode(reader, reader.uint32());
          continue;
        case 82:
          if (tag != 658) {
            break;
          }

          message.mapSetEnabledChats = MapSetEnabledChats93.decode(reader, reader.uint32());
          continue;
        case 83:
          if (tag != 666) {
            break;
          }

          message.mapSetDescription = MapSetDescription94.decode(reader, reader.uint32());
          continue;
        case 84:
          if (tag != 674) {
            break;
          }

          message.mapSetDecoration = MapSetDecoration95.decode(reader, reader.uint32());
          continue;
        case 85:
          if (tag != 682) {
            break;
          }

          message.mapSetTutorialTasks = MapSetTutorialTasks96.decode(reader, reader.uint32());
          continue;
        case 86:
          if (tag != 690) {
            break;
          }

          message.mapSetMiniMapImagePath = MapSetMiniMapImagePath97.decode(reader, reader.uint32());
          continue;
        case 87:
          if (tag != 698) {
            break;
          }

          message.spacePlaysSound = SpacePlaysSound98.decode(reader, reader.uint32());
          continue;
        case 88:
          if (tag != 706) {
            break;
          }

          message.mapSetScript = MapSetScript99.decode(reader, reader.uint32());
          continue;
        case 90:
          if (tag != 722) {
            break;
          }

          message.playerSetsIsMobile = PlayerSetsIsMobile100.decode(reader, reader.uint32());
          continue;
        case 91:
          if (tag != 730) {
            break;
          }

          message.setScreenPointerServer = SetScreenPointerServer101.decode(reader, reader.uint32());
          continue;
        case 92:
          if (tag != 738) {
            break;
          }

          message.playerSetsEmoteV2 = PlayerSetsEmoteV2102.decode(reader, reader.uint32());
          continue;
        case 93:
          if (tag != 746) {
            break;
          }

          message.playerSetsFocusModeEndTime = PlayerSetsFocusModeEndTime103.decode(reader, reader.uint32());
          continue;
        case 94:
          if (tag != 754) {
            break;
          }

          message.spaceSetsSpaceMembers = SpaceSetsSpaceMembers104.decode(reader, reader.uint32());
          continue;
        case 95:
          if (tag != 762) {
            break;
          }

          message.customEvent = CustomEvent105.decode(reader, reader.uint32());
          continue;
        case 97:
          if (tag != 778) {
            break;
          }

          message.playerBlocks = PlayerBlocks106.decode(reader, reader.uint32());
          continue;
        case 98:
          if (tag != 786) {
            break;
          }

          message.playerUpdatesFocusModeStatus = PlayerUpdatesFocusModeStatus107.decode(reader, reader.uint32());
          continue;
        case 99:
          if (tag != 794) {
            break;
          }

          message.playerNotifies = PlayerNotifies108.decode(reader, reader.uint32());
          continue;
        case 108:
          if (tag != 866) {
            break;
          }

          message.playerSetsItemString = PlayerSetsItemString109.decode(reader, reader.uint32());
          continue;
        case 109:
          if (tag != 874) {
            break;
          }

          message.playerTriggersItem = PlayerTriggersItem110.decode(reader, reader.uint32());
          continue;
        case 110:
          if (tag != 882) {
            break;
          }

          message.playerSetsFollowTarget = PlayerSetsFollowTarget111.decode(reader, reader.uint32());
          continue;
        case 111:
          if (tag != 890) {
            break;
          }

          message.playerRequestsToLead = PlayerRequestsToLead112.decode(reader, reader.uint32());
          continue;
        case 112:
          if (tag != 898) {
            break;
          }

          message.playerSetsManualVideoSrc = PlayerSetsManualVideoSrc113.decode(reader, reader.uint32());
          continue;
        case 113:
          if (tag != 906) {
            break;
          }

          message.playerSetsIsNpc = PlayerSetsIsNpc114.decode(reader, reader.uint32());
          continue;
        case 114:
          if (tag != 914) {
            break;
          }

          message.playerSetsSubtitle = PlayerSetsSubtitle115.decode(reader, reader.uint32());
          continue;
        case 115:
          if (tag != 922) {
            break;
          }

          message.mapCommitsChanges = MapCommitsChanges116.decode(reader, reader.uint32());
          continue;
        case 116:
          if (tag != 930) {
            break;
          }

          message.playerUpdatesSession = PlayerUpdatesSession117.decode(reader, reader.uint32());
          continue;
        case 117:
          if (tag != 938) {
            break;
          }

          message.mapMoveObject = MapMoveObject118.decode(reader, reader.uint32());
          continue;
        case 118:
          if (tag != 946) {
            break;
          }

          message.playerEditsChatMessage = PlayerEditsChatMessage119.decode(reader, reader.uint32());
          continue;
        case 119:
          if (tag != 954) {
            break;
          }

          message.fxShakeObject = FXShakeObject120.decode(reader, reader.uint32());
          continue;
        case 120:
          if (tag != 962) {
            break;
          }

          message.fxShakeCamera = FXShakeCamera121.decode(reader, reader.uint32());
          continue;
        case 121:
          if (tag != 970) {
            break;
          }

          message.playerSendsCommand = PlayerSendsCommand122.decode(reader, reader.uint32());
          continue;
        case 122:
          if (tag != 978) {
            break;
          }

          message.spaceRegistersCommand = SpaceRegistersCommand123.decode(reader, reader.uint32());
          continue;
        case 123:
          if (tag != 986) {
            break;
          }

          message.speakerUpdatesSession = SpeakerUpdatesSession124.decode(reader, reader.uint32());
          continue;
        case 124:
          if (tag != 994) {
            break;
          }

          message.playerUpdatesInventory = PlayerUpdatesInventory125.decode(reader, reader.uint32());
          continue;
        case 125:
          if (tag != 1002) {
            break;
          }

          message.spaceUpdatesItems = SpaceUpdatesItems126.decode(reader, reader.uint32());
          continue;
        case 126:
          if (tag != 1010) {
            break;
          }

          message.playerSetsVehicleId = PlayerSetsVehicleId127.decode(reader, reader.uint32());
          continue;
        case 127:
          if (tag != 1018) {
            break;
          }

          message.playerSetsSpeedModifier = PlayerSetsSpeedModifier128.decode(reader, reader.uint32());
          continue;
        case 128:
          if (tag != 1026) {
            break;
          }

          message.playerHighFives = PlayerHighFives129.decode(reader, reader.uint32());
          continue;
        case 130:
          if (tag != 1042) {
            break;
          }

          message.spaceStopsSound = SpaceStopsSound130.decode(reader, reader.uint32());
          continue;
        case 131:
          if (tag != 1050) {
            break;
          }

          message.hipToBeSquare = HipToBeSquare131.decode(reader, reader.uint32());
          continue;
        case 132:
          if (tag != 1058) {
            break;
          }

          message.playerCrafts = PlayerCrafts132.decode(reader, reader.uint32());
          continue;
        case 133:
          if (tag != 1066) {
            break;
          }

          message.playerTriggersInventoryItem = PlayerTriggersInventoryItem133.decode(reader, reader.uint32());
          continue;
        case 134:
          if (tag != 1074) {
            break;
          }

          message.playerSetsAllowScreenPointer = PlayerSetsAllowScreenPointer134.decode(reader, reader.uint32());
          continue;
        case 135:
          if (tag != 1082) {
            break;
          }

          message.precomputedEnterLocation = PrecomputedEnterLocation135.decode(reader, reader.uint32());
          continue;
        case 136:
          if (tag != 1090) {
            break;
          }

          message.gotRequestMute = GotRequestMute136.decode(reader, reader.uint32());
          continue;
        case 137:
          if (tag != 1098) {
            break;
          }

          message.playerSetsDeskInfo = PlayerSetsDeskInfo137.decode(reader, reader.uint32());
          continue;
        case 138:
          if (tag != 1106) {
            break;
          }

          message.mapSetNooks = MapSetNooks138.decode(reader, reader.uint32());
          continue;
        case 139:
          if (tag != 1114) {
            break;
          }

          message.dynamicGates = DynamicGates139.decode(reader, reader.uint32());
          continue;
        case 140:
          if (tag != 1122) {
            break;
          }

          message.playerWaves = PlayerWaves140.decode(reader, reader.uint32());
          continue;
        case 141:
          if (tag != 1130) {
            break;
          }

          message.playerSetsPronouns = PlayerSetsPronouns141.decode(reader, reader.uint32());
          continue;
        case 142:
          if (tag != 1138) {
            break;
          }

          message.playerSetsTitle = PlayerSetsTitle142.decode(reader, reader.uint32());
          continue;
        case 143:
          if (tag != 1146) {
            break;
          }

          message.playerSetsTimezone = PlayerSetsTimezone143.decode(reader, reader.uint32());
          continue;
        case 144:
          if (tag != 1154) {
            break;
          }

          message.playerSetsDescription = PlayerSetsDescription144.decode(reader, reader.uint32());
          continue;
        case 145:
          if (tag != 1162) {
            break;
          }

          message.playerSetsPhone = PlayerSetsPhone145.decode(reader, reader.uint32());
          continue;
        case 146:
          if (tag != 1170) {
            break;
          }

          message.playerSetsPersonalImageUrl = PlayerSetsPersonalImageUrl146.decode(reader, reader.uint32());
          continue;
        case 147:
          if (tag != 1178) {
            break;
          }

          message.playerSetsProfileImageUrl = PlayerSetsProfileImageUrl147.decode(reader, reader.uint32());
          continue;
        case 148:
          if (tag != 1186) {
            break;
          }

          message.spaceSetsCapacity = SpaceSetsCapacity148.decode(reader, reader.uint32());
          continue;
        case 149:
          if (tag != 1194) {
            break;
          }

          message.spaceOverCapacityDeniesUser = SpaceOverCapacityDeniesUser149.decode(reader, reader.uint32());
          continue;
        case 150:
          if (tag != 1202) {
            break;
          }

          message.playerSetsAway = PlayerSetsAway150.decode(reader, reader.uint32());
          continue;
        case 151:
          if (tag != 1210) {
            break;
          }

          message.mapSetCollisionsBits = MapSetCollisionsBits151.decode(reader, reader.uint32());
          continue;
        case 152:
          if (tag != 1218) {
            break;
          }

          message.playerSetsCity = PlayerSetsCity152.decode(reader, reader.uint32());
          continue;
        case 153:
          if (tag != 1226) {
            break;
          }

          message.playerSetsCountry = PlayerSetsCountry153.decode(reader, reader.uint32());
          continue;
        case 154:
          if (tag != 1234) {
            break;
          }

          message.playerSetsStartDate = PlayerSetsStartDate154.decode(reader, reader.uint32());
          continue;
        case 156:
          if (tag != 1250) {
            break;
          }

          message.playerStartsRecording = PlayerStartsRecording155.decode(reader, reader.uint32());
          continue;
        case 157:
          if (tag != 1258) {
            break;
          }

          message.accessRequestsUpdated = AccessRequestsUpdated156.decode(reader, reader.uint32());
          continue;
        case 158:
          if (tag != 1266) {
            break;
          }

          message.accessRequestRespondedTo = AccessRequestRespondedTo157.decode(reader, reader.uint32());
          continue;
        case 159:
          if (tag != 1274) {
            break;
          }

          message.spaceSetsGuestPassStatuses = SpaceSetsGuestPassStatuses158.decode(reader, reader.uint32());
          continue;
        case 160:
          if (tag != 1282) {
            break;
          }

          message.playerSetsAvailability = PlayerSetsAvailability159.decode(reader, reader.uint32());
          continue;
        case 161:
          if (tag != 1290) {
            break;
          }

          message.subscriptionsUpdated = SubscriptionsUpdated160.decode(reader, reader.uint32());
          continue;
        case 162:
          if (tag != 1298) {
            break;
          }

          message.enterWithTeammatesLobbyStateUpdated = EnterWithTeammatesLobbyStateUpdated161.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 163:
          if (tag != 1306) {
            break;
          }

          message.enterWithTeammatesHostInitiatesEnterSpace = EnterWithTeammatesHostInitiatesEnterSpace162.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 164:
          if (tag != 1314) {
            break;
          }

          message.spaceRolePermissionOverrideUpdated = SpaceRolePermissionOverrideUpdated163.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerClientEvent {
    return {
      info: isSet(object.info) ? Info33.fromJSON(object.info) : undefined,
      warn: isSet(object.warn) ? Warn34.fromJSON(object.warn) : undefined,
      error: isSet(object.error) ? ErrorEvent35.fromJSON(object.error) : undefined,
      ready: isSet(object.ready) ? Ready36.fromJSON(object.ready) : undefined,
      serverHeartbeat: isSet(object.serverHeartbeat) ? ServerHeartbeat37.fromJSON(object.serverHeartbeat) : undefined,
      transactionStatus: isSet(object.transactionStatus)
        ? TransactionStatus38.fromJSON(object.transactionStatus)
        : undefined,
      playerMoves: isSet(object.playerMoves) ? PlayerMoves39.fromJSON(object.playerMoves) : undefined,
      playerSetsStatus: isSet(object.playerSetsStatus)
        ? PlayerSetsStatus40.fromJSON(object.playerSetsStatus)
        : undefined,
      playerSpotlights: isSet(object.playerSpotlights)
        ? PlayerSpotlights41.fromJSON(object.playerSpotlights)
        : undefined,
      playerRings: isSet(object.playerRings) ? PlayerRings42.fromJSON(object.playerRings) : undefined,
      playerChats: isSet(object.playerChats) ? PlayerChats43.fromJSON(object.playerChats) : undefined,
      playerInteracts: isSet(object.playerInteracts) ? PlayerInteracts44.fromJSON(object.playerInteracts) : undefined,
      playerGhosts: isSet(object.playerGhosts) ? PlayerGhosts45.fromJSON(object.playerGhosts) : undefined,
      playerEntersWhisper: isSet(object.playerEntersWhisper)
        ? PlayerEntersWhisper46.fromJSON(object.playerEntersWhisper)
        : undefined,
      playerLeavesWhisper: isSet(object.playerLeavesWhisper)
        ? PlayerLeavesWhisper47.fromJSON(object.playerLeavesWhisper)
        : undefined,
      playerActivelySpeaks: isSet(object.playerActivelySpeaks)
        ? PlayerActivelySpeaks48.fromJSON(object.playerActivelySpeaks)
        : undefined,
      playerSetsWorkCondition: isSet(object.playerSetsWorkCondition)
        ? PlayerSetsWorkCondition49.fromJSON(object.playerSetsWorkCondition)
        : undefined,
      playerSetsName: isSet(object.playerSetsName) ? PlayerSetsName50.fromJSON(object.playerSetsName) : undefined,
      playerSetsTextStatus: isSet(object.playerSetsTextStatus)
        ? PlayerSetsTextStatus51.fromJSON(object.playerSetsTextStatus)
        : undefined,
      playerSetsEmojiStatus: isSet(object.playerSetsEmojiStatus)
        ? PlayerSetsEmojiStatus52.fromJSON(object.playerSetsEmojiStatus)
        : undefined,
      playerSetsAffiliation: isSet(object.playerSetsAffiliation)
        ? PlayerSetsAffiliation53.fromJSON(object.playerSetsAffiliation)
        : undefined,
      playerExits: isSet(object.playerExits) ? PlayerExits54.fromJSON(object.playerExits) : undefined,
      respawnComplete: isSet(object.respawnComplete) ? RespawnComplete55.fromJSON(object.respawnComplete) : undefined,
      playerSetsOutfitString: isSet(object.playerSetsOutfitString)
        ? PlayerSetsOutfitString56.fromJSON(object.playerSetsOutfitString)
        : undefined,
      playerSetsIsSignedIn: isSet(object.playerSetsIsSignedIn)
        ? PlayerSetsIsSignedIn57.fromJSON(object.playerSetsIsSignedIn)
        : undefined,
      spaceOverwrites: isSet(object.spaceOverwrites) ? SpaceOverwrites58.fromJSON(object.spaceOverwrites) : undefined,
      spaceIsClosed: isSet(object.spaceIsClosed) ? SpaceIsClosed59.fromJSON(object.spaceIsClosed) : undefined,
      playerEntersPortal: isSet(object.playerEntersPortal)
        ? PlayerEntersPortal60.fromJSON(object.playerEntersPortal)
        : undefined,
      spaceSetsIdMapping: isSet(object.spaceSetsIdMapping)
        ? SpaceSetsIdMapping61.fromJSON(object.spaceSetsIdMapping)
        : undefined,
      playerSetsLastActive: isSet(object.playerSetsLastActive)
        ? PlayerSetsLastActive62.fromJSON(object.playerSetsLastActive)
        : undefined,
      playerShootsConfetti: isSet(object.playerShootsConfetti)
        ? PlayerShootsConfetti63.fromJSON(object.playerShootsConfetti)
        : undefined,
      playerSetsEventStatus: isSet(object.playerSetsEventStatus)
        ? PlayerSetsEventStatus64.fromJSON(object.playerSetsEventStatus)
        : undefined,
      playerSetsInConversation: isSet(object.playerSetsInConversation)
        ? PlayerSetsInConversation65.fromJSON(object.playerSetsInConversation)
        : undefined,
      playerSetsCurrentDesk: isSet(object.playerSetsCurrentDesk)
        ? PlayerSetsCurrentDesk66.fromJSON(object.playerSetsCurrentDesk)
        : undefined,
      playerSetsCurrentArea: isSet(object.playerSetsCurrentArea)
        ? PlayerSetsCurrentArea67.fromJSON(object.playerSetsCurrentArea)
        : undefined,
      playerSetsImagePointer: isSet(object.playerSetsImagePointer)
        ? PlayerSetsImagePointer68.fromJSON(object.playerSetsImagePointer)
        : undefined,
      cookieFound: isSet(object.cookieFound) ? CookieFound69.fromJSON(object.cookieFound) : undefined,
      playerEntersWhisperV2: isSet(object.playerEntersWhisperV2)
        ? PlayerEntersWhisperV270.fromJSON(object.playerEntersWhisperV2)
        : undefined,
      playerSetsGoKartId: isSet(object.playerSetsGoKartId)
        ? PlayerSetsGoKartId71.fromJSON(object.playerSetsGoKartId)
        : undefined,
      mapSetDimensions: isSet(object.mapSetDimensions)
        ? MapSetDimensions72.fromJSON(object.mapSetDimensions)
        : undefined,
      mapSetCollisions: isSet(object.mapSetCollisions)
        ? MapSetCollisions73.fromJSON(object.mapSetCollisions)
        : undefined,
      mapSetBackgroundImagePath: isSet(object.mapSetBackgroundImagePath)
        ? MapSetBackgroundImagePath74.fromJSON(object.mapSetBackgroundImagePath)
        : undefined,
      mapSetForegroundImagePath: isSet(object.mapSetForegroundImagePath)
        ? MapSetForegroundImagePath75.fromJSON(object.mapSetForegroundImagePath)
        : undefined,
      mapSetSprites: isSet(object.mapSetSprites) ? MapSetSprites76.fromJSON(object.mapSetSprites) : undefined,
      mapSetSpaces: isSet(object.mapSetSpaces) ? MapSetSpaces77.fromJSON(object.mapSetSpaces) : undefined,
      mapSetSpawns: isSet(object.mapSetSpawns) ? MapSetSpawns78.fromJSON(object.mapSetSpawns) : undefined,
      mapSetPortals: isSet(object.mapSetPortals) ? MapSetPortals79.fromJSON(object.mapSetPortals) : undefined,
      mapSetAnnouncer: isSet(object.mapSetAnnouncer) ? MapSetAnnouncer80.fromJSON(object.mapSetAnnouncer) : undefined,
      mapSetAssets: isSet(object.mapSetAssets) ? MapSetAssets81.fromJSON(object.mapSetAssets) : undefined,
      mapSetObjects: isSet(object.mapSetObjects) ? MapSetObjects82.fromJSON(object.mapSetObjects) : undefined,
      mapSetName: isSet(object.mapSetName) ? MapSetName83.fromJSON(object.mapSetName) : undefined,
      mapSetMuteOnEntry: isSet(object.mapSetMuteOnEntry)
        ? MapSetMuteOnEntry84.fromJSON(object.mapSetMuteOnEntry)
        : undefined,
      mapSetUseDrawnBG: isSet(object.mapSetUseDrawnBG)
        ? MapSetUseDrawnBG85.fromJSON(object.mapSetUseDrawnBG)
        : undefined,
      mapSetWalls: isSet(object.mapSetWalls) ? MapSetWalls86.fromJSON(object.mapSetWalls) : undefined,
      mapSetFloors: isSet(object.mapSetFloors) ? MapSetFloors87.fromJSON(object.mapSetFloors) : undefined,
      mapSetAreas: isSet(object.mapSetAreas) ? MapSetAreas88.fromJSON(object.mapSetAreas) : undefined,
      mapDeleteObject: isSet(object.mapDeleteObject) ? MapDeleteObject89.fromJSON(object.mapDeleteObject) : undefined,
      mapSetSpawn: isSet(object.mapSetSpawn) ? MapSetSpawn90.fromJSON(object.mapSetSpawn) : undefined,
      playerSetsIsAlone: isSet(object.playerSetsIsAlone)
        ? PlayerSetsIsAlone91.fromJSON(object.playerSetsIsAlone)
        : undefined,
      playerJoins: isSet(object.playerJoins) ? PlayerJoins92.fromJSON(object.playerJoins) : undefined,
      mapSetEnabledChats: isSet(object.mapSetEnabledChats)
        ? MapSetEnabledChats93.fromJSON(object.mapSetEnabledChats)
        : undefined,
      mapSetDescription: isSet(object.mapSetDescription)
        ? MapSetDescription94.fromJSON(object.mapSetDescription)
        : undefined,
      mapSetDecoration: isSet(object.mapSetDecoration)
        ? MapSetDecoration95.fromJSON(object.mapSetDecoration)
        : undefined,
      mapSetTutorialTasks: isSet(object.mapSetTutorialTasks)
        ? MapSetTutorialTasks96.fromJSON(object.mapSetTutorialTasks)
        : undefined,
      mapSetMiniMapImagePath: isSet(object.mapSetMiniMapImagePath)
        ? MapSetMiniMapImagePath97.fromJSON(object.mapSetMiniMapImagePath)
        : undefined,
      spacePlaysSound: isSet(object.spacePlaysSound) ? SpacePlaysSound98.fromJSON(object.spacePlaysSound) : undefined,
      mapSetScript: isSet(object.mapSetScript) ? MapSetScript99.fromJSON(object.mapSetScript) : undefined,
      playerSetsIsMobile: isSet(object.playerSetsIsMobile)
        ? PlayerSetsIsMobile100.fromJSON(object.playerSetsIsMobile)
        : undefined,
      setScreenPointerServer: isSet(object.setScreenPointerServer)
        ? SetScreenPointerServer101.fromJSON(object.setScreenPointerServer)
        : undefined,
      playerSetsEmoteV2: isSet(object.playerSetsEmoteV2)
        ? PlayerSetsEmoteV2102.fromJSON(object.playerSetsEmoteV2)
        : undefined,
      playerSetsFocusModeEndTime: isSet(object.playerSetsFocusModeEndTime)
        ? PlayerSetsFocusModeEndTime103.fromJSON(object.playerSetsFocusModeEndTime)
        : undefined,
      spaceSetsSpaceMembers: isSet(object.spaceSetsSpaceMembers)
        ? SpaceSetsSpaceMembers104.fromJSON(object.spaceSetsSpaceMembers)
        : undefined,
      customEvent: isSet(object.customEvent) ? CustomEvent105.fromJSON(object.customEvent) : undefined,
      playerBlocks: isSet(object.playerBlocks) ? PlayerBlocks106.fromJSON(object.playerBlocks) : undefined,
      playerUpdatesFocusModeStatus: isSet(object.playerUpdatesFocusModeStatus)
        ? PlayerUpdatesFocusModeStatus107.fromJSON(object.playerUpdatesFocusModeStatus)
        : undefined,
      playerNotifies: isSet(object.playerNotifies) ? PlayerNotifies108.fromJSON(object.playerNotifies) : undefined,
      playerSetsItemString: isSet(object.playerSetsItemString)
        ? PlayerSetsItemString109.fromJSON(object.playerSetsItemString)
        : undefined,
      playerTriggersItem: isSet(object.playerTriggersItem)
        ? PlayerTriggersItem110.fromJSON(object.playerTriggersItem)
        : undefined,
      playerSetsFollowTarget: isSet(object.playerSetsFollowTarget)
        ? PlayerSetsFollowTarget111.fromJSON(object.playerSetsFollowTarget)
        : undefined,
      playerRequestsToLead: isSet(object.playerRequestsToLead)
        ? PlayerRequestsToLead112.fromJSON(object.playerRequestsToLead)
        : undefined,
      playerSetsManualVideoSrc: isSet(object.playerSetsManualVideoSrc)
        ? PlayerSetsManualVideoSrc113.fromJSON(object.playerSetsManualVideoSrc)
        : undefined,
      playerSetsIsNpc: isSet(object.playerSetsIsNpc) ? PlayerSetsIsNpc114.fromJSON(object.playerSetsIsNpc) : undefined,
      playerSetsSubtitle: isSet(object.playerSetsSubtitle)
        ? PlayerSetsSubtitle115.fromJSON(object.playerSetsSubtitle)
        : undefined,
      mapCommitsChanges: isSet(object.mapCommitsChanges)
        ? MapCommitsChanges116.fromJSON(object.mapCommitsChanges)
        : undefined,
      playerUpdatesSession: isSet(object.playerUpdatesSession)
        ? PlayerUpdatesSession117.fromJSON(object.playerUpdatesSession)
        : undefined,
      mapMoveObject: isSet(object.mapMoveObject) ? MapMoveObject118.fromJSON(object.mapMoveObject) : undefined,
      playerEditsChatMessage: isSet(object.playerEditsChatMessage)
        ? PlayerEditsChatMessage119.fromJSON(object.playerEditsChatMessage)
        : undefined,
      fxShakeObject: isSet(object.fxShakeObject) ? FXShakeObject120.fromJSON(object.fxShakeObject) : undefined,
      fxShakeCamera: isSet(object.fxShakeCamera) ? FXShakeCamera121.fromJSON(object.fxShakeCamera) : undefined,
      playerSendsCommand: isSet(object.playerSendsCommand)
        ? PlayerSendsCommand122.fromJSON(object.playerSendsCommand)
        : undefined,
      spaceRegistersCommand: isSet(object.spaceRegistersCommand)
        ? SpaceRegistersCommand123.fromJSON(object.spaceRegistersCommand)
        : undefined,
      speakerUpdatesSession: isSet(object.speakerUpdatesSession)
        ? SpeakerUpdatesSession124.fromJSON(object.speakerUpdatesSession)
        : undefined,
      playerUpdatesInventory: isSet(object.playerUpdatesInventory)
        ? PlayerUpdatesInventory125.fromJSON(object.playerUpdatesInventory)
        : undefined,
      spaceUpdatesItems: isSet(object.spaceUpdatesItems)
        ? SpaceUpdatesItems126.fromJSON(object.spaceUpdatesItems)
        : undefined,
      playerSetsVehicleId: isSet(object.playerSetsVehicleId)
        ? PlayerSetsVehicleId127.fromJSON(object.playerSetsVehicleId)
        : undefined,
      playerSetsSpeedModifier: isSet(object.playerSetsSpeedModifier)
        ? PlayerSetsSpeedModifier128.fromJSON(object.playerSetsSpeedModifier)
        : undefined,
      playerHighFives: isSet(object.playerHighFives) ? PlayerHighFives129.fromJSON(object.playerHighFives) : undefined,
      spaceStopsSound: isSet(object.spaceStopsSound) ? SpaceStopsSound130.fromJSON(object.spaceStopsSound) : undefined,
      hipToBeSquare: isSet(object.hipToBeSquare) ? HipToBeSquare131.fromJSON(object.hipToBeSquare) : undefined,
      playerCrafts: isSet(object.playerCrafts) ? PlayerCrafts132.fromJSON(object.playerCrafts) : undefined,
      playerTriggersInventoryItem: isSet(object.playerTriggersInventoryItem)
        ? PlayerTriggersInventoryItem133.fromJSON(object.playerTriggersInventoryItem)
        : undefined,
      playerSetsAllowScreenPointer: isSet(object.playerSetsAllowScreenPointer)
        ? PlayerSetsAllowScreenPointer134.fromJSON(object.playerSetsAllowScreenPointer)
        : undefined,
      precomputedEnterLocation: isSet(object.precomputedEnterLocation)
        ? PrecomputedEnterLocation135.fromJSON(object.precomputedEnterLocation)
        : undefined,
      gotRequestMute: isSet(object.gotRequestMute) ? GotRequestMute136.fromJSON(object.gotRequestMute) : undefined,
      playerSetsDeskInfo: isSet(object.playerSetsDeskInfo)
        ? PlayerSetsDeskInfo137.fromJSON(object.playerSetsDeskInfo)
        : undefined,
      mapSetNooks: isSet(object.mapSetNooks) ? MapSetNooks138.fromJSON(object.mapSetNooks) : undefined,
      dynamicGates: isSet(object.dynamicGates) ? DynamicGates139.fromJSON(object.dynamicGates) : undefined,
      playerWaves: isSet(object.playerWaves) ? PlayerWaves140.fromJSON(object.playerWaves) : undefined,
      playerSetsPronouns: isSet(object.playerSetsPronouns)
        ? PlayerSetsPronouns141.fromJSON(object.playerSetsPronouns)
        : undefined,
      playerSetsTitle: isSet(object.playerSetsTitle) ? PlayerSetsTitle142.fromJSON(object.playerSetsTitle) : undefined,
      playerSetsTimezone: isSet(object.playerSetsTimezone)
        ? PlayerSetsTimezone143.fromJSON(object.playerSetsTimezone)
        : undefined,
      playerSetsDescription: isSet(object.playerSetsDescription)
        ? PlayerSetsDescription144.fromJSON(object.playerSetsDescription)
        : undefined,
      playerSetsPhone: isSet(object.playerSetsPhone) ? PlayerSetsPhone145.fromJSON(object.playerSetsPhone) : undefined,
      playerSetsPersonalImageUrl: isSet(object.playerSetsPersonalImageUrl)
        ? PlayerSetsPersonalImageUrl146.fromJSON(object.playerSetsPersonalImageUrl)
        : undefined,
      playerSetsProfileImageUrl: isSet(object.playerSetsProfileImageUrl)
        ? PlayerSetsProfileImageUrl147.fromJSON(object.playerSetsProfileImageUrl)
        : undefined,
      spaceSetsCapacity: isSet(object.spaceSetsCapacity)
        ? SpaceSetsCapacity148.fromJSON(object.spaceSetsCapacity)
        : undefined,
      spaceOverCapacityDeniesUser: isSet(object.spaceOverCapacityDeniesUser)
        ? SpaceOverCapacityDeniesUser149.fromJSON(object.spaceOverCapacityDeniesUser)
        : undefined,
      playerSetsAway: isSet(object.playerSetsAway) ? PlayerSetsAway150.fromJSON(object.playerSetsAway) : undefined,
      mapSetCollisionsBits: isSet(object.mapSetCollisionsBits)
        ? MapSetCollisionsBits151.fromJSON(object.mapSetCollisionsBits)
        : undefined,
      playerSetsCity: isSet(object.playerSetsCity) ? PlayerSetsCity152.fromJSON(object.playerSetsCity) : undefined,
      playerSetsCountry: isSet(object.playerSetsCountry)
        ? PlayerSetsCountry153.fromJSON(object.playerSetsCountry)
        : undefined,
      playerSetsStartDate: isSet(object.playerSetsStartDate)
        ? PlayerSetsStartDate154.fromJSON(object.playerSetsStartDate)
        : undefined,
      playerStartsRecording: isSet(object.playerStartsRecording)
        ? PlayerStartsRecording155.fromJSON(object.playerStartsRecording)
        : undefined,
      accessRequestsUpdated: isSet(object.accessRequestsUpdated)
        ? AccessRequestsUpdated156.fromJSON(object.accessRequestsUpdated)
        : undefined,
      accessRequestRespondedTo: isSet(object.accessRequestRespondedTo)
        ? AccessRequestRespondedTo157.fromJSON(object.accessRequestRespondedTo)
        : undefined,
      spaceSetsGuestPassStatuses: isSet(object.spaceSetsGuestPassStatuses)
        ? SpaceSetsGuestPassStatuses158.fromJSON(object.spaceSetsGuestPassStatuses)
        : undefined,
      playerSetsAvailability: isSet(object.playerSetsAvailability)
        ? PlayerSetsAvailability159.fromJSON(object.playerSetsAvailability)
        : undefined,
      subscriptionsUpdated: isSet(object.subscriptionsUpdated)
        ? SubscriptionsUpdated160.fromJSON(object.subscriptionsUpdated)
        : undefined,
      enterWithTeammatesLobbyStateUpdated: isSet(object.enterWithTeammatesLobbyStateUpdated)
        ? EnterWithTeammatesLobbyStateUpdated161.fromJSON(object.enterWithTeammatesLobbyStateUpdated)
        : undefined,
      enterWithTeammatesHostInitiatesEnterSpace: isSet(object.enterWithTeammatesHostInitiatesEnterSpace)
        ? EnterWithTeammatesHostInitiatesEnterSpace162.fromJSON(object.enterWithTeammatesHostInitiatesEnterSpace)
        : undefined,
      spaceRolePermissionOverrideUpdated: isSet(object.spaceRolePermissionOverrideUpdated)
        ? SpaceRolePermissionOverrideUpdated163.fromJSON(object.spaceRolePermissionOverrideUpdated)
        : undefined,
    };
  },

  toJSON(message: ServerClientEvent): unknown {
    const obj: any = {};
    message.info !== undefined && (obj.info = message.info ? Info33.toJSON(message.info) : undefined);
    message.warn !== undefined && (obj.warn = message.warn ? Warn34.toJSON(message.warn) : undefined);
    message.error !== undefined && (obj.error = message.error ? ErrorEvent35.toJSON(message.error) : undefined);
    message.ready !== undefined && (obj.ready = message.ready ? Ready36.toJSON(message.ready) : undefined);
    message.serverHeartbeat !== undefined &&
      (obj.serverHeartbeat = message.serverHeartbeat ? ServerHeartbeat37.toJSON(message.serverHeartbeat) : undefined);
    message.transactionStatus !== undefined && (obj.transactionStatus = message.transactionStatus
      ? TransactionStatus38.toJSON(message.transactionStatus)
      : undefined);
    message.playerMoves !== undefined &&
      (obj.playerMoves = message.playerMoves ? PlayerMoves39.toJSON(message.playerMoves) : undefined);
    message.playerSetsStatus !== undefined &&
      (obj.playerSetsStatus = message.playerSetsStatus
        ? PlayerSetsStatus40.toJSON(message.playerSetsStatus)
        : undefined);
    message.playerSpotlights !== undefined &&
      (obj.playerSpotlights = message.playerSpotlights
        ? PlayerSpotlights41.toJSON(message.playerSpotlights)
        : undefined);
    message.playerRings !== undefined &&
      (obj.playerRings = message.playerRings ? PlayerRings42.toJSON(message.playerRings) : undefined);
    message.playerChats !== undefined &&
      (obj.playerChats = message.playerChats ? PlayerChats43.toJSON(message.playerChats) : undefined);
    message.playerInteracts !== undefined &&
      (obj.playerInteracts = message.playerInteracts ? PlayerInteracts44.toJSON(message.playerInteracts) : undefined);
    message.playerGhosts !== undefined &&
      (obj.playerGhosts = message.playerGhosts ? PlayerGhosts45.toJSON(message.playerGhosts) : undefined);
    message.playerEntersWhisper !== undefined && (obj.playerEntersWhisper = message.playerEntersWhisper
      ? PlayerEntersWhisper46.toJSON(message.playerEntersWhisper)
      : undefined);
    message.playerLeavesWhisper !== undefined && (obj.playerLeavesWhisper = message.playerLeavesWhisper
      ? PlayerLeavesWhisper47.toJSON(message.playerLeavesWhisper)
      : undefined);
    message.playerActivelySpeaks !== undefined && (obj.playerActivelySpeaks = message.playerActivelySpeaks
      ? PlayerActivelySpeaks48.toJSON(message.playerActivelySpeaks)
      : undefined);
    message.playerSetsWorkCondition !== undefined && (obj.playerSetsWorkCondition = message.playerSetsWorkCondition
      ? PlayerSetsWorkCondition49.toJSON(message.playerSetsWorkCondition)
      : undefined);
    message.playerSetsName !== undefined &&
      (obj.playerSetsName = message.playerSetsName ? PlayerSetsName50.toJSON(message.playerSetsName) : undefined);
    message.playerSetsTextStatus !== undefined && (obj.playerSetsTextStatus = message.playerSetsTextStatus
      ? PlayerSetsTextStatus51.toJSON(message.playerSetsTextStatus)
      : undefined);
    message.playerSetsEmojiStatus !== undefined && (obj.playerSetsEmojiStatus = message.playerSetsEmojiStatus
      ? PlayerSetsEmojiStatus52.toJSON(message.playerSetsEmojiStatus)
      : undefined);
    message.playerSetsAffiliation !== undefined && (obj.playerSetsAffiliation = message.playerSetsAffiliation
      ? PlayerSetsAffiliation53.toJSON(message.playerSetsAffiliation)
      : undefined);
    message.playerExits !== undefined &&
      (obj.playerExits = message.playerExits ? PlayerExits54.toJSON(message.playerExits) : undefined);
    message.respawnComplete !== undefined &&
      (obj.respawnComplete = message.respawnComplete ? RespawnComplete55.toJSON(message.respawnComplete) : undefined);
    message.playerSetsOutfitString !== undefined && (obj.playerSetsOutfitString = message.playerSetsOutfitString
      ? PlayerSetsOutfitString56.toJSON(message.playerSetsOutfitString)
      : undefined);
    message.playerSetsIsSignedIn !== undefined && (obj.playerSetsIsSignedIn = message.playerSetsIsSignedIn
      ? PlayerSetsIsSignedIn57.toJSON(message.playerSetsIsSignedIn)
      : undefined);
    message.spaceOverwrites !== undefined &&
      (obj.spaceOverwrites = message.spaceOverwrites ? SpaceOverwrites58.toJSON(message.spaceOverwrites) : undefined);
    message.spaceIsClosed !== undefined &&
      (obj.spaceIsClosed = message.spaceIsClosed ? SpaceIsClosed59.toJSON(message.spaceIsClosed) : undefined);
    message.playerEntersPortal !== undefined && (obj.playerEntersPortal = message.playerEntersPortal
      ? PlayerEntersPortal60.toJSON(message.playerEntersPortal)
      : undefined);
    message.spaceSetsIdMapping !== undefined && (obj.spaceSetsIdMapping = message.spaceSetsIdMapping
      ? SpaceSetsIdMapping61.toJSON(message.spaceSetsIdMapping)
      : undefined);
    message.playerSetsLastActive !== undefined && (obj.playerSetsLastActive = message.playerSetsLastActive
      ? PlayerSetsLastActive62.toJSON(message.playerSetsLastActive)
      : undefined);
    message.playerShootsConfetti !== undefined && (obj.playerShootsConfetti = message.playerShootsConfetti
      ? PlayerShootsConfetti63.toJSON(message.playerShootsConfetti)
      : undefined);
    message.playerSetsEventStatus !== undefined && (obj.playerSetsEventStatus = message.playerSetsEventStatus
      ? PlayerSetsEventStatus64.toJSON(message.playerSetsEventStatus)
      : undefined);
    message.playerSetsInConversation !== undefined && (obj.playerSetsInConversation = message.playerSetsInConversation
      ? PlayerSetsInConversation65.toJSON(message.playerSetsInConversation)
      : undefined);
    message.playerSetsCurrentDesk !== undefined && (obj.playerSetsCurrentDesk = message.playerSetsCurrentDesk
      ? PlayerSetsCurrentDesk66.toJSON(message.playerSetsCurrentDesk)
      : undefined);
    message.playerSetsCurrentArea !== undefined && (obj.playerSetsCurrentArea = message.playerSetsCurrentArea
      ? PlayerSetsCurrentArea67.toJSON(message.playerSetsCurrentArea)
      : undefined);
    message.playerSetsImagePointer !== undefined && (obj.playerSetsImagePointer = message.playerSetsImagePointer
      ? PlayerSetsImagePointer68.toJSON(message.playerSetsImagePointer)
      : undefined);
    message.cookieFound !== undefined &&
      (obj.cookieFound = message.cookieFound ? CookieFound69.toJSON(message.cookieFound) : undefined);
    message.playerEntersWhisperV2 !== undefined && (obj.playerEntersWhisperV2 = message.playerEntersWhisperV2
      ? PlayerEntersWhisperV270.toJSON(message.playerEntersWhisperV2)
      : undefined);
    message.playerSetsGoKartId !== undefined && (obj.playerSetsGoKartId = message.playerSetsGoKartId
      ? PlayerSetsGoKartId71.toJSON(message.playerSetsGoKartId)
      : undefined);
    message.mapSetDimensions !== undefined &&
      (obj.mapSetDimensions = message.mapSetDimensions
        ? MapSetDimensions72.toJSON(message.mapSetDimensions)
        : undefined);
    message.mapSetCollisions !== undefined &&
      (obj.mapSetCollisions = message.mapSetCollisions
        ? MapSetCollisions73.toJSON(message.mapSetCollisions)
        : undefined);
    message.mapSetBackgroundImagePath !== undefined &&
      (obj.mapSetBackgroundImagePath = message.mapSetBackgroundImagePath
        ? MapSetBackgroundImagePath74.toJSON(message.mapSetBackgroundImagePath)
        : undefined);
    message.mapSetForegroundImagePath !== undefined &&
      (obj.mapSetForegroundImagePath = message.mapSetForegroundImagePath
        ? MapSetForegroundImagePath75.toJSON(message.mapSetForegroundImagePath)
        : undefined);
    message.mapSetSprites !== undefined &&
      (obj.mapSetSprites = message.mapSetSprites ? MapSetSprites76.toJSON(message.mapSetSprites) : undefined);
    message.mapSetSpaces !== undefined &&
      (obj.mapSetSpaces = message.mapSetSpaces ? MapSetSpaces77.toJSON(message.mapSetSpaces) : undefined);
    message.mapSetSpawns !== undefined &&
      (obj.mapSetSpawns = message.mapSetSpawns ? MapSetSpawns78.toJSON(message.mapSetSpawns) : undefined);
    message.mapSetPortals !== undefined &&
      (obj.mapSetPortals = message.mapSetPortals ? MapSetPortals79.toJSON(message.mapSetPortals) : undefined);
    message.mapSetAnnouncer !== undefined &&
      (obj.mapSetAnnouncer = message.mapSetAnnouncer ? MapSetAnnouncer80.toJSON(message.mapSetAnnouncer) : undefined);
    message.mapSetAssets !== undefined &&
      (obj.mapSetAssets = message.mapSetAssets ? MapSetAssets81.toJSON(message.mapSetAssets) : undefined);
    message.mapSetObjects !== undefined &&
      (obj.mapSetObjects = message.mapSetObjects ? MapSetObjects82.toJSON(message.mapSetObjects) : undefined);
    message.mapSetName !== undefined &&
      (obj.mapSetName = message.mapSetName ? MapSetName83.toJSON(message.mapSetName) : undefined);
    message.mapSetMuteOnEntry !== undefined && (obj.mapSetMuteOnEntry = message.mapSetMuteOnEntry
      ? MapSetMuteOnEntry84.toJSON(message.mapSetMuteOnEntry)
      : undefined);
    message.mapSetUseDrawnBG !== undefined &&
      (obj.mapSetUseDrawnBG = message.mapSetUseDrawnBG
        ? MapSetUseDrawnBG85.toJSON(message.mapSetUseDrawnBG)
        : undefined);
    message.mapSetWalls !== undefined &&
      (obj.mapSetWalls = message.mapSetWalls ? MapSetWalls86.toJSON(message.mapSetWalls) : undefined);
    message.mapSetFloors !== undefined &&
      (obj.mapSetFloors = message.mapSetFloors ? MapSetFloors87.toJSON(message.mapSetFloors) : undefined);
    message.mapSetAreas !== undefined &&
      (obj.mapSetAreas = message.mapSetAreas ? MapSetAreas88.toJSON(message.mapSetAreas) : undefined);
    message.mapDeleteObject !== undefined &&
      (obj.mapDeleteObject = message.mapDeleteObject ? MapDeleteObject89.toJSON(message.mapDeleteObject) : undefined);
    message.mapSetSpawn !== undefined &&
      (obj.mapSetSpawn = message.mapSetSpawn ? MapSetSpawn90.toJSON(message.mapSetSpawn) : undefined);
    message.playerSetsIsAlone !== undefined && (obj.playerSetsIsAlone = message.playerSetsIsAlone
      ? PlayerSetsIsAlone91.toJSON(message.playerSetsIsAlone)
      : undefined);
    message.playerJoins !== undefined &&
      (obj.playerJoins = message.playerJoins ? PlayerJoins92.toJSON(message.playerJoins) : undefined);
    message.mapSetEnabledChats !== undefined && (obj.mapSetEnabledChats = message.mapSetEnabledChats
      ? MapSetEnabledChats93.toJSON(message.mapSetEnabledChats)
      : undefined);
    message.mapSetDescription !== undefined && (obj.mapSetDescription = message.mapSetDescription
      ? MapSetDescription94.toJSON(message.mapSetDescription)
      : undefined);
    message.mapSetDecoration !== undefined &&
      (obj.mapSetDecoration = message.mapSetDecoration
        ? MapSetDecoration95.toJSON(message.mapSetDecoration)
        : undefined);
    message.mapSetTutorialTasks !== undefined && (obj.mapSetTutorialTasks = message.mapSetTutorialTasks
      ? MapSetTutorialTasks96.toJSON(message.mapSetTutorialTasks)
      : undefined);
    message.mapSetMiniMapImagePath !== undefined && (obj.mapSetMiniMapImagePath = message.mapSetMiniMapImagePath
      ? MapSetMiniMapImagePath97.toJSON(message.mapSetMiniMapImagePath)
      : undefined);
    message.spacePlaysSound !== undefined &&
      (obj.spacePlaysSound = message.spacePlaysSound ? SpacePlaysSound98.toJSON(message.spacePlaysSound) : undefined);
    message.mapSetScript !== undefined &&
      (obj.mapSetScript = message.mapSetScript ? MapSetScript99.toJSON(message.mapSetScript) : undefined);
    message.playerSetsIsMobile !== undefined && (obj.playerSetsIsMobile = message.playerSetsIsMobile
      ? PlayerSetsIsMobile100.toJSON(message.playerSetsIsMobile)
      : undefined);
    message.setScreenPointerServer !== undefined && (obj.setScreenPointerServer = message.setScreenPointerServer
      ? SetScreenPointerServer101.toJSON(message.setScreenPointerServer)
      : undefined);
    message.playerSetsEmoteV2 !== undefined && (obj.playerSetsEmoteV2 = message.playerSetsEmoteV2
      ? PlayerSetsEmoteV2102.toJSON(message.playerSetsEmoteV2)
      : undefined);
    message.playerSetsFocusModeEndTime !== undefined &&
      (obj.playerSetsFocusModeEndTime = message.playerSetsFocusModeEndTime
        ? PlayerSetsFocusModeEndTime103.toJSON(message.playerSetsFocusModeEndTime)
        : undefined);
    message.spaceSetsSpaceMembers !== undefined && (obj.spaceSetsSpaceMembers = message.spaceSetsSpaceMembers
      ? SpaceSetsSpaceMembers104.toJSON(message.spaceSetsSpaceMembers)
      : undefined);
    message.customEvent !== undefined &&
      (obj.customEvent = message.customEvent ? CustomEvent105.toJSON(message.customEvent) : undefined);
    message.playerBlocks !== undefined &&
      (obj.playerBlocks = message.playerBlocks ? PlayerBlocks106.toJSON(message.playerBlocks) : undefined);
    message.playerUpdatesFocusModeStatus !== undefined &&
      (obj.playerUpdatesFocusModeStatus = message.playerUpdatesFocusModeStatus
        ? PlayerUpdatesFocusModeStatus107.toJSON(message.playerUpdatesFocusModeStatus)
        : undefined);
    message.playerNotifies !== undefined &&
      (obj.playerNotifies = message.playerNotifies ? PlayerNotifies108.toJSON(message.playerNotifies) : undefined);
    message.playerSetsItemString !== undefined && (obj.playerSetsItemString = message.playerSetsItemString
      ? PlayerSetsItemString109.toJSON(message.playerSetsItemString)
      : undefined);
    message.playerTriggersItem !== undefined && (obj.playerTriggersItem = message.playerTriggersItem
      ? PlayerTriggersItem110.toJSON(message.playerTriggersItem)
      : undefined);
    message.playerSetsFollowTarget !== undefined && (obj.playerSetsFollowTarget = message.playerSetsFollowTarget
      ? PlayerSetsFollowTarget111.toJSON(message.playerSetsFollowTarget)
      : undefined);
    message.playerRequestsToLead !== undefined && (obj.playerRequestsToLead = message.playerRequestsToLead
      ? PlayerRequestsToLead112.toJSON(message.playerRequestsToLead)
      : undefined);
    message.playerSetsManualVideoSrc !== undefined && (obj.playerSetsManualVideoSrc = message.playerSetsManualVideoSrc
      ? PlayerSetsManualVideoSrc113.toJSON(message.playerSetsManualVideoSrc)
      : undefined);
    message.playerSetsIsNpc !== undefined &&
      (obj.playerSetsIsNpc = message.playerSetsIsNpc ? PlayerSetsIsNpc114.toJSON(message.playerSetsIsNpc) : undefined);
    message.playerSetsSubtitle !== undefined && (obj.playerSetsSubtitle = message.playerSetsSubtitle
      ? PlayerSetsSubtitle115.toJSON(message.playerSetsSubtitle)
      : undefined);
    message.mapCommitsChanges !== undefined && (obj.mapCommitsChanges = message.mapCommitsChanges
      ? MapCommitsChanges116.toJSON(message.mapCommitsChanges)
      : undefined);
    message.playerUpdatesSession !== undefined && (obj.playerUpdatesSession = message.playerUpdatesSession
      ? PlayerUpdatesSession117.toJSON(message.playerUpdatesSession)
      : undefined);
    message.mapMoveObject !== undefined &&
      (obj.mapMoveObject = message.mapMoveObject ? MapMoveObject118.toJSON(message.mapMoveObject) : undefined);
    message.playerEditsChatMessage !== undefined && (obj.playerEditsChatMessage = message.playerEditsChatMessage
      ? PlayerEditsChatMessage119.toJSON(message.playerEditsChatMessage)
      : undefined);
    message.fxShakeObject !== undefined &&
      (obj.fxShakeObject = message.fxShakeObject ? FXShakeObject120.toJSON(message.fxShakeObject) : undefined);
    message.fxShakeCamera !== undefined &&
      (obj.fxShakeCamera = message.fxShakeCamera ? FXShakeCamera121.toJSON(message.fxShakeCamera) : undefined);
    message.playerSendsCommand !== undefined && (obj.playerSendsCommand = message.playerSendsCommand
      ? PlayerSendsCommand122.toJSON(message.playerSendsCommand)
      : undefined);
    message.spaceRegistersCommand !== undefined && (obj.spaceRegistersCommand = message.spaceRegistersCommand
      ? SpaceRegistersCommand123.toJSON(message.spaceRegistersCommand)
      : undefined);
    message.speakerUpdatesSession !== undefined && (obj.speakerUpdatesSession = message.speakerUpdatesSession
      ? SpeakerUpdatesSession124.toJSON(message.speakerUpdatesSession)
      : undefined);
    message.playerUpdatesInventory !== undefined && (obj.playerUpdatesInventory = message.playerUpdatesInventory
      ? PlayerUpdatesInventory125.toJSON(message.playerUpdatesInventory)
      : undefined);
    message.spaceUpdatesItems !== undefined && (obj.spaceUpdatesItems = message.spaceUpdatesItems
      ? SpaceUpdatesItems126.toJSON(message.spaceUpdatesItems)
      : undefined);
    message.playerSetsVehicleId !== undefined && (obj.playerSetsVehicleId = message.playerSetsVehicleId
      ? PlayerSetsVehicleId127.toJSON(message.playerSetsVehicleId)
      : undefined);
    message.playerSetsSpeedModifier !== undefined && (obj.playerSetsSpeedModifier = message.playerSetsSpeedModifier
      ? PlayerSetsSpeedModifier128.toJSON(message.playerSetsSpeedModifier)
      : undefined);
    message.playerHighFives !== undefined &&
      (obj.playerHighFives = message.playerHighFives ? PlayerHighFives129.toJSON(message.playerHighFives) : undefined);
    message.spaceStopsSound !== undefined &&
      (obj.spaceStopsSound = message.spaceStopsSound ? SpaceStopsSound130.toJSON(message.spaceStopsSound) : undefined);
    message.hipToBeSquare !== undefined &&
      (obj.hipToBeSquare = message.hipToBeSquare ? HipToBeSquare131.toJSON(message.hipToBeSquare) : undefined);
    message.playerCrafts !== undefined &&
      (obj.playerCrafts = message.playerCrafts ? PlayerCrafts132.toJSON(message.playerCrafts) : undefined);
    message.playerTriggersInventoryItem !== undefined &&
      (obj.playerTriggersInventoryItem = message.playerTriggersInventoryItem
        ? PlayerTriggersInventoryItem133.toJSON(message.playerTriggersInventoryItem)
        : undefined);
    message.playerSetsAllowScreenPointer !== undefined &&
      (obj.playerSetsAllowScreenPointer = message.playerSetsAllowScreenPointer
        ? PlayerSetsAllowScreenPointer134.toJSON(message.playerSetsAllowScreenPointer)
        : undefined);
    message.precomputedEnterLocation !== undefined && (obj.precomputedEnterLocation = message.precomputedEnterLocation
      ? PrecomputedEnterLocation135.toJSON(message.precomputedEnterLocation)
      : undefined);
    message.gotRequestMute !== undefined &&
      (obj.gotRequestMute = message.gotRequestMute ? GotRequestMute136.toJSON(message.gotRequestMute) : undefined);
    message.playerSetsDeskInfo !== undefined && (obj.playerSetsDeskInfo = message.playerSetsDeskInfo
      ? PlayerSetsDeskInfo137.toJSON(message.playerSetsDeskInfo)
      : undefined);
    message.mapSetNooks !== undefined &&
      (obj.mapSetNooks = message.mapSetNooks ? MapSetNooks138.toJSON(message.mapSetNooks) : undefined);
    message.dynamicGates !== undefined &&
      (obj.dynamicGates = message.dynamicGates ? DynamicGates139.toJSON(message.dynamicGates) : undefined);
    message.playerWaves !== undefined &&
      (obj.playerWaves = message.playerWaves ? PlayerWaves140.toJSON(message.playerWaves) : undefined);
    message.playerSetsPronouns !== undefined && (obj.playerSetsPronouns = message.playerSetsPronouns
      ? PlayerSetsPronouns141.toJSON(message.playerSetsPronouns)
      : undefined);
    message.playerSetsTitle !== undefined &&
      (obj.playerSetsTitle = message.playerSetsTitle ? PlayerSetsTitle142.toJSON(message.playerSetsTitle) : undefined);
    message.playerSetsTimezone !== undefined && (obj.playerSetsTimezone = message.playerSetsTimezone
      ? PlayerSetsTimezone143.toJSON(message.playerSetsTimezone)
      : undefined);
    message.playerSetsDescription !== undefined && (obj.playerSetsDescription = message.playerSetsDescription
      ? PlayerSetsDescription144.toJSON(message.playerSetsDescription)
      : undefined);
    message.playerSetsPhone !== undefined &&
      (obj.playerSetsPhone = message.playerSetsPhone ? PlayerSetsPhone145.toJSON(message.playerSetsPhone) : undefined);
    message.playerSetsPersonalImageUrl !== undefined &&
      (obj.playerSetsPersonalImageUrl = message.playerSetsPersonalImageUrl
        ? PlayerSetsPersonalImageUrl146.toJSON(message.playerSetsPersonalImageUrl)
        : undefined);
    message.playerSetsProfileImageUrl !== undefined &&
      (obj.playerSetsProfileImageUrl = message.playerSetsProfileImageUrl
        ? PlayerSetsProfileImageUrl147.toJSON(message.playerSetsProfileImageUrl)
        : undefined);
    message.spaceSetsCapacity !== undefined && (obj.spaceSetsCapacity = message.spaceSetsCapacity
      ? SpaceSetsCapacity148.toJSON(message.spaceSetsCapacity)
      : undefined);
    message.spaceOverCapacityDeniesUser !== undefined &&
      (obj.spaceOverCapacityDeniesUser = message.spaceOverCapacityDeniesUser
        ? SpaceOverCapacityDeniesUser149.toJSON(message.spaceOverCapacityDeniesUser)
        : undefined);
    message.playerSetsAway !== undefined &&
      (obj.playerSetsAway = message.playerSetsAway ? PlayerSetsAway150.toJSON(message.playerSetsAway) : undefined);
    message.mapSetCollisionsBits !== undefined && (obj.mapSetCollisionsBits = message.mapSetCollisionsBits
      ? MapSetCollisionsBits151.toJSON(message.mapSetCollisionsBits)
      : undefined);
    message.playerSetsCity !== undefined &&
      (obj.playerSetsCity = message.playerSetsCity ? PlayerSetsCity152.toJSON(message.playerSetsCity) : undefined);
    message.playerSetsCountry !== undefined && (obj.playerSetsCountry = message.playerSetsCountry
      ? PlayerSetsCountry153.toJSON(message.playerSetsCountry)
      : undefined);
    message.playerSetsStartDate !== undefined && (obj.playerSetsStartDate = message.playerSetsStartDate
      ? PlayerSetsStartDate154.toJSON(message.playerSetsStartDate)
      : undefined);
    message.playerStartsRecording !== undefined && (obj.playerStartsRecording = message.playerStartsRecording
      ? PlayerStartsRecording155.toJSON(message.playerStartsRecording)
      : undefined);
    message.accessRequestsUpdated !== undefined && (obj.accessRequestsUpdated = message.accessRequestsUpdated
      ? AccessRequestsUpdated156.toJSON(message.accessRequestsUpdated)
      : undefined);
    message.accessRequestRespondedTo !== undefined && (obj.accessRequestRespondedTo = message.accessRequestRespondedTo
      ? AccessRequestRespondedTo157.toJSON(message.accessRequestRespondedTo)
      : undefined);
    message.spaceSetsGuestPassStatuses !== undefined &&
      (obj.spaceSetsGuestPassStatuses = message.spaceSetsGuestPassStatuses
        ? SpaceSetsGuestPassStatuses158.toJSON(message.spaceSetsGuestPassStatuses)
        : undefined);
    message.playerSetsAvailability !== undefined && (obj.playerSetsAvailability = message.playerSetsAvailability
      ? PlayerSetsAvailability159.toJSON(message.playerSetsAvailability)
      : undefined);
    message.subscriptionsUpdated !== undefined && (obj.subscriptionsUpdated = message.subscriptionsUpdated
      ? SubscriptionsUpdated160.toJSON(message.subscriptionsUpdated)
      : undefined);
    message.enterWithTeammatesLobbyStateUpdated !== undefined &&
      (obj.enterWithTeammatesLobbyStateUpdated = message.enterWithTeammatesLobbyStateUpdated
        ? EnterWithTeammatesLobbyStateUpdated161.toJSON(message.enterWithTeammatesLobbyStateUpdated)
        : undefined);
    message.enterWithTeammatesHostInitiatesEnterSpace !== undefined &&
      (obj.enterWithTeammatesHostInitiatesEnterSpace = message.enterWithTeammatesHostInitiatesEnterSpace
        ? EnterWithTeammatesHostInitiatesEnterSpace162.toJSON(message.enterWithTeammatesHostInitiatesEnterSpace)
        : undefined);
    message.spaceRolePermissionOverrideUpdated !== undefined &&
      (obj.spaceRolePermissionOverrideUpdated = message.spaceRolePermissionOverrideUpdated
        ? SpaceRolePermissionOverrideUpdated163.toJSON(message.spaceRolePermissionOverrideUpdated)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerClientEvent>, I>>(base?: I): ServerClientEvent {
    return ServerClientEvent.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ServerClientEvent>, I>>(object: I): ServerClientEvent {
    const message = createBaseServerClientEvent();
    message.info = (object.info !== undefined && object.info !== null) ? Info33.fromPartial(object.info) : undefined;
    message.warn = (object.warn !== undefined && object.warn !== null) ? Warn34.fromPartial(object.warn) : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? ErrorEvent35.fromPartial(object.error)
      : undefined;
    message.ready = (object.ready !== undefined && object.ready !== null)
      ? Ready36.fromPartial(object.ready)
      : undefined;
    message.serverHeartbeat = (object.serverHeartbeat !== undefined && object.serverHeartbeat !== null)
      ? ServerHeartbeat37.fromPartial(object.serverHeartbeat)
      : undefined;
    message.transactionStatus = (object.transactionStatus !== undefined && object.transactionStatus !== null)
      ? TransactionStatus38.fromPartial(object.transactionStatus)
      : undefined;
    message.playerMoves = (object.playerMoves !== undefined && object.playerMoves !== null)
      ? PlayerMoves39.fromPartial(object.playerMoves)
      : undefined;
    message.playerSetsStatus = (object.playerSetsStatus !== undefined && object.playerSetsStatus !== null)
      ? PlayerSetsStatus40.fromPartial(object.playerSetsStatus)
      : undefined;
    message.playerSpotlights = (object.playerSpotlights !== undefined && object.playerSpotlights !== null)
      ? PlayerSpotlights41.fromPartial(object.playerSpotlights)
      : undefined;
    message.playerRings = (object.playerRings !== undefined && object.playerRings !== null)
      ? PlayerRings42.fromPartial(object.playerRings)
      : undefined;
    message.playerChats = (object.playerChats !== undefined && object.playerChats !== null)
      ? PlayerChats43.fromPartial(object.playerChats)
      : undefined;
    message.playerInteracts = (object.playerInteracts !== undefined && object.playerInteracts !== null)
      ? PlayerInteracts44.fromPartial(object.playerInteracts)
      : undefined;
    message.playerGhosts = (object.playerGhosts !== undefined && object.playerGhosts !== null)
      ? PlayerGhosts45.fromPartial(object.playerGhosts)
      : undefined;
    message.playerEntersWhisper = (object.playerEntersWhisper !== undefined && object.playerEntersWhisper !== null)
      ? PlayerEntersWhisper46.fromPartial(object.playerEntersWhisper)
      : undefined;
    message.playerLeavesWhisper = (object.playerLeavesWhisper !== undefined && object.playerLeavesWhisper !== null)
      ? PlayerLeavesWhisper47.fromPartial(object.playerLeavesWhisper)
      : undefined;
    message.playerActivelySpeaks = (object.playerActivelySpeaks !== undefined && object.playerActivelySpeaks !== null)
      ? PlayerActivelySpeaks48.fromPartial(object.playerActivelySpeaks)
      : undefined;
    message.playerSetsWorkCondition =
      (object.playerSetsWorkCondition !== undefined && object.playerSetsWorkCondition !== null)
        ? PlayerSetsWorkCondition49.fromPartial(object.playerSetsWorkCondition)
        : undefined;
    message.playerSetsName = (object.playerSetsName !== undefined && object.playerSetsName !== null)
      ? PlayerSetsName50.fromPartial(object.playerSetsName)
      : undefined;
    message.playerSetsTextStatus = (object.playerSetsTextStatus !== undefined && object.playerSetsTextStatus !== null)
      ? PlayerSetsTextStatus51.fromPartial(object.playerSetsTextStatus)
      : undefined;
    message.playerSetsEmojiStatus =
      (object.playerSetsEmojiStatus !== undefined && object.playerSetsEmojiStatus !== null)
        ? PlayerSetsEmojiStatus52.fromPartial(object.playerSetsEmojiStatus)
        : undefined;
    message.playerSetsAffiliation =
      (object.playerSetsAffiliation !== undefined && object.playerSetsAffiliation !== null)
        ? PlayerSetsAffiliation53.fromPartial(object.playerSetsAffiliation)
        : undefined;
    message.playerExits = (object.playerExits !== undefined && object.playerExits !== null)
      ? PlayerExits54.fromPartial(object.playerExits)
      : undefined;
    message.respawnComplete = (object.respawnComplete !== undefined && object.respawnComplete !== null)
      ? RespawnComplete55.fromPartial(object.respawnComplete)
      : undefined;
    message.playerSetsOutfitString =
      (object.playerSetsOutfitString !== undefined && object.playerSetsOutfitString !== null)
        ? PlayerSetsOutfitString56.fromPartial(object.playerSetsOutfitString)
        : undefined;
    message.playerSetsIsSignedIn = (object.playerSetsIsSignedIn !== undefined && object.playerSetsIsSignedIn !== null)
      ? PlayerSetsIsSignedIn57.fromPartial(object.playerSetsIsSignedIn)
      : undefined;
    message.spaceOverwrites = (object.spaceOverwrites !== undefined && object.spaceOverwrites !== null)
      ? SpaceOverwrites58.fromPartial(object.spaceOverwrites)
      : undefined;
    message.spaceIsClosed = (object.spaceIsClosed !== undefined && object.spaceIsClosed !== null)
      ? SpaceIsClosed59.fromPartial(object.spaceIsClosed)
      : undefined;
    message.playerEntersPortal = (object.playerEntersPortal !== undefined && object.playerEntersPortal !== null)
      ? PlayerEntersPortal60.fromPartial(object.playerEntersPortal)
      : undefined;
    message.spaceSetsIdMapping = (object.spaceSetsIdMapping !== undefined && object.spaceSetsIdMapping !== null)
      ? SpaceSetsIdMapping61.fromPartial(object.spaceSetsIdMapping)
      : undefined;
    message.playerSetsLastActive = (object.playerSetsLastActive !== undefined && object.playerSetsLastActive !== null)
      ? PlayerSetsLastActive62.fromPartial(object.playerSetsLastActive)
      : undefined;
    message.playerShootsConfetti = (object.playerShootsConfetti !== undefined && object.playerShootsConfetti !== null)
      ? PlayerShootsConfetti63.fromPartial(object.playerShootsConfetti)
      : undefined;
    message.playerSetsEventStatus =
      (object.playerSetsEventStatus !== undefined && object.playerSetsEventStatus !== null)
        ? PlayerSetsEventStatus64.fromPartial(object.playerSetsEventStatus)
        : undefined;
    message.playerSetsInConversation =
      (object.playerSetsInConversation !== undefined && object.playerSetsInConversation !== null)
        ? PlayerSetsInConversation65.fromPartial(object.playerSetsInConversation)
        : undefined;
    message.playerSetsCurrentDesk =
      (object.playerSetsCurrentDesk !== undefined && object.playerSetsCurrentDesk !== null)
        ? PlayerSetsCurrentDesk66.fromPartial(object.playerSetsCurrentDesk)
        : undefined;
    message.playerSetsCurrentArea =
      (object.playerSetsCurrentArea !== undefined && object.playerSetsCurrentArea !== null)
        ? PlayerSetsCurrentArea67.fromPartial(object.playerSetsCurrentArea)
        : undefined;
    message.playerSetsImagePointer =
      (object.playerSetsImagePointer !== undefined && object.playerSetsImagePointer !== null)
        ? PlayerSetsImagePointer68.fromPartial(object.playerSetsImagePointer)
        : undefined;
    message.cookieFound = (object.cookieFound !== undefined && object.cookieFound !== null)
      ? CookieFound69.fromPartial(object.cookieFound)
      : undefined;
    message.playerEntersWhisperV2 =
      (object.playerEntersWhisperV2 !== undefined && object.playerEntersWhisperV2 !== null)
        ? PlayerEntersWhisperV270.fromPartial(object.playerEntersWhisperV2)
        : undefined;
    message.playerSetsGoKartId = (object.playerSetsGoKartId !== undefined && object.playerSetsGoKartId !== null)
      ? PlayerSetsGoKartId71.fromPartial(object.playerSetsGoKartId)
      : undefined;
    message.mapSetDimensions = (object.mapSetDimensions !== undefined && object.mapSetDimensions !== null)
      ? MapSetDimensions72.fromPartial(object.mapSetDimensions)
      : undefined;
    message.mapSetCollisions = (object.mapSetCollisions !== undefined && object.mapSetCollisions !== null)
      ? MapSetCollisions73.fromPartial(object.mapSetCollisions)
      : undefined;
    message.mapSetBackgroundImagePath =
      (object.mapSetBackgroundImagePath !== undefined && object.mapSetBackgroundImagePath !== null)
        ? MapSetBackgroundImagePath74.fromPartial(object.mapSetBackgroundImagePath)
        : undefined;
    message.mapSetForegroundImagePath =
      (object.mapSetForegroundImagePath !== undefined && object.mapSetForegroundImagePath !== null)
        ? MapSetForegroundImagePath75.fromPartial(object.mapSetForegroundImagePath)
        : undefined;
    message.mapSetSprites = (object.mapSetSprites !== undefined && object.mapSetSprites !== null)
      ? MapSetSprites76.fromPartial(object.mapSetSprites)
      : undefined;
    message.mapSetSpaces = (object.mapSetSpaces !== undefined && object.mapSetSpaces !== null)
      ? MapSetSpaces77.fromPartial(object.mapSetSpaces)
      : undefined;
    message.mapSetSpawns = (object.mapSetSpawns !== undefined && object.mapSetSpawns !== null)
      ? MapSetSpawns78.fromPartial(object.mapSetSpawns)
      : undefined;
    message.mapSetPortals = (object.mapSetPortals !== undefined && object.mapSetPortals !== null)
      ? MapSetPortals79.fromPartial(object.mapSetPortals)
      : undefined;
    message.mapSetAnnouncer = (object.mapSetAnnouncer !== undefined && object.mapSetAnnouncer !== null)
      ? MapSetAnnouncer80.fromPartial(object.mapSetAnnouncer)
      : undefined;
    message.mapSetAssets = (object.mapSetAssets !== undefined && object.mapSetAssets !== null)
      ? MapSetAssets81.fromPartial(object.mapSetAssets)
      : undefined;
    message.mapSetObjects = (object.mapSetObjects !== undefined && object.mapSetObjects !== null)
      ? MapSetObjects82.fromPartial(object.mapSetObjects)
      : undefined;
    message.mapSetName = (object.mapSetName !== undefined && object.mapSetName !== null)
      ? MapSetName83.fromPartial(object.mapSetName)
      : undefined;
    message.mapSetMuteOnEntry = (object.mapSetMuteOnEntry !== undefined && object.mapSetMuteOnEntry !== null)
      ? MapSetMuteOnEntry84.fromPartial(object.mapSetMuteOnEntry)
      : undefined;
    message.mapSetUseDrawnBG = (object.mapSetUseDrawnBG !== undefined && object.mapSetUseDrawnBG !== null)
      ? MapSetUseDrawnBG85.fromPartial(object.mapSetUseDrawnBG)
      : undefined;
    message.mapSetWalls = (object.mapSetWalls !== undefined && object.mapSetWalls !== null)
      ? MapSetWalls86.fromPartial(object.mapSetWalls)
      : undefined;
    message.mapSetFloors = (object.mapSetFloors !== undefined && object.mapSetFloors !== null)
      ? MapSetFloors87.fromPartial(object.mapSetFloors)
      : undefined;
    message.mapSetAreas = (object.mapSetAreas !== undefined && object.mapSetAreas !== null)
      ? MapSetAreas88.fromPartial(object.mapSetAreas)
      : undefined;
    message.mapDeleteObject = (object.mapDeleteObject !== undefined && object.mapDeleteObject !== null)
      ? MapDeleteObject89.fromPartial(object.mapDeleteObject)
      : undefined;
    message.mapSetSpawn = (object.mapSetSpawn !== undefined && object.mapSetSpawn !== null)
      ? MapSetSpawn90.fromPartial(object.mapSetSpawn)
      : undefined;
    message.playerSetsIsAlone = (object.playerSetsIsAlone !== undefined && object.playerSetsIsAlone !== null)
      ? PlayerSetsIsAlone91.fromPartial(object.playerSetsIsAlone)
      : undefined;
    message.playerJoins = (object.playerJoins !== undefined && object.playerJoins !== null)
      ? PlayerJoins92.fromPartial(object.playerJoins)
      : undefined;
    message.mapSetEnabledChats = (object.mapSetEnabledChats !== undefined && object.mapSetEnabledChats !== null)
      ? MapSetEnabledChats93.fromPartial(object.mapSetEnabledChats)
      : undefined;
    message.mapSetDescription = (object.mapSetDescription !== undefined && object.mapSetDescription !== null)
      ? MapSetDescription94.fromPartial(object.mapSetDescription)
      : undefined;
    message.mapSetDecoration = (object.mapSetDecoration !== undefined && object.mapSetDecoration !== null)
      ? MapSetDecoration95.fromPartial(object.mapSetDecoration)
      : undefined;
    message.mapSetTutorialTasks = (object.mapSetTutorialTasks !== undefined && object.mapSetTutorialTasks !== null)
      ? MapSetTutorialTasks96.fromPartial(object.mapSetTutorialTasks)
      : undefined;
    message.mapSetMiniMapImagePath =
      (object.mapSetMiniMapImagePath !== undefined && object.mapSetMiniMapImagePath !== null)
        ? MapSetMiniMapImagePath97.fromPartial(object.mapSetMiniMapImagePath)
        : undefined;
    message.spacePlaysSound = (object.spacePlaysSound !== undefined && object.spacePlaysSound !== null)
      ? SpacePlaysSound98.fromPartial(object.spacePlaysSound)
      : undefined;
    message.mapSetScript = (object.mapSetScript !== undefined && object.mapSetScript !== null)
      ? MapSetScript99.fromPartial(object.mapSetScript)
      : undefined;
    message.playerSetsIsMobile = (object.playerSetsIsMobile !== undefined && object.playerSetsIsMobile !== null)
      ? PlayerSetsIsMobile100.fromPartial(object.playerSetsIsMobile)
      : undefined;
    message.setScreenPointerServer =
      (object.setScreenPointerServer !== undefined && object.setScreenPointerServer !== null)
        ? SetScreenPointerServer101.fromPartial(object.setScreenPointerServer)
        : undefined;
    message.playerSetsEmoteV2 = (object.playerSetsEmoteV2 !== undefined && object.playerSetsEmoteV2 !== null)
      ? PlayerSetsEmoteV2102.fromPartial(object.playerSetsEmoteV2)
      : undefined;
    message.playerSetsFocusModeEndTime =
      (object.playerSetsFocusModeEndTime !== undefined && object.playerSetsFocusModeEndTime !== null)
        ? PlayerSetsFocusModeEndTime103.fromPartial(object.playerSetsFocusModeEndTime)
        : undefined;
    message.spaceSetsSpaceMembers =
      (object.spaceSetsSpaceMembers !== undefined && object.spaceSetsSpaceMembers !== null)
        ? SpaceSetsSpaceMembers104.fromPartial(object.spaceSetsSpaceMembers)
        : undefined;
    message.customEvent = (object.customEvent !== undefined && object.customEvent !== null)
      ? CustomEvent105.fromPartial(object.customEvent)
      : undefined;
    message.playerBlocks = (object.playerBlocks !== undefined && object.playerBlocks !== null)
      ? PlayerBlocks106.fromPartial(object.playerBlocks)
      : undefined;
    message.playerUpdatesFocusModeStatus =
      (object.playerUpdatesFocusModeStatus !== undefined && object.playerUpdatesFocusModeStatus !== null)
        ? PlayerUpdatesFocusModeStatus107.fromPartial(object.playerUpdatesFocusModeStatus)
        : undefined;
    message.playerNotifies = (object.playerNotifies !== undefined && object.playerNotifies !== null)
      ? PlayerNotifies108.fromPartial(object.playerNotifies)
      : undefined;
    message.playerSetsItemString = (object.playerSetsItemString !== undefined && object.playerSetsItemString !== null)
      ? PlayerSetsItemString109.fromPartial(object.playerSetsItemString)
      : undefined;
    message.playerTriggersItem = (object.playerTriggersItem !== undefined && object.playerTriggersItem !== null)
      ? PlayerTriggersItem110.fromPartial(object.playerTriggersItem)
      : undefined;
    message.playerSetsFollowTarget =
      (object.playerSetsFollowTarget !== undefined && object.playerSetsFollowTarget !== null)
        ? PlayerSetsFollowTarget111.fromPartial(object.playerSetsFollowTarget)
        : undefined;
    message.playerRequestsToLead = (object.playerRequestsToLead !== undefined && object.playerRequestsToLead !== null)
      ? PlayerRequestsToLead112.fromPartial(object.playerRequestsToLead)
      : undefined;
    message.playerSetsManualVideoSrc =
      (object.playerSetsManualVideoSrc !== undefined && object.playerSetsManualVideoSrc !== null)
        ? PlayerSetsManualVideoSrc113.fromPartial(object.playerSetsManualVideoSrc)
        : undefined;
    message.playerSetsIsNpc = (object.playerSetsIsNpc !== undefined && object.playerSetsIsNpc !== null)
      ? PlayerSetsIsNpc114.fromPartial(object.playerSetsIsNpc)
      : undefined;
    message.playerSetsSubtitle = (object.playerSetsSubtitle !== undefined && object.playerSetsSubtitle !== null)
      ? PlayerSetsSubtitle115.fromPartial(object.playerSetsSubtitle)
      : undefined;
    message.mapCommitsChanges = (object.mapCommitsChanges !== undefined && object.mapCommitsChanges !== null)
      ? MapCommitsChanges116.fromPartial(object.mapCommitsChanges)
      : undefined;
    message.playerUpdatesSession = (object.playerUpdatesSession !== undefined && object.playerUpdatesSession !== null)
      ? PlayerUpdatesSession117.fromPartial(object.playerUpdatesSession)
      : undefined;
    message.mapMoveObject = (object.mapMoveObject !== undefined && object.mapMoveObject !== null)
      ? MapMoveObject118.fromPartial(object.mapMoveObject)
      : undefined;
    message.playerEditsChatMessage =
      (object.playerEditsChatMessage !== undefined && object.playerEditsChatMessage !== null)
        ? PlayerEditsChatMessage119.fromPartial(object.playerEditsChatMessage)
        : undefined;
    message.fxShakeObject = (object.fxShakeObject !== undefined && object.fxShakeObject !== null)
      ? FXShakeObject120.fromPartial(object.fxShakeObject)
      : undefined;
    message.fxShakeCamera = (object.fxShakeCamera !== undefined && object.fxShakeCamera !== null)
      ? FXShakeCamera121.fromPartial(object.fxShakeCamera)
      : undefined;
    message.playerSendsCommand = (object.playerSendsCommand !== undefined && object.playerSendsCommand !== null)
      ? PlayerSendsCommand122.fromPartial(object.playerSendsCommand)
      : undefined;
    message.spaceRegistersCommand =
      (object.spaceRegistersCommand !== undefined && object.spaceRegistersCommand !== null)
        ? SpaceRegistersCommand123.fromPartial(object.spaceRegistersCommand)
        : undefined;
    message.speakerUpdatesSession =
      (object.speakerUpdatesSession !== undefined && object.speakerUpdatesSession !== null)
        ? SpeakerUpdatesSession124.fromPartial(object.speakerUpdatesSession)
        : undefined;
    message.playerUpdatesInventory =
      (object.playerUpdatesInventory !== undefined && object.playerUpdatesInventory !== null)
        ? PlayerUpdatesInventory125.fromPartial(object.playerUpdatesInventory)
        : undefined;
    message.spaceUpdatesItems = (object.spaceUpdatesItems !== undefined && object.spaceUpdatesItems !== null)
      ? SpaceUpdatesItems126.fromPartial(object.spaceUpdatesItems)
      : undefined;
    message.playerSetsVehicleId = (object.playerSetsVehicleId !== undefined && object.playerSetsVehicleId !== null)
      ? PlayerSetsVehicleId127.fromPartial(object.playerSetsVehicleId)
      : undefined;
    message.playerSetsSpeedModifier =
      (object.playerSetsSpeedModifier !== undefined && object.playerSetsSpeedModifier !== null)
        ? PlayerSetsSpeedModifier128.fromPartial(object.playerSetsSpeedModifier)
        : undefined;
    message.playerHighFives = (object.playerHighFives !== undefined && object.playerHighFives !== null)
      ? PlayerHighFives129.fromPartial(object.playerHighFives)
      : undefined;
    message.spaceStopsSound = (object.spaceStopsSound !== undefined && object.spaceStopsSound !== null)
      ? SpaceStopsSound130.fromPartial(object.spaceStopsSound)
      : undefined;
    message.hipToBeSquare = (object.hipToBeSquare !== undefined && object.hipToBeSquare !== null)
      ? HipToBeSquare131.fromPartial(object.hipToBeSquare)
      : undefined;
    message.playerCrafts = (object.playerCrafts !== undefined && object.playerCrafts !== null)
      ? PlayerCrafts132.fromPartial(object.playerCrafts)
      : undefined;
    message.playerTriggersInventoryItem =
      (object.playerTriggersInventoryItem !== undefined && object.playerTriggersInventoryItem !== null)
        ? PlayerTriggersInventoryItem133.fromPartial(object.playerTriggersInventoryItem)
        : undefined;
    message.playerSetsAllowScreenPointer =
      (object.playerSetsAllowScreenPointer !== undefined && object.playerSetsAllowScreenPointer !== null)
        ? PlayerSetsAllowScreenPointer134.fromPartial(object.playerSetsAllowScreenPointer)
        : undefined;
    message.precomputedEnterLocation =
      (object.precomputedEnterLocation !== undefined && object.precomputedEnterLocation !== null)
        ? PrecomputedEnterLocation135.fromPartial(object.precomputedEnterLocation)
        : undefined;
    message.gotRequestMute = (object.gotRequestMute !== undefined && object.gotRequestMute !== null)
      ? GotRequestMute136.fromPartial(object.gotRequestMute)
      : undefined;
    message.playerSetsDeskInfo = (object.playerSetsDeskInfo !== undefined && object.playerSetsDeskInfo !== null)
      ? PlayerSetsDeskInfo137.fromPartial(object.playerSetsDeskInfo)
      : undefined;
    message.mapSetNooks = (object.mapSetNooks !== undefined && object.mapSetNooks !== null)
      ? MapSetNooks138.fromPartial(object.mapSetNooks)
      : undefined;
    message.dynamicGates = (object.dynamicGates !== undefined && object.dynamicGates !== null)
      ? DynamicGates139.fromPartial(object.dynamicGates)
      : undefined;
    message.playerWaves = (object.playerWaves !== undefined && object.playerWaves !== null)
      ? PlayerWaves140.fromPartial(object.playerWaves)
      : undefined;
    message.playerSetsPronouns = (object.playerSetsPronouns !== undefined && object.playerSetsPronouns !== null)
      ? PlayerSetsPronouns141.fromPartial(object.playerSetsPronouns)
      : undefined;
    message.playerSetsTitle = (object.playerSetsTitle !== undefined && object.playerSetsTitle !== null)
      ? PlayerSetsTitle142.fromPartial(object.playerSetsTitle)
      : undefined;
    message.playerSetsTimezone = (object.playerSetsTimezone !== undefined && object.playerSetsTimezone !== null)
      ? PlayerSetsTimezone143.fromPartial(object.playerSetsTimezone)
      : undefined;
    message.playerSetsDescription =
      (object.playerSetsDescription !== undefined && object.playerSetsDescription !== null)
        ? PlayerSetsDescription144.fromPartial(object.playerSetsDescription)
        : undefined;
    message.playerSetsPhone = (object.playerSetsPhone !== undefined && object.playerSetsPhone !== null)
      ? PlayerSetsPhone145.fromPartial(object.playerSetsPhone)
      : undefined;
    message.playerSetsPersonalImageUrl =
      (object.playerSetsPersonalImageUrl !== undefined && object.playerSetsPersonalImageUrl !== null)
        ? PlayerSetsPersonalImageUrl146.fromPartial(object.playerSetsPersonalImageUrl)
        : undefined;
    message.playerSetsProfileImageUrl =
      (object.playerSetsProfileImageUrl !== undefined && object.playerSetsProfileImageUrl !== null)
        ? PlayerSetsProfileImageUrl147.fromPartial(object.playerSetsProfileImageUrl)
        : undefined;
    message.spaceSetsCapacity = (object.spaceSetsCapacity !== undefined && object.spaceSetsCapacity !== null)
      ? SpaceSetsCapacity148.fromPartial(object.spaceSetsCapacity)
      : undefined;
    message.spaceOverCapacityDeniesUser =
      (object.spaceOverCapacityDeniesUser !== undefined && object.spaceOverCapacityDeniesUser !== null)
        ? SpaceOverCapacityDeniesUser149.fromPartial(object.spaceOverCapacityDeniesUser)
        : undefined;
    message.playerSetsAway = (object.playerSetsAway !== undefined && object.playerSetsAway !== null)
      ? PlayerSetsAway150.fromPartial(object.playerSetsAway)
      : undefined;
    message.mapSetCollisionsBits = (object.mapSetCollisionsBits !== undefined && object.mapSetCollisionsBits !== null)
      ? MapSetCollisionsBits151.fromPartial(object.mapSetCollisionsBits)
      : undefined;
    message.playerSetsCity = (object.playerSetsCity !== undefined && object.playerSetsCity !== null)
      ? PlayerSetsCity152.fromPartial(object.playerSetsCity)
      : undefined;
    message.playerSetsCountry = (object.playerSetsCountry !== undefined && object.playerSetsCountry !== null)
      ? PlayerSetsCountry153.fromPartial(object.playerSetsCountry)
      : undefined;
    message.playerSetsStartDate = (object.playerSetsStartDate !== undefined && object.playerSetsStartDate !== null)
      ? PlayerSetsStartDate154.fromPartial(object.playerSetsStartDate)
      : undefined;
    message.playerStartsRecording =
      (object.playerStartsRecording !== undefined && object.playerStartsRecording !== null)
        ? PlayerStartsRecording155.fromPartial(object.playerStartsRecording)
        : undefined;
    message.accessRequestsUpdated =
      (object.accessRequestsUpdated !== undefined && object.accessRequestsUpdated !== null)
        ? AccessRequestsUpdated156.fromPartial(object.accessRequestsUpdated)
        : undefined;
    message.accessRequestRespondedTo =
      (object.accessRequestRespondedTo !== undefined && object.accessRequestRespondedTo !== null)
        ? AccessRequestRespondedTo157.fromPartial(object.accessRequestRespondedTo)
        : undefined;
    message.spaceSetsGuestPassStatuses =
      (object.spaceSetsGuestPassStatuses !== undefined && object.spaceSetsGuestPassStatuses !== null)
        ? SpaceSetsGuestPassStatuses158.fromPartial(object.spaceSetsGuestPassStatuses)
        : undefined;
    message.playerSetsAvailability =
      (object.playerSetsAvailability !== undefined && object.playerSetsAvailability !== null)
        ? PlayerSetsAvailability159.fromPartial(object.playerSetsAvailability)
        : undefined;
    message.subscriptionsUpdated = (object.subscriptionsUpdated !== undefined && object.subscriptionsUpdated !== null)
      ? SubscriptionsUpdated160.fromPartial(object.subscriptionsUpdated)
      : undefined;
    message.enterWithTeammatesLobbyStateUpdated =
      (object.enterWithTeammatesLobbyStateUpdated !== undefined && object.enterWithTeammatesLobbyStateUpdated !== null)
        ? EnterWithTeammatesLobbyStateUpdated161.fromPartial(object.enterWithTeammatesLobbyStateUpdated)
        : undefined;
    message.enterWithTeammatesHostInitiatesEnterSpace =
      (object.enterWithTeammatesHostInitiatesEnterSpace !== undefined &&
          object.enterWithTeammatesHostInitiatesEnterSpace !== null)
        ? EnterWithTeammatesHostInitiatesEnterSpace162.fromPartial(object.enterWithTeammatesHostInitiatesEnterSpace)
        : undefined;
    message.spaceRolePermissionOverrideUpdated =
      (object.spaceRolePermissionOverrideUpdated !== undefined && object.spaceRolePermissionOverrideUpdated !== null)
        ? SpaceRolePermissionOverrideUpdated163.fromPartial(object.spaceRolePermissionOverrideUpdated)
        : undefined;
    return message;
  },
};

function createBaseSubscriptionsUpdated(): SubscriptionsUpdated {
  return { subscriptions: [] };
}

export const SubscriptionsUpdated = {
  encode(message: SubscriptionsUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.subscriptions) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscriptionsUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriptionsUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.subscriptions.push(reader.string());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscriptionsUpdated {
    return {
      subscriptions: Array.isArray(object?.subscriptions) ? object.subscriptions.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: SubscriptionsUpdated): unknown {
    const obj: any = {};
    if (message.subscriptions) {
      obj.subscriptions = message.subscriptions.map((e) => e);
    } else {
      obj.subscriptions = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscriptionsUpdated>, I>>(base?: I): SubscriptionsUpdated {
    return SubscriptionsUpdated.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SubscriptionsUpdated>, I>>(object: I): SubscriptionsUpdated {
    const message = createBaseSubscriptionsUpdated();
    message.subscriptions = object.subscriptions?.map((e) => e) || [];
    return message;
  },
};

function createBaseServerHeartbeat(): ServerHeartbeat {
  return { lastRTT: 0 };
}

export const ServerHeartbeat = {
  encode(message: ServerHeartbeat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.lastRTT !== 0) {
      writer.uint32(8).uint32(message.lastRTT);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ServerHeartbeat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerHeartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.lastRTT = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerHeartbeat {
    return { lastRTT: isSet(object.lastRTT) ? Number(object.lastRTT) : 0 };
  },

  toJSON(message: ServerHeartbeat): unknown {
    const obj: any = {};
    message.lastRTT !== undefined && (obj.lastRTT = Math.round(message.lastRTT));
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerHeartbeat>, I>>(base?: I): ServerHeartbeat {
    return ServerHeartbeat.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ServerHeartbeat>, I>>(object: I): ServerHeartbeat {
    const message = createBaseServerHeartbeat();
    message.lastRTT = object.lastRTT ?? 0;
    return message;
  },
};

function createBaseInfo(): Info {
  return { message: "" };
}

export const Info = {
  encode(message: Info, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Info {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Info {
    return { message: isSet(object.message) ? String(object.message) : "" };
  },

  toJSON(message: Info): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message);
    return obj;
  },

  create<I extends Exact<DeepPartial<Info>, I>>(base?: I): Info {
    return Info.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Info>, I>>(object: I): Info {
    const message = createBaseInfo();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseWarn(): Warn {
  return { message: "" };
}

export const Warn = {
  encode(message: Warn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Warn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWarn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Warn {
    return { message: isSet(object.message) ? String(object.message) : "" };
  },

  toJSON(message: Warn): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message);
    return obj;
  },

  create<I extends Exact<DeepPartial<Warn>, I>>(base?: I): Warn {
    return Warn.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Warn>, I>>(object: I): Warn {
    const message = createBaseWarn();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseErrorEvent(): ErrorEvent {
  return { message: "", code: 0 };
}

export const ErrorEvent = {
  encode(message: ErrorEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.code !== 0) {
      writer.uint32(16).uint32(message.code);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ErrorEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.code = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ErrorEvent {
    return {
      message: isSet(object.message) ? String(object.message) : "",
      code: isSet(object.code) ? Number(object.code) : 0,
    };
  },

  toJSON(message: ErrorEvent): unknown {
    const obj: any = {};
    message.message !== undefined && (obj.message = message.message);
    message.code !== undefined && (obj.code = Math.round(message.code));
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorEvent>, I>>(base?: I): ErrorEvent {
    return ErrorEvent.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ErrorEvent>, I>>(object: I): ErrorEvent {
    const message = createBaseErrorEvent();
    message.message = object.message ?? "";
    message.code = object.code ?? 0;
    return message;
  },
};

function createBaseReady(): Ready {
  return { id: "" };
}

export const Ready = {
  encode(message: Ready, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Ready {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReady();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ready {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: Ready): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<Ready>, I>>(base?: I): Ready {
    return Ready.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Ready>, I>>(object: I): Ready {
    const message = createBaseReady();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseTransactionStatus(): TransactionStatus {
  return { txnId: 0, succeeded: false, reason: undefined };
}

export const TransactionStatus = {
  encode(message: TransactionStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.txnId !== 0) {
      writer.uint32(8).uint32(message.txnId);
    }
    if (message.succeeded === true) {
      writer.uint32(16).bool(message.succeeded);
    }
    if (message.reason !== undefined) {
      writer.uint32(26).string(message.reason);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.txnId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.succeeded = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.reason = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionStatus {
    return {
      txnId: isSet(object.txnId) ? Number(object.txnId) : 0,
      succeeded: isSet(object.succeeded) ? Boolean(object.succeeded) : false,
      reason: isSet(object.reason) ? String(object.reason) : undefined,
    };
  },

  toJSON(message: TransactionStatus): unknown {
    const obj: any = {};
    message.txnId !== undefined && (obj.txnId = Math.round(message.txnId));
    message.succeeded !== undefined && (obj.succeeded = message.succeeded);
    message.reason !== undefined && (obj.reason = message.reason);
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionStatus>, I>>(base?: I): TransactionStatus {
    return TransactionStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<TransactionStatus>, I>>(object: I): TransactionStatus {
    const message = createBaseTransactionStatus();
    message.txnId = object.txnId ?? 0;
    message.succeeded = object.succeeded ?? false;
    message.reason = object.reason ?? undefined;
    return message;
  },
};

function createBasePlayerJoins(): PlayerJoins {
  return { encId: 0 };
}

export const PlayerJoins = {
  encode(message: PlayerJoins, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerJoins {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerJoins();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerJoins {
    return { encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: PlayerJoins): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerJoins>, I>>(base?: I): PlayerJoins {
    return PlayerJoins.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerJoins>, I>>(object: I): PlayerJoins {
    const message = createBasePlayerJoins();
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBaseGotRequestMute(): GotRequestMute {
  return { muterId: "", video: false };
}

export const GotRequestMute = {
  encode(message: GotRequestMute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.muterId !== "") {
      writer.uint32(10).string(message.muterId);
    }
    if (message.video === true) {
      writer.uint32(16).bool(message.video);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GotRequestMute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGotRequestMute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.muterId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.video = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GotRequestMute {
    return {
      muterId: isSet(object.muterId) ? String(object.muterId) : "",
      video: isSet(object.video) ? Boolean(object.video) : false,
    };
  },

  toJSON(message: GotRequestMute): unknown {
    const obj: any = {};
    message.muterId !== undefined && (obj.muterId = message.muterId);
    message.video !== undefined && (obj.video = message.video);
    return obj;
  },

  create<I extends Exact<DeepPartial<GotRequestMute>, I>>(base?: I): GotRequestMute {
    return GotRequestMute.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GotRequestMute>, I>>(object: I): GotRequestMute {
    const message = createBaseGotRequestMute();
    message.muterId = object.muterId ?? "";
    message.video = object.video ?? false;
    return message;
  },
};

function createBasePlayerMoves(): PlayerMoves {
  return { encId: 0, x: undefined, y: undefined, direction: undefined, mapId: undefined, lastInputId: 0 };
}

export const PlayerMoves = {
  encode(message: PlayerMoves, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.x !== undefined) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(24).uint32(message.y);
    }
    if (message.direction !== undefined) {
      writer.uint32(32).int32(message.direction);
    }
    if (message.mapId !== undefined) {
      writer.uint32(42).string(message.mapId);
    }
    if (message.lastInputId !== 0) {
      writer.uint32(48).uint32(message.lastInputId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerMoves {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerMoves();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.lastInputId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerMoves {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      x: isSet(object.x) ? Number(object.x) : undefined,
      y: isSet(object.y) ? Number(object.y) : undefined,
      direction: isSet(object.direction) ? spriteDirectionEnum_ENUMFromJSON271(object.direction) : undefined,
      mapId: isSet(object.mapId) ? String(object.mapId) : undefined,
      lastInputId: isSet(object.lastInputId) ? Number(object.lastInputId) : 0,
    };
  },

  toJSON(message: PlayerMoves): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.direction !== undefined && (obj.direction = message.direction !== undefined
      ? spriteDirectionEnum_ENUMToJSON272(message.direction)
      : undefined);
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.lastInputId !== undefined && (obj.lastInputId = Math.round(message.lastInputId));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerMoves>, I>>(base?: I): PlayerMoves {
    return PlayerMoves.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerMoves>, I>>(object: I): PlayerMoves {
    const message = createBasePlayerMoves();
    message.encId = object.encId ?? 0;
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    message.direction = object.direction ?? undefined;
    message.mapId = object.mapId ?? undefined;
    message.lastInputId = object.lastInputId ?? 0;
    return message;
  },
};

function createBasePlayerSetsStatus(): PlayerSetsStatus {
  return { encId: 0, busy: false };
}

export const PlayerSetsStatus = {
  encode(message: PlayerSetsStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.busy === true) {
      writer.uint32(16).bool(message.busy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.busy = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsStatus {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      busy: isSet(object.busy) ? Boolean(object.busy) : false,
    };
  },

  toJSON(message: PlayerSetsStatus): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.busy !== undefined && (obj.busy = message.busy);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsStatus>, I>>(base?: I): PlayerSetsStatus {
    return PlayerSetsStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsStatus>, I>>(object: I): PlayerSetsStatus {
    const message = createBasePlayerSetsStatus();
    message.encId = object.encId ?? 0;
    message.busy = object.busy ?? false;
    return message;
  },
};

function createBasePlayerSetsAvailability(): PlayerSetsAvailability {
  return { encId: 0, status: "", statusUpdatedAt: undefined, statusEndOption: undefined };
}

export const PlayerSetsAvailability = {
  encode(message: PlayerSetsAvailability, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.statusUpdatedAt !== undefined) {
      writer.uint32(26).string(message.statusUpdatedAt);
    }
    if (message.statusEndOption !== undefined) {
      writer.uint32(34).string(message.statusEndOption);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsAvailability {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsAvailability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.status = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.statusUpdatedAt = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.statusEndOption = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsAvailability {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      status: isSet(object.status) ? String(object.status) : "",
      statusUpdatedAt: isSet(object.statusUpdatedAt) ? String(object.statusUpdatedAt) : undefined,
      statusEndOption: isSet(object.statusEndOption) ? String(object.statusEndOption) : undefined,
    };
  },

  toJSON(message: PlayerSetsAvailability): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.status !== undefined && (obj.status = message.status);
    message.statusUpdatedAt !== undefined && (obj.statusUpdatedAt = message.statusUpdatedAt);
    message.statusEndOption !== undefined && (obj.statusEndOption = message.statusEndOption);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsAvailability>, I>>(base?: I): PlayerSetsAvailability {
    return PlayerSetsAvailability.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsAvailability>, I>>(object: I): PlayerSetsAvailability {
    const message = createBasePlayerSetsAvailability();
    message.encId = object.encId ?? 0;
    message.status = object.status ?? "";
    message.statusUpdatedAt = object.statusUpdatedAt ?? undefined;
    message.statusEndOption = object.statusEndOption ?? undefined;
    return message;
  },
};

function createBasePlayerSpotlights(): PlayerSpotlights {
  return { encId: 0, spotlightedBy: 0, spotlighted: 0 };
}

export const PlayerSpotlights = {
  encode(message: PlayerSpotlights, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(16).uint32(message.encId);
    }
    if (message.spotlightedBy !== 0) {
      writer.uint32(8).uint32(message.spotlightedBy);
    }
    if (message.spotlighted !== 0) {
      writer.uint32(24).uint32(message.spotlighted);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSpotlights {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSpotlights();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag != 16) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 1:
          if (tag != 8) {
            break;
          }

          message.spotlightedBy = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.spotlighted = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSpotlights {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      spotlightedBy: isSet(object.spotlightedBy) ? Number(object.spotlightedBy) : 0,
      spotlighted: isSet(object.spotlighted) ? Number(object.spotlighted) : 0,
    };
  },

  toJSON(message: PlayerSpotlights): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.spotlightedBy !== undefined && (obj.spotlightedBy = Math.round(message.spotlightedBy));
    message.spotlighted !== undefined && (obj.spotlighted = Math.round(message.spotlighted));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSpotlights>, I>>(base?: I): PlayerSpotlights {
    return PlayerSpotlights.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSpotlights>, I>>(object: I): PlayerSpotlights {
    const message = createBasePlayerSpotlights();
    message.encId = object.encId ?? 0;
    message.spotlightedBy = object.spotlightedBy ?? 0;
    message.spotlighted = object.spotlighted ?? 0;
    return message;
  },
};

function createBasePlayerRings(): PlayerRings {
  return { encId: 0 };
}

export const PlayerRings = {
  encode(message: PlayerRings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerRings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerRings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerRings {
    return { encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: PlayerRings): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerRings>, I>>(base?: I): PlayerRings {
    return PlayerRings.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerRings>, I>>(object: I): PlayerRings {
    const message = createBasePlayerRings();
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBasePlayerSetsImagePointer(): PlayerSetsImagePointer {
  return { encId: 0, objectId: "", x: 0, y: 0 };
}

export const PlayerSetsImagePointer = {
  encode(message: PlayerSetsImagePointer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.objectId !== "") {
      writer.uint32(18).string(message.objectId);
    }
    if (message.x !== 0) {
      writer.uint32(25).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(33).double(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsImagePointer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsImagePointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.objectId = reader.string();
          continue;
        case 3:
          if (tag != 25) {
            break;
          }

          message.x = reader.double();
          continue;
        case 4:
          if (tag != 33) {
            break;
          }

          message.y = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsImagePointer {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      objectId: isSet(object.objectId) ? String(object.objectId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
    };
  },

  toJSON(message: PlayerSetsImagePointer): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.objectId !== undefined && (obj.objectId = message.objectId);
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsImagePointer>, I>>(base?: I): PlayerSetsImagePointer {
    return PlayerSetsImagePointer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsImagePointer>, I>>(object: I): PlayerSetsImagePointer {
    const message = createBasePlayerSetsImagePointer();
    message.encId = object.encId ?? 0;
    message.objectId = object.objectId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseSetScreenPointerServer(): SetScreenPointerServer {
  return { encId: 0, screenId: "", x: 0, y: 0, color: "" };
}

export const SetScreenPointerServer = {
  encode(message: SetScreenPointerServer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.screenId !== "") {
      writer.uint32(18).string(message.screenId);
    }
    if (message.x !== 0) {
      writer.uint32(25).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(33).double(message.y);
    }
    if (message.color !== "") {
      writer.uint32(42).string(message.color);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetScreenPointerServer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetScreenPointerServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.screenId = reader.string();
          continue;
        case 3:
          if (tag != 25) {
            break;
          }

          message.x = reader.double();
          continue;
        case 4:
          if (tag != 33) {
            break;
          }

          message.y = reader.double();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.color = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetScreenPointerServer {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      screenId: isSet(object.screenId) ? String(object.screenId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      color: isSet(object.color) ? String(object.color) : "",
    };
  },

  toJSON(message: SetScreenPointerServer): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.screenId !== undefined && (obj.screenId = message.screenId);
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    message.color !== undefined && (obj.color = message.color);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetScreenPointerServer>, I>>(base?: I): SetScreenPointerServer {
    return SetScreenPointerServer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetScreenPointerServer>, I>>(object: I): SetScreenPointerServer {
    const message = createBaseSetScreenPointerServer();
    message.encId = object.encId ?? 0;
    message.screenId = object.screenId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.color = object.color ?? "";
    return message;
  },
};

function createBasePlayerChats(): PlayerChats {
  return {
    senderId: "",
    recipient: "",
    contents: "",
    senderName: "",
    timestamp: undefined,
    messageType: "",
    unixTime: 0,
    id: undefined,
    roomId: undefined,
    approved: undefined,
    nookId: undefined,
  };
}

export const PlayerChats = {
  encode(message: PlayerChats, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.senderId !== "") {
      writer.uint32(10).string(message.senderId);
    }
    if (message.recipient !== "") {
      writer.uint32(18).string(message.recipient);
    }
    if (message.contents !== "") {
      writer.uint32(26).string(message.contents);
    }
    if (message.senderName !== "") {
      writer.uint32(34).string(message.senderName);
    }
    if (message.timestamp !== undefined) {
      Timestamp165.encode(message.timestamp, writer.uint32(42).fork()).ldelim();
    }
    if (message.messageType !== "") {
      writer.uint32(50).string(message.messageType);
    }
    if (message.unixTime !== 0) {
      writer.uint32(57).double(message.unixTime);
    }
    if (message.id !== undefined) {
      writer.uint32(66).string(message.id);
    }
    if (message.roomId !== undefined) {
      writer.uint32(74).string(message.roomId);
    }
    if (message.approved !== undefined) {
      writer.uint32(80).bool(message.approved);
    }
    if (message.nookId !== undefined) {
      writer.uint32(90).string(message.nookId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerChats {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerChats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.senderId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.recipient = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.contents = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.timestamp = Timestamp165.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.messageType = reader.string();
          continue;
        case 7:
          if (tag != 57) {
            break;
          }

          message.unixTime = reader.double();
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.id = reader.string();
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.roomId = reader.string();
          continue;
        case 10:
          if (tag != 80) {
            break;
          }

          message.approved = reader.bool();
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.nookId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerChats {
    return {
      senderId: isSet(object.senderId) ? String(object.senderId) : "",
      recipient: isSet(object.recipient) ? String(object.recipient) : "",
      contents: isSet(object.contents) ? String(object.contents) : "",
      senderName: isSet(object.senderName) ? String(object.senderName) : "",
      timestamp: isSet(object.timestamp) ? Timestamp165.fromJSON(object.timestamp) : undefined,
      messageType: isSet(object.messageType) ? String(object.messageType) : "",
      unixTime: isSet(object.unixTime) ? Number(object.unixTime) : 0,
      id: isSet(object.id) ? String(object.id) : undefined,
      roomId: isSet(object.roomId) ? String(object.roomId) : undefined,
      approved: isSet(object.approved) ? Boolean(object.approved) : undefined,
      nookId: isSet(object.nookId) ? String(object.nookId) : undefined,
    };
  },

  toJSON(message: PlayerChats): unknown {
    const obj: any = {};
    message.senderId !== undefined && (obj.senderId = message.senderId);
    message.recipient !== undefined && (obj.recipient = message.recipient);
    message.contents !== undefined && (obj.contents = message.contents);
    message.senderName !== undefined && (obj.senderName = message.senderName);
    message.timestamp !== undefined &&
      (obj.timestamp = message.timestamp ? Timestamp165.toJSON(message.timestamp) : undefined);
    message.messageType !== undefined && (obj.messageType = message.messageType);
    message.unixTime !== undefined && (obj.unixTime = message.unixTime);
    message.id !== undefined && (obj.id = message.id);
    message.roomId !== undefined && (obj.roomId = message.roomId);
    message.approved !== undefined && (obj.approved = message.approved);
    message.nookId !== undefined && (obj.nookId = message.nookId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerChats>, I>>(base?: I): PlayerChats {
    return PlayerChats.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerChats>, I>>(object: I): PlayerChats {
    const message = createBasePlayerChats();
    message.senderId = object.senderId ?? "";
    message.recipient = object.recipient ?? "";
    message.contents = object.contents ?? "";
    message.senderName = object.senderName ?? "";
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Timestamp165.fromPartial(object.timestamp)
      : undefined;
    message.messageType = object.messageType ?? "";
    message.unixTime = object.unixTime ?? 0;
    message.id = object.id ?? undefined;
    message.roomId = object.roomId ?? undefined;
    message.approved = object.approved ?? undefined;
    message.nookId = object.nookId ?? undefined;
    return message;
  },
};

function createBasePlayerWaves(): PlayerWaves {
  return { encId: 0, targetId: "", isReply: false };
}

export const PlayerWaves = {
  encode(message: PlayerWaves, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.targetId !== "") {
      writer.uint32(18).string(message.targetId);
    }
    if (message.isReply === true) {
      writer.uint32(24).bool(message.isReply);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerWaves {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerWaves();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.isReply = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerWaves {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : "",
      isReply: isSet(object.isReply) ? Boolean(object.isReply) : false,
    };
  },

  toJSON(message: PlayerWaves): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.isReply !== undefined && (obj.isReply = message.isReply);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerWaves>, I>>(base?: I): PlayerWaves {
    return PlayerWaves.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerWaves>, I>>(object: I): PlayerWaves {
    const message = createBasePlayerWaves();
    message.encId = object.encId ?? 0;
    message.targetId = object.targetId ?? "";
    message.isReply = object.isReply ?? false;
    return message;
  },
};

function createBaseTimestamp(): Timestamp {
  return { seconds: 0, nanoseconds: 0 };
}

export const Timestamp = {
  encode(message: Timestamp, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.seconds !== 0) {
      writer.uint32(13).float(message.seconds);
    }
    if (message.nanoseconds !== 0) {
      writer.uint32(21).float(message.nanoseconds);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Timestamp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimestamp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 13) {
            break;
          }

          message.seconds = reader.float();
          continue;
        case 2:
          if (tag != 21) {
            break;
          }

          message.nanoseconds = reader.float();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Timestamp {
    return {
      seconds: isSet(object.seconds) ? Number(object.seconds) : 0,
      nanoseconds: isSet(object.nanoseconds) ? Number(object.nanoseconds) : 0,
    };
  },

  toJSON(message: Timestamp): unknown {
    const obj: any = {};
    message.seconds !== undefined && (obj.seconds = message.seconds);
    message.nanoseconds !== undefined && (obj.nanoseconds = message.nanoseconds);
    return obj;
  },

  create<I extends Exact<DeepPartial<Timestamp>, I>>(base?: I): Timestamp {
    return Timestamp.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Timestamp>, I>>(object: I): Timestamp {
    const message = createBaseTimestamp();
    message.seconds = object.seconds ?? 0;
    message.nanoseconds = object.nanoseconds ?? 0;
    return message;
  },
};

function createBasePlayerInteracts(): PlayerInteracts {
  return { encId: 0, objId: "", mapId: undefined, dataJson: undefined };
}

export const PlayerInteracts = {
  encode(message: PlayerInteracts, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.objId !== "") {
      writer.uint32(18).string(message.objId);
    }
    if (message.mapId !== undefined) {
      writer.uint32(34).string(message.mapId);
    }
    if (message.dataJson !== undefined) {
      writer.uint32(26).string(message.dataJson);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerInteracts {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerInteracts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.objId = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.dataJson = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerInteracts {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      objId: isSet(object.objId) ? String(object.objId) : "",
      mapId: isSet(object.mapId) ? String(object.mapId) : undefined,
      dataJson: isSet(object.dataJson) ? String(object.dataJson) : undefined,
    };
  },

  toJSON(message: PlayerInteracts): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.objId !== undefined && (obj.objId = message.objId);
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.dataJson !== undefined && (obj.dataJson = message.dataJson);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerInteracts>, I>>(base?: I): PlayerInteracts {
    return PlayerInteracts.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerInteracts>, I>>(object: I): PlayerInteracts {
    const message = createBasePlayerInteracts();
    message.encId = object.encId ?? 0;
    message.objId = object.objId ?? "";
    message.mapId = object.mapId ?? undefined;
    message.dataJson = object.dataJson ?? undefined;
    return message;
  },
};

function createBasePlayerGhosts(): PlayerGhosts {
  return { encId: 0, ghost: 0 };
}

export const PlayerGhosts = {
  encode(message: PlayerGhosts, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.ghost !== 0) {
      writer.uint32(16).uint32(message.ghost);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerGhosts {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerGhosts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.ghost = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerGhosts {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      ghost: isSet(object.ghost) ? Number(object.ghost) : 0,
    };
  },

  toJSON(message: PlayerGhosts): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.ghost !== undefined && (obj.ghost = Math.round(message.ghost));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerGhosts>, I>>(base?: I): PlayerGhosts {
    return PlayerGhosts.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerGhosts>, I>>(object: I): PlayerGhosts {
    const message = createBasePlayerGhosts();
    message.encId = object.encId ?? 0;
    message.ghost = object.ghost ?? 0;
    return message;
  },
};

function createBasePlayerEntersWhisper(): PlayerEntersWhisper {
  return { encId: 0, whisperRecipient: "", whisperId: "" };
}

export const PlayerEntersWhisper = {
  encode(message: PlayerEntersWhisper, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.whisperRecipient !== "") {
      writer.uint32(18).string(message.whisperRecipient);
    }
    if (message.whisperId !== "") {
      writer.uint32(26).string(message.whisperId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerEntersWhisper {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEntersWhisper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.whisperRecipient = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.whisperId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEntersWhisper {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      whisperRecipient: isSet(object.whisperRecipient) ? String(object.whisperRecipient) : "",
      whisperId: isSet(object.whisperId) ? String(object.whisperId) : "",
    };
  },

  toJSON(message: PlayerEntersWhisper): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.whisperRecipient !== undefined && (obj.whisperRecipient = message.whisperRecipient);
    message.whisperId !== undefined && (obj.whisperId = message.whisperId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEntersWhisper>, I>>(base?: I): PlayerEntersWhisper {
    return PlayerEntersWhisper.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerEntersWhisper>, I>>(object: I): PlayerEntersWhisper {
    const message = createBasePlayerEntersWhisper();
    message.encId = object.encId ?? 0;
    message.whisperRecipient = object.whisperRecipient ?? "";
    message.whisperId = object.whisperId ?? "";
    return message;
  },
};

function createBasePlayerEntersWhisperV2(): PlayerEntersWhisperV2 {
  return { encId: 0, encIdTarget: 0, whisperId: "" };
}

export const PlayerEntersWhisperV2 = {
  encode(message: PlayerEntersWhisperV2, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.encIdTarget !== 0) {
      writer.uint32(16).uint32(message.encIdTarget);
    }
    if (message.whisperId !== "") {
      writer.uint32(26).string(message.whisperId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerEntersWhisperV2 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEntersWhisperV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.encIdTarget = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.whisperId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEntersWhisperV2 {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      encIdTarget: isSet(object.encIdTarget) ? Number(object.encIdTarget) : 0,
      whisperId: isSet(object.whisperId) ? String(object.whisperId) : "",
    };
  },

  toJSON(message: PlayerEntersWhisperV2): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.encIdTarget !== undefined && (obj.encIdTarget = Math.round(message.encIdTarget));
    message.whisperId !== undefined && (obj.whisperId = message.whisperId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEntersWhisperV2>, I>>(base?: I): PlayerEntersWhisperV2 {
    return PlayerEntersWhisperV2.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerEntersWhisperV2>, I>>(object: I): PlayerEntersWhisperV2 {
    const message = createBasePlayerEntersWhisperV2();
    message.encId = object.encId ?? 0;
    message.encIdTarget = object.encIdTarget ?? 0;
    message.whisperId = object.whisperId ?? "";
    return message;
  },
};

function createBasePlayerLeavesWhisper(): PlayerLeavesWhisper {
  return { encId: 0 };
}

export const PlayerLeavesWhisper = {
  encode(message: PlayerLeavesWhisper, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerLeavesWhisper {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerLeavesWhisper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerLeavesWhisper {
    return { encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: PlayerLeavesWhisper): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerLeavesWhisper>, I>>(base?: I): PlayerLeavesWhisper {
    return PlayerLeavesWhisper.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerLeavesWhisper>, I>>(object: I): PlayerLeavesWhisper {
    const message = createBasePlayerLeavesWhisper();
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBasePlayerActivelySpeaks(): PlayerActivelySpeaks {
  return { encId: 0, activelySpeaking: 0 };
}

export const PlayerActivelySpeaks = {
  encode(message: PlayerActivelySpeaks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.activelySpeaking !== 0) {
      writer.uint32(16).uint32(message.activelySpeaking);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerActivelySpeaks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerActivelySpeaks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.activelySpeaking = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerActivelySpeaks {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      activelySpeaking: isSet(object.activelySpeaking) ? Number(object.activelySpeaking) : 0,
    };
  },

  toJSON(message: PlayerActivelySpeaks): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.activelySpeaking !== undefined && (obj.activelySpeaking = Math.round(message.activelySpeaking));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerActivelySpeaks>, I>>(base?: I): PlayerActivelySpeaks {
    return PlayerActivelySpeaks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerActivelySpeaks>, I>>(object: I): PlayerActivelySpeaks {
    const message = createBasePlayerActivelySpeaks();
    message.encId = object.encId ?? 0;
    message.activelySpeaking = object.activelySpeaking ?? 0;
    return message;
  },
};

function createBasePlayerSetsEmoteV2(): PlayerSetsEmoteV2 {
  return { encId: 0, emote: undefined, count: undefined };
}

export const PlayerSetsEmoteV2 = {
  encode(message: PlayerSetsEmoteV2, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.emote !== undefined) {
      writer.uint32(18).string(message.emote);
    }
    if (message.count !== undefined) {
      writer.uint32(24).uint32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsEmoteV2 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsEmoteV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.emote = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.count = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsEmoteV2 {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      emote: isSet(object.emote) ? String(object.emote) : undefined,
      count: isSet(object.count) ? Number(object.count) : undefined,
    };
  },

  toJSON(message: PlayerSetsEmoteV2): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.emote !== undefined && (obj.emote = message.emote);
    message.count !== undefined && (obj.count = Math.round(message.count));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsEmoteV2>, I>>(base?: I): PlayerSetsEmoteV2 {
    return PlayerSetsEmoteV2.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsEmoteV2>, I>>(object: I): PlayerSetsEmoteV2 {
    const message = createBasePlayerSetsEmoteV2();
    message.encId = object.encId ?? 0;
    message.emote = object.emote ?? undefined;
    message.count = object.count ?? undefined;
    return message;
  },
};

function createBasePlayerSetsWorkCondition(): PlayerSetsWorkCondition {
  return { encId: 0, workCondition: 0 };
}

export const PlayerSetsWorkCondition = {
  encode(message: PlayerSetsWorkCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.workCondition !== 0) {
      writer.uint32(16).uint32(message.workCondition);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsWorkCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsWorkCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.workCondition = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsWorkCondition {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      workCondition: isSet(object.workCondition) ? Number(object.workCondition) : 0,
    };
  },

  toJSON(message: PlayerSetsWorkCondition): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.workCondition !== undefined && (obj.workCondition = Math.round(message.workCondition));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsWorkCondition>, I>>(base?: I): PlayerSetsWorkCondition {
    return PlayerSetsWorkCondition.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsWorkCondition>, I>>(object: I): PlayerSetsWorkCondition {
    const message = createBasePlayerSetsWorkCondition();
    message.encId = object.encId ?? 0;
    message.workCondition = object.workCondition ?? 0;
    return message;
  },
};

function createBasePlayerSetsLastActive(): PlayerSetsLastActive {
  return { encId: 0, lastActive: "" };
}

export const PlayerSetsLastActive = {
  encode(message: PlayerSetsLastActive, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.lastActive !== "") {
      writer.uint32(18).string(message.lastActive);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsLastActive {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsLastActive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.lastActive = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsLastActive {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      lastActive: isSet(object.lastActive) ? String(object.lastActive) : "",
    };
  },

  toJSON(message: PlayerSetsLastActive): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.lastActive !== undefined && (obj.lastActive = message.lastActive);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsLastActive>, I>>(base?: I): PlayerSetsLastActive {
    return PlayerSetsLastActive.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsLastActive>, I>>(object: I): PlayerSetsLastActive {
    const message = createBasePlayerSetsLastActive();
    message.encId = object.encId ?? 0;
    message.lastActive = object.lastActive ?? "";
    return message;
  },
};

function createBasePlayerSetsName(): PlayerSetsName {
  return { encId: 0, name: "" };
}

export const PlayerSetsName = {
  encode(message: PlayerSetsName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsName {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      name: isSet(object.name) ? String(object.name) : "",
    };
  },

  toJSON(message: PlayerSetsName): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsName>, I>>(base?: I): PlayerSetsName {
    return PlayerSetsName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsName>, I>>(object: I): PlayerSetsName {
    const message = createBasePlayerSetsName();
    message.encId = object.encId ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBasePlayerSetsTextStatus(): PlayerSetsTextStatus {
  return { encId: 0, textStatus: "" };
}

export const PlayerSetsTextStatus = {
  encode(message: PlayerSetsTextStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.textStatus !== "") {
      writer.uint32(18).string(message.textStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsTextStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsTextStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.textStatus = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsTextStatus {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      textStatus: isSet(object.textStatus) ? String(object.textStatus) : "",
    };
  },

  toJSON(message: PlayerSetsTextStatus): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.textStatus !== undefined && (obj.textStatus = message.textStatus);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsTextStatus>, I>>(base?: I): PlayerSetsTextStatus {
    return PlayerSetsTextStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsTextStatus>, I>>(object: I): PlayerSetsTextStatus {
    const message = createBasePlayerSetsTextStatus();
    message.encId = object.encId ?? 0;
    message.textStatus = object.textStatus ?? "";
    return message;
  },
};

function createBasePlayerSetsPronouns(): PlayerSetsPronouns {
  return { encId: 0, pronouns: "" };
}

export const PlayerSetsPronouns = {
  encode(message: PlayerSetsPronouns, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.pronouns !== "") {
      writer.uint32(18).string(message.pronouns);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsPronouns {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsPronouns();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.pronouns = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsPronouns {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      pronouns: isSet(object.pronouns) ? String(object.pronouns) : "",
    };
  },

  toJSON(message: PlayerSetsPronouns): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.pronouns !== undefined && (obj.pronouns = message.pronouns);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsPronouns>, I>>(base?: I): PlayerSetsPronouns {
    return PlayerSetsPronouns.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsPronouns>, I>>(object: I): PlayerSetsPronouns {
    const message = createBasePlayerSetsPronouns();
    message.encId = object.encId ?? 0;
    message.pronouns = object.pronouns ?? "";
    return message;
  },
};

function createBasePlayerSetsTitle(): PlayerSetsTitle {
  return { encId: 0, title: "" };
}

export const PlayerSetsTitle = {
  encode(message: PlayerSetsTitle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsTitle {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsTitle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.title = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsTitle {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      title: isSet(object.title) ? String(object.title) : "",
    };
  },

  toJSON(message: PlayerSetsTitle): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.title !== undefined && (obj.title = message.title);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsTitle>, I>>(base?: I): PlayerSetsTitle {
    return PlayerSetsTitle.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsTitle>, I>>(object: I): PlayerSetsTitle {
    const message = createBasePlayerSetsTitle();
    message.encId = object.encId ?? 0;
    message.title = object.title ?? "";
    return message;
  },
};

function createBasePlayerSetsCity(): PlayerSetsCity {
  return { encId: 0, city: "" };
}

export const PlayerSetsCity = {
  encode(message: PlayerSetsCity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.city !== "") {
      writer.uint32(18).string(message.city);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsCity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsCity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.city = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsCity {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      city: isSet(object.city) ? String(object.city) : "",
    };
  },

  toJSON(message: PlayerSetsCity): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.city !== undefined && (obj.city = message.city);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsCity>, I>>(base?: I): PlayerSetsCity {
    return PlayerSetsCity.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsCity>, I>>(object: I): PlayerSetsCity {
    const message = createBasePlayerSetsCity();
    message.encId = object.encId ?? 0;
    message.city = object.city ?? "";
    return message;
  },
};

function createBasePlayerSetsCountry(): PlayerSetsCountry {
  return { encId: 0, country: "" };
}

export const PlayerSetsCountry = {
  encode(message: PlayerSetsCountry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.country !== "") {
      writer.uint32(18).string(message.country);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsCountry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsCountry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.country = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsCountry {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      country: isSet(object.country) ? String(object.country) : "",
    };
  },

  toJSON(message: PlayerSetsCountry): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.country !== undefined && (obj.country = message.country);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsCountry>, I>>(base?: I): PlayerSetsCountry {
    return PlayerSetsCountry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsCountry>, I>>(object: I): PlayerSetsCountry {
    const message = createBasePlayerSetsCountry();
    message.encId = object.encId ?? 0;
    message.country = object.country ?? "";
    return message;
  },
};

function createBasePlayerSetsStartDate(): PlayerSetsStartDate {
  return { encId: 0, startDate: "" };
}

export const PlayerSetsStartDate = {
  encode(message: PlayerSetsStartDate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.startDate !== "") {
      writer.uint32(18).string(message.startDate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsStartDate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsStartDate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.startDate = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsStartDate {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      startDate: isSet(object.startDate) ? String(object.startDate) : "",
    };
  },

  toJSON(message: PlayerSetsStartDate): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.startDate !== undefined && (obj.startDate = message.startDate);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsStartDate>, I>>(base?: I): PlayerSetsStartDate {
    return PlayerSetsStartDate.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsStartDate>, I>>(object: I): PlayerSetsStartDate {
    const message = createBasePlayerSetsStartDate();
    message.encId = object.encId ?? 0;
    message.startDate = object.startDate ?? "";
    return message;
  },
};

function createBasePlayerSetsTimezone(): PlayerSetsTimezone {
  return { encId: 0, timezone: "" };
}

export const PlayerSetsTimezone = {
  encode(message: PlayerSetsTimezone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.timezone !== "") {
      writer.uint32(18).string(message.timezone);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsTimezone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsTimezone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.timezone = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsTimezone {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      timezone: isSet(object.timezone) ? String(object.timezone) : "",
    };
  },

  toJSON(message: PlayerSetsTimezone): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.timezone !== undefined && (obj.timezone = message.timezone);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsTimezone>, I>>(base?: I): PlayerSetsTimezone {
    return PlayerSetsTimezone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsTimezone>, I>>(object: I): PlayerSetsTimezone {
    const message = createBasePlayerSetsTimezone();
    message.encId = object.encId ?? 0;
    message.timezone = object.timezone ?? "";
    return message;
  },
};

function createBasePlayerSetsPhone(): PlayerSetsPhone {
  return { encId: 0, phone: "" };
}

export const PlayerSetsPhone = {
  encode(message: PlayerSetsPhone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.phone !== "") {
      writer.uint32(18).string(message.phone);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsPhone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsPhone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.phone = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsPhone {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      phone: isSet(object.phone) ? String(object.phone) : "",
    };
  },

  toJSON(message: PlayerSetsPhone): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.phone !== undefined && (obj.phone = message.phone);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsPhone>, I>>(base?: I): PlayerSetsPhone {
    return PlayerSetsPhone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsPhone>, I>>(object: I): PlayerSetsPhone {
    const message = createBasePlayerSetsPhone();
    message.encId = object.encId ?? 0;
    message.phone = object.phone ?? "";
    return message;
  },
};

function createBasePlayerSetsDescription(): PlayerSetsDescription {
  return { encId: 0, description: "" };
}

export const PlayerSetsDescription = {
  encode(message: PlayerSetsDescription, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsDescription {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsDescription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsDescription {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      description: isSet(object.description) ? String(object.description) : "",
    };
  },

  toJSON(message: PlayerSetsDescription): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.description !== undefined && (obj.description = message.description);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsDescription>, I>>(base?: I): PlayerSetsDescription {
    return PlayerSetsDescription.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsDescription>, I>>(object: I): PlayerSetsDescription {
    const message = createBasePlayerSetsDescription();
    message.encId = object.encId ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBasePlayerSetsProfileImageUrl(): PlayerSetsProfileImageUrl {
  return { encId: 0, profileImageUrl: "" };
}

export const PlayerSetsProfileImageUrl = {
  encode(message: PlayerSetsProfileImageUrl, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.profileImageUrl !== "") {
      writer.uint32(18).string(message.profileImageUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsProfileImageUrl {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsProfileImageUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.profileImageUrl = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsProfileImageUrl {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      profileImageUrl: isSet(object.profileImageUrl) ? String(object.profileImageUrl) : "",
    };
  },

  toJSON(message: PlayerSetsProfileImageUrl): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.profileImageUrl !== undefined && (obj.profileImageUrl = message.profileImageUrl);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsProfileImageUrl>, I>>(base?: I): PlayerSetsProfileImageUrl {
    return PlayerSetsProfileImageUrl.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsProfileImageUrl>, I>>(object: I): PlayerSetsProfileImageUrl {
    const message = createBasePlayerSetsProfileImageUrl();
    message.encId = object.encId ?? 0;
    message.profileImageUrl = object.profileImageUrl ?? "";
    return message;
  },
};

function createBasePlayerSetsPersonalImageUrl(): PlayerSetsPersonalImageUrl {
  return { encId: 0, personalImageUrl: "" };
}

export const PlayerSetsPersonalImageUrl = {
  encode(message: PlayerSetsPersonalImageUrl, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.personalImageUrl !== "") {
      writer.uint32(18).string(message.personalImageUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsPersonalImageUrl {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsPersonalImageUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.personalImageUrl = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsPersonalImageUrl {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      personalImageUrl: isSet(object.personalImageUrl) ? String(object.personalImageUrl) : "",
    };
  },

  toJSON(message: PlayerSetsPersonalImageUrl): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.personalImageUrl !== undefined && (obj.personalImageUrl = message.personalImageUrl);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsPersonalImageUrl>, I>>(base?: I): PlayerSetsPersonalImageUrl {
    return PlayerSetsPersonalImageUrl.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsPersonalImageUrl>, I>>(object: I): PlayerSetsPersonalImageUrl {
    const message = createBasePlayerSetsPersonalImageUrl();
    message.encId = object.encId ?? 0;
    message.personalImageUrl = object.personalImageUrl ?? "";
    return message;
  },
};

function createBasePlayerSetsIsMobile(): PlayerSetsIsMobile {
  return { encId: 0, isMobile: false };
}

export const PlayerSetsIsMobile = {
  encode(message: PlayerSetsIsMobile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.isMobile === true) {
      writer.uint32(16).bool(message.isMobile);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsIsMobile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsIsMobile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isMobile = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsIsMobile {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      isMobile: isSet(object.isMobile) ? Boolean(object.isMobile) : false,
    };
  },

  toJSON(message: PlayerSetsIsMobile): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.isMobile !== undefined && (obj.isMobile = message.isMobile);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsIsMobile>, I>>(base?: I): PlayerSetsIsMobile {
    return PlayerSetsIsMobile.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsIsMobile>, I>>(object: I): PlayerSetsIsMobile {
    const message = createBasePlayerSetsIsMobile();
    message.encId = object.encId ?? 0;
    message.isMobile = object.isMobile ?? false;
    return message;
  },
};

function createBasePlayerSetsEmojiStatus(): PlayerSetsEmojiStatus {
  return { encId: 0, emojiStatus: "" };
}

export const PlayerSetsEmojiStatus = {
  encode(message: PlayerSetsEmojiStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.emojiStatus !== "") {
      writer.uint32(18).string(message.emojiStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsEmojiStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsEmojiStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.emojiStatus = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsEmojiStatus {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      emojiStatus: isSet(object.emojiStatus) ? String(object.emojiStatus) : "",
    };
  },

  toJSON(message: PlayerSetsEmojiStatus): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.emojiStatus !== undefined && (obj.emojiStatus = message.emojiStatus);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsEmojiStatus>, I>>(base?: I): PlayerSetsEmojiStatus {
    return PlayerSetsEmojiStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsEmojiStatus>, I>>(object: I): PlayerSetsEmojiStatus {
    const message = createBasePlayerSetsEmojiStatus();
    message.encId = object.encId ?? 0;
    message.emojiStatus = object.emojiStatus ?? "";
    return message;
  },
};

function createBasePlayerSetsAffiliation(): PlayerSetsAffiliation {
  return { encId: 0, affiliation: "" };
}

export const PlayerSetsAffiliation = {
  encode(message: PlayerSetsAffiliation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.affiliation !== "") {
      writer.uint32(18).string(message.affiliation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsAffiliation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsAffiliation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.affiliation = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsAffiliation {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      affiliation: isSet(object.affiliation) ? String(object.affiliation) : "",
    };
  },

  toJSON(message: PlayerSetsAffiliation): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.affiliation !== undefined && (obj.affiliation = message.affiliation);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsAffiliation>, I>>(base?: I): PlayerSetsAffiliation {
    return PlayerSetsAffiliation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsAffiliation>, I>>(object: I): PlayerSetsAffiliation {
    const message = createBasePlayerSetsAffiliation();
    message.encId = object.encId ?? 0;
    message.affiliation = object.affiliation ?? "";
    return message;
  },
};

function createBasePlayerExits(): PlayerExits {
  return { encId: 0 };
}

export const PlayerExits = {
  encode(message: PlayerExits, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerExits {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerExits();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerExits {
    return { encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: PlayerExits): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerExits>, I>>(base?: I): PlayerExits {
    return PlayerExits.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerExits>, I>>(object: I): PlayerExits {
    const message = createBasePlayerExits();
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBasePlayerSetsOutfitString(): PlayerSetsOutfitString {
  return { encId: 0, outfitString: "" };
}

export const PlayerSetsOutfitString = {
  encode(message: PlayerSetsOutfitString, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.outfitString !== "") {
      writer.uint32(18).string(message.outfitString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsOutfitString {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsOutfitString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.outfitString = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsOutfitString {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      outfitString: isSet(object.outfitString) ? String(object.outfitString) : "",
    };
  },

  toJSON(message: PlayerSetsOutfitString): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.outfitString !== undefined && (obj.outfitString = message.outfitString);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsOutfitString>, I>>(base?: I): PlayerSetsOutfitString {
    return PlayerSetsOutfitString.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsOutfitString>, I>>(object: I): PlayerSetsOutfitString {
    const message = createBasePlayerSetsOutfitString();
    message.encId = object.encId ?? 0;
    message.outfitString = object.outfitString ?? "";
    return message;
  },
};

function createBasePlayerSetsIsSignedIn(): PlayerSetsIsSignedIn {
  return { encId: 0, isSignedIn: false };
}

export const PlayerSetsIsSignedIn = {
  encode(message: PlayerSetsIsSignedIn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.isSignedIn === true) {
      writer.uint32(16).bool(message.isSignedIn);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsIsSignedIn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsIsSignedIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isSignedIn = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsIsSignedIn {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      isSignedIn: isSet(object.isSignedIn) ? Boolean(object.isSignedIn) : false,
    };
  },

  toJSON(message: PlayerSetsIsSignedIn): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.isSignedIn !== undefined && (obj.isSignedIn = message.isSignedIn);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsIsSignedIn>, I>>(base?: I): PlayerSetsIsSignedIn {
    return PlayerSetsIsSignedIn.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsIsSignedIn>, I>>(object: I): PlayerSetsIsSignedIn {
    const message = createBasePlayerSetsIsSignedIn();
    message.encId = object.encId ?? 0;
    message.isSignedIn = object.isSignedIn ?? false;
    return message;
  },
};

function createBaseRespawnComplete(): RespawnComplete {
  return {};
}

export const RespawnComplete = {
  encode(_: RespawnComplete, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RespawnComplete {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespawnComplete();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespawnComplete {
    return {};
  },

  toJSON(_: RespawnComplete): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespawnComplete>, I>>(base?: I): RespawnComplete {
    return RespawnComplete.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RespawnComplete>, I>>(_: I): RespawnComplete {
    const message = createBaseRespawnComplete();
    return message;
  },
};

function createBaseSpaceOverwrites(): SpaceOverwrites {
  return { spaceData: "" };
}

export const SpaceOverwrites = {
  encode(message: SpaceOverwrites, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spaceData !== "") {
      writer.uint32(10).string(message.spaceData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceOverwrites {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceOverwrites();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.spaceData = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceOverwrites {
    return { spaceData: isSet(object.spaceData) ? String(object.spaceData) : "" };
  },

  toJSON(message: SpaceOverwrites): unknown {
    const obj: any = {};
    message.spaceData !== undefined && (obj.spaceData = message.spaceData);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceOverwrites>, I>>(base?: I): SpaceOverwrites {
    return SpaceOverwrites.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceOverwrites>, I>>(object: I): SpaceOverwrites {
    const message = createBaseSpaceOverwrites();
    message.spaceData = object.spaceData ?? "";
    return message;
  },
};

function createBaseDynamicGate(): DynamicGate {
  return { exposure: 0, spaces: [], refreshOnChange: undefined };
}

export const DynamicGate = {
  encode(message: DynamicGate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.exposure !== 0) {
      writer.uint32(13).float(message.exposure);
    }
    for (const v of message.spaces) {
      writer.uint32(18).string(v!);
    }
    if (message.refreshOnChange !== undefined) {
      writer.uint32(24).bool(message.refreshOnChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DynamicGate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicGate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 13) {
            break;
          }

          message.exposure = reader.float();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.spaces.push(reader.string());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.refreshOnChange = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicGate {
    return {
      exposure: isSet(object.exposure) ? Number(object.exposure) : 0,
      spaces: Array.isArray(object?.spaces) ? object.spaces.map((e: any) => String(e)) : [],
      refreshOnChange: isSet(object.refreshOnChange) ? Boolean(object.refreshOnChange) : undefined,
    };
  },

  toJSON(message: DynamicGate): unknown {
    const obj: any = {};
    message.exposure !== undefined && (obj.exposure = message.exposure);
    if (message.spaces) {
      obj.spaces = message.spaces.map((e) => e);
    } else {
      obj.spaces = [];
    }
    message.refreshOnChange !== undefined && (obj.refreshOnChange = message.refreshOnChange);
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicGate>, I>>(base?: I): DynamicGate {
    return DynamicGate.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DynamicGate>, I>>(object: I): DynamicGate {
    const message = createBaseDynamicGate();
    message.exposure = object.exposure ?? 0;
    message.spaces = object.spaces?.map((e) => e) || [];
    message.refreshOnChange = object.refreshOnChange ?? undefined;
    return message;
  },
};

function createBaseDynamicGates(): DynamicGates {
  return { livekitEnabled: undefined, livekitSelfhostEnabled: undefined, agoraEnabled: undefined };
}

export const DynamicGates = {
  encode(message: DynamicGates, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.livekitEnabled !== undefined) {
      DynamicGate166.encode(message.livekitEnabled, writer.uint32(10).fork()).ldelim();
    }
    if (message.livekitSelfhostEnabled !== undefined) {
      DynamicGate166.encode(message.livekitSelfhostEnabled, writer.uint32(18).fork()).ldelim();
    }
    if (message.agoraEnabled !== undefined) {
      DynamicGate166.encode(message.agoraEnabled, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DynamicGates {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicGates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.livekitEnabled = DynamicGate166.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.livekitSelfhostEnabled = DynamicGate166.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.agoraEnabled = DynamicGate166.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicGates {
    return {
      livekitEnabled: isSet(object.livekitEnabled) ? DynamicGate166.fromJSON(object.livekitEnabled) : undefined,
      livekitSelfhostEnabled: isSet(object.livekitSelfhostEnabled)
        ? DynamicGate166.fromJSON(object.livekitSelfhostEnabled)
        : undefined,
      agoraEnabled: isSet(object.agoraEnabled) ? DynamicGate166.fromJSON(object.agoraEnabled) : undefined,
    };
  },

  toJSON(message: DynamicGates): unknown {
    const obj: any = {};
    message.livekitEnabled !== undefined &&
      (obj.livekitEnabled = message.livekitEnabled ? DynamicGate166.toJSON(message.livekitEnabled) : undefined);
    message.livekitSelfhostEnabled !== undefined && (obj.livekitSelfhostEnabled = message.livekitSelfhostEnabled
      ? DynamicGate166.toJSON(message.livekitSelfhostEnabled)
      : undefined);
    message.agoraEnabled !== undefined &&
      (obj.agoraEnabled = message.agoraEnabled ? DynamicGate166.toJSON(message.agoraEnabled) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicGates>, I>>(base?: I): DynamicGates {
    return DynamicGates.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<DynamicGates>, I>>(object: I): DynamicGates {
    const message = createBaseDynamicGates();
    message.livekitEnabled = (object.livekitEnabled !== undefined && object.livekitEnabled !== null)
      ? DynamicGate166.fromPartial(object.livekitEnabled)
      : undefined;
    message.livekitSelfhostEnabled =
      (object.livekitSelfhostEnabled !== undefined && object.livekitSelfhostEnabled !== null)
        ? DynamicGate166.fromPartial(object.livekitSelfhostEnabled)
        : undefined;
    message.agoraEnabled = (object.agoraEnabled !== undefined && object.agoraEnabled !== null)
      ? DynamicGate166.fromPartial(object.agoraEnabled)
      : undefined;
    return message;
  },
};

function createBaseSpaceSetsSpaceMembers(): SpaceSetsSpaceMembers {
  return { members: {} };
}

export const SpaceSetsSpaceMembers = {
  encode(message: SpaceSetsSpaceMembers, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.members).forEach(([key, value]) => {
      SpaceSetsSpaceMembers_MembersEntry290.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceSetsSpaceMembers {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceSetsSpaceMembers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = SpaceSetsSpaceMembers_MembersEntry290.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.members[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceSetsSpaceMembers {
    return {
      members: isObject(object.members)
        ? Object.entries(object.members).reduce<{ [key: string]: SpaceMemberInfo167 }>((acc, [key, value]) => {
          acc[key] = SpaceMemberInfo167.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SpaceSetsSpaceMembers): unknown {
    const obj: any = {};
    obj.members = {};
    if (message.members) {
      Object.entries(message.members).forEach(([k, v]) => {
        obj.members[k] = SpaceMemberInfo167.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceSetsSpaceMembers>, I>>(base?: I): SpaceSetsSpaceMembers {
    return SpaceSetsSpaceMembers.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceSetsSpaceMembers>, I>>(object: I): SpaceSetsSpaceMembers {
    const message = createBaseSpaceSetsSpaceMembers();
    message.members = Object.entries(object.members ?? {}).reduce<{ [key: string]: SpaceMemberInfo167 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = SpaceMemberInfo167.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSpaceSetsSpaceMembers_MembersEntry(): SpaceSetsSpaceMembers_MembersEntry {
  return { key: "", value: undefined };
}

export const SpaceSetsSpaceMembers_MembersEntry = {
  encode(message: SpaceSetsSpaceMembers_MembersEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SpaceMemberInfo167.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceSetsSpaceMembers_MembersEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceSetsSpaceMembers_MembersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = SpaceMemberInfo167.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceSetsSpaceMembers_MembersEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? SpaceMemberInfo167.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SpaceSetsSpaceMembers_MembersEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? SpaceMemberInfo167.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceSetsSpaceMembers_MembersEntry>, I>>(
    base?: I,
  ): SpaceSetsSpaceMembers_MembersEntry {
    return SpaceSetsSpaceMembers_MembersEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceSetsSpaceMembers_MembersEntry>, I>>(
    object: I,
  ): SpaceSetsSpaceMembers_MembersEntry {
    const message = createBaseSpaceSetsSpaceMembers_MembersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SpaceMemberInfo167.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseSpaceIsClosed(): SpaceIsClosed {
  return {};
}

export const SpaceIsClosed = {
  encode(_: SpaceIsClosed, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceIsClosed {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceIsClosed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SpaceIsClosed {
    return {};
  },

  toJSON(_: SpaceIsClosed): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceIsClosed>, I>>(base?: I): SpaceIsClosed {
    return SpaceIsClosed.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceIsClosed>, I>>(_: I): SpaceIsClosed {
    const message = createBaseSpaceIsClosed();
    return message;
  },
};

function createBasePlayerEntersPortal(): PlayerEntersPortal {
  return { targetUrl: "", bypassPrompt: undefined };
}

export const PlayerEntersPortal = {
  encode(message: PlayerEntersPortal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetUrl !== "") {
      writer.uint32(10).string(message.targetUrl);
    }
    if (message.bypassPrompt !== undefined) {
      writer.uint32(16).bool(message.bypassPrompt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerEntersPortal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEntersPortal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.targetUrl = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.bypassPrompt = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEntersPortal {
    return {
      targetUrl: isSet(object.targetUrl) ? String(object.targetUrl) : "",
      bypassPrompt: isSet(object.bypassPrompt) ? Boolean(object.bypassPrompt) : undefined,
    };
  },

  toJSON(message: PlayerEntersPortal): unknown {
    const obj: any = {};
    message.targetUrl !== undefined && (obj.targetUrl = message.targetUrl);
    message.bypassPrompt !== undefined && (obj.bypassPrompt = message.bypassPrompt);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEntersPortal>, I>>(base?: I): PlayerEntersPortal {
    return PlayerEntersPortal.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerEntersPortal>, I>>(object: I): PlayerEntersPortal {
    const message = createBasePlayerEntersPortal();
    message.targetUrl = object.targetUrl ?? "";
    message.bypassPrompt = object.bypassPrompt ?? undefined;
    return message;
  },
};

function createBaseCookieFound(): CookieFound {
  return { encId: 0 };
}

export const CookieFound = {
  encode(message: CookieFound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CookieFound {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCookieFound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CookieFound {
    return { encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: CookieFound): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<CookieFound>, I>>(base?: I): CookieFound {
    return CookieFound.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CookieFound>, I>>(object: I): CookieFound {
    const message = createBaseCookieFound();
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBaseSpaceSetsIdMapping(): SpaceSetsIdMapping {
  return { uid: "", encId: 0 };
}

export const SpaceSetsIdMapping = {
  encode(message: SpaceSetsIdMapping, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.encId !== 0) {
      writer.uint32(16).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceSetsIdMapping {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceSetsIdMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceSetsIdMapping {
    return { uid: isSet(object.uid) ? String(object.uid) : "", encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: SpaceSetsIdMapping): unknown {
    const obj: any = {};
    message.uid !== undefined && (obj.uid = message.uid);
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceSetsIdMapping>, I>>(base?: I): SpaceSetsIdMapping {
    return SpaceSetsIdMapping.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceSetsIdMapping>, I>>(object: I): SpaceSetsIdMapping {
    const message = createBaseSpaceSetsIdMapping();
    message.uid = object.uid ?? "";
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBasePlayerShootsConfetti(): PlayerShootsConfetti {
  return { encId: 0 };
}

export const PlayerShootsConfetti = {
  encode(message: PlayerShootsConfetti, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerShootsConfetti {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerShootsConfetti();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerShootsConfetti {
    return { encId: isSet(object.encId) ? Number(object.encId) : 0 };
  },

  toJSON(message: PlayerShootsConfetti): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerShootsConfetti>, I>>(base?: I): PlayerShootsConfetti {
    return PlayerShootsConfetti.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerShootsConfetti>, I>>(object: I): PlayerShootsConfetti {
    const message = createBasePlayerShootsConfetti();
    message.encId = object.encId ?? 0;
    return message;
  },
};

function createBasePlayerSetsEventStatus(): PlayerSetsEventStatus {
  return { encId: 0, eventStatus: "" };
}

export const PlayerSetsEventStatus = {
  encode(message: PlayerSetsEventStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.eventStatus !== "") {
      writer.uint32(18).string(message.eventStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsEventStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsEventStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.eventStatus = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsEventStatus {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      eventStatus: isSet(object.eventStatus) ? String(object.eventStatus) : "",
    };
  },

  toJSON(message: PlayerSetsEventStatus): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.eventStatus !== undefined && (obj.eventStatus = message.eventStatus);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsEventStatus>, I>>(base?: I): PlayerSetsEventStatus {
    return PlayerSetsEventStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsEventStatus>, I>>(object: I): PlayerSetsEventStatus {
    const message = createBasePlayerSetsEventStatus();
    message.encId = object.encId ?? 0;
    message.eventStatus = object.eventStatus ?? "";
    return message;
  },
};

function createBasePlayerSetsInConversation(): PlayerSetsInConversation {
  return { encId: 0, inConversation: false };
}

export const PlayerSetsInConversation = {
  encode(message: PlayerSetsInConversation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.inConversation === true) {
      writer.uint32(16).bool(message.inConversation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsInConversation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsInConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.inConversation = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsInConversation {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      inConversation: isSet(object.inConversation) ? Boolean(object.inConversation) : false,
    };
  },

  toJSON(message: PlayerSetsInConversation): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.inConversation !== undefined && (obj.inConversation = message.inConversation);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsInConversation>, I>>(base?: I): PlayerSetsInConversation {
    return PlayerSetsInConversation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsInConversation>, I>>(object: I): PlayerSetsInConversation {
    const message = createBasePlayerSetsInConversation();
    message.encId = object.encId ?? 0;
    message.inConversation = object.inConversation ?? false;
    return message;
  },
};

function createBasePlayerSetsCurrentDesk(): PlayerSetsCurrentDesk {
  return { encId: 0, currentDesk: "" };
}

export const PlayerSetsCurrentDesk = {
  encode(message: PlayerSetsCurrentDesk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.currentDesk !== "") {
      writer.uint32(18).string(message.currentDesk);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsCurrentDesk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsCurrentDesk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.currentDesk = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsCurrentDesk {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      currentDesk: isSet(object.currentDesk) ? String(object.currentDesk) : "",
    };
  },

  toJSON(message: PlayerSetsCurrentDesk): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.currentDesk !== undefined && (obj.currentDesk = message.currentDesk);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsCurrentDesk>, I>>(base?: I): PlayerSetsCurrentDesk {
    return PlayerSetsCurrentDesk.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsCurrentDesk>, I>>(object: I): PlayerSetsCurrentDesk {
    const message = createBasePlayerSetsCurrentDesk();
    message.encId = object.encId ?? 0;
    message.currentDesk = object.currentDesk ?? "";
    return message;
  },
};

function createBasePlayerSetsCurrentArea(): PlayerSetsCurrentArea {
  return { encId: 0, currentArea: "" };
}

export const PlayerSetsCurrentArea = {
  encode(message: PlayerSetsCurrentArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.currentArea !== "") {
      writer.uint32(18).string(message.currentArea);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsCurrentArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsCurrentArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.currentArea = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsCurrentArea {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      currentArea: isSet(object.currentArea) ? String(object.currentArea) : "",
    };
  },

  toJSON(message: PlayerSetsCurrentArea): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.currentArea !== undefined && (obj.currentArea = message.currentArea);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsCurrentArea>, I>>(base?: I): PlayerSetsCurrentArea {
    return PlayerSetsCurrentArea.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsCurrentArea>, I>>(object: I): PlayerSetsCurrentArea {
    const message = createBasePlayerSetsCurrentArea();
    message.encId = object.encId ?? 0;
    message.currentArea = object.currentArea ?? "";
    return message;
  },
};

function createBasePlayerSetsGoKartId(): PlayerSetsGoKartId {
  return { encId: 0, goKartId: "" };
}

export const PlayerSetsGoKartId = {
  encode(message: PlayerSetsGoKartId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.goKartId !== "") {
      writer.uint32(18).string(message.goKartId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsGoKartId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsGoKartId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.goKartId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsGoKartId {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      goKartId: isSet(object.goKartId) ? String(object.goKartId) : "",
    };
  },

  toJSON(message: PlayerSetsGoKartId): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.goKartId !== undefined && (obj.goKartId = message.goKartId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsGoKartId>, I>>(base?: I): PlayerSetsGoKartId {
    return PlayerSetsGoKartId.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsGoKartId>, I>>(object: I): PlayerSetsGoKartId {
    const message = createBasePlayerSetsGoKartId();
    message.encId = object.encId ?? 0;
    message.goKartId = object.goKartId ?? "";
    return message;
  },
};

function createBasePlayerSetsVehicleId(): PlayerSetsVehicleId {
  return { encId: 0, vehicleId: "", action: "", previousVehicleId: "" };
}

export const PlayerSetsVehicleId = {
  encode(message: PlayerSetsVehicleId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.vehicleId !== "") {
      writer.uint32(18).string(message.vehicleId);
    }
    if (message.action !== "") {
      writer.uint32(26).string(message.action);
    }
    if (message.previousVehicleId !== "") {
      writer.uint32(34).string(message.previousVehicleId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsVehicleId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsVehicleId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.vehicleId = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.action = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.previousVehicleId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsVehicleId {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      vehicleId: isSet(object.vehicleId) ? String(object.vehicleId) : "",
      action: isSet(object.action) ? String(object.action) : "",
      previousVehicleId: isSet(object.previousVehicleId) ? String(object.previousVehicleId) : "",
    };
  },

  toJSON(message: PlayerSetsVehicleId): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.vehicleId !== undefined && (obj.vehicleId = message.vehicleId);
    message.action !== undefined && (obj.action = message.action);
    message.previousVehicleId !== undefined && (obj.previousVehicleId = message.previousVehicleId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsVehicleId>, I>>(base?: I): PlayerSetsVehicleId {
    return PlayerSetsVehicleId.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsVehicleId>, I>>(object: I): PlayerSetsVehicleId {
    const message = createBasePlayerSetsVehicleId();
    message.encId = object.encId ?? 0;
    message.vehicleId = object.vehicleId ?? "";
    message.action = object.action ?? "";
    message.previousVehicleId = object.previousVehicleId ?? "";
    return message;
  },
};

function createBasePlayerSetsSpeedModifier(): PlayerSetsSpeedModifier {
  return { encId: 0, speedModifier: 0 };
}

export const PlayerSetsSpeedModifier = {
  encode(message: PlayerSetsSpeedModifier, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.speedModifier !== 0) {
      writer.uint32(21).float(message.speedModifier);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsSpeedModifier {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsSpeedModifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 21) {
            break;
          }

          message.speedModifier = reader.float();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsSpeedModifier {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      speedModifier: isSet(object.speedModifier) ? Number(object.speedModifier) : 0,
    };
  },

  toJSON(message: PlayerSetsSpeedModifier): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.speedModifier !== undefined && (obj.speedModifier = message.speedModifier);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsSpeedModifier>, I>>(base?: I): PlayerSetsSpeedModifier {
    return PlayerSetsSpeedModifier.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsSpeedModifier>, I>>(object: I): PlayerSetsSpeedModifier {
    const message = createBasePlayerSetsSpeedModifier();
    message.encId = object.encId ?? 0;
    message.speedModifier = object.speedModifier ?? 0;
    return message;
  },
};

function createBasePlayerSetsIsAlone(): PlayerSetsIsAlone {
  return { encId: 0, isAlone: false };
}

export const PlayerSetsIsAlone = {
  encode(message: PlayerSetsIsAlone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.isAlone === true) {
      writer.uint32(16).bool(message.isAlone);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsIsAlone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsIsAlone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isAlone = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsIsAlone {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      isAlone: isSet(object.isAlone) ? Boolean(object.isAlone) : false,
    };
  },

  toJSON(message: PlayerSetsIsAlone): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.isAlone !== undefined && (obj.isAlone = message.isAlone);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsIsAlone>, I>>(base?: I): PlayerSetsIsAlone {
    return PlayerSetsIsAlone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsIsAlone>, I>>(object: I): PlayerSetsIsAlone {
    const message = createBasePlayerSetsIsAlone();
    message.encId = object.encId ?? 0;
    message.isAlone = object.isAlone ?? false;
    return message;
  },
};

function createBaseSpacePlaysSound(): SpacePlaysSound {
  return { src: "", volume: 0 };
}

export const SpacePlaysSound = {
  encode(message: SpacePlaysSound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(18).string(message.src);
    }
    if (message.volume !== 0) {
      writer.uint32(29).float(message.volume);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpacePlaysSound {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpacePlaysSound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag != 18) {
            break;
          }

          message.src = reader.string();
          continue;
        case 3:
          if (tag != 29) {
            break;
          }

          message.volume = reader.float();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpacePlaysSound {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      volume: isSet(object.volume) ? Number(object.volume) : 0,
    };
  },

  toJSON(message: SpacePlaysSound): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.volume !== undefined && (obj.volume = message.volume);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpacePlaysSound>, I>>(base?: I): SpacePlaysSound {
    return SpacePlaysSound.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpacePlaysSound>, I>>(object: I): SpacePlaysSound {
    const message = createBaseSpacePlaysSound();
    message.src = object.src ?? "";
    message.volume = object.volume ?? 0;
    return message;
  },
};

function createBaseSpaceStopsSound(): SpaceStopsSound {
  return { src: "" };
}

export const SpaceStopsSound = {
  encode(message: SpaceStopsSound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(18).string(message.src);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceStopsSound {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceStopsSound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag != 18) {
            break;
          }

          message.src = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceStopsSound {
    return { src: isSet(object.src) ? String(object.src) : "" };
  },

  toJSON(message: SpaceStopsSound): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceStopsSound>, I>>(base?: I): SpaceStopsSound {
    return SpaceStopsSound.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceStopsSound>, I>>(object: I): SpaceStopsSound {
    const message = createBaseSpaceStopsSound();
    message.src = object.src ?? "";
    return message;
  },
};

function createBasePlayerSetsFocusModeEndTime(): PlayerSetsFocusModeEndTime {
  return { encId: 0, focusModeEndTime: "" };
}

export const PlayerSetsFocusModeEndTime = {
  encode(message: PlayerSetsFocusModeEndTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.focusModeEndTime !== "") {
      writer.uint32(18).string(message.focusModeEndTime);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsFocusModeEndTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsFocusModeEndTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.focusModeEndTime = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsFocusModeEndTime {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      focusModeEndTime: isSet(object.focusModeEndTime) ? String(object.focusModeEndTime) : "",
    };
  },

  toJSON(message: PlayerSetsFocusModeEndTime): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.focusModeEndTime !== undefined && (obj.focusModeEndTime = message.focusModeEndTime);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsFocusModeEndTime>, I>>(base?: I): PlayerSetsFocusModeEndTime {
    return PlayerSetsFocusModeEndTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsFocusModeEndTime>, I>>(object: I): PlayerSetsFocusModeEndTime {
    const message = createBasePlayerSetsFocusModeEndTime();
    message.encId = object.encId ?? 0;
    message.focusModeEndTime = object.focusModeEndTime ?? "";
    return message;
  },
};

function createBasePlayerBlocks(): PlayerBlocks {
  return { blockedBy: "", blocked: false };
}

export const PlayerBlocks = {
  encode(message: PlayerBlocks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blockedBy !== "") {
      writer.uint32(10).string(message.blockedBy);
    }
    if (message.blocked === true) {
      writer.uint32(16).bool(message.blocked);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerBlocks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerBlocks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.blockedBy = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.blocked = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerBlocks {
    return {
      blockedBy: isSet(object.blockedBy) ? String(object.blockedBy) : "",
      blocked: isSet(object.blocked) ? Boolean(object.blocked) : false,
    };
  },

  toJSON(message: PlayerBlocks): unknown {
    const obj: any = {};
    message.blockedBy !== undefined && (obj.blockedBy = message.blockedBy);
    message.blocked !== undefined && (obj.blocked = message.blocked);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerBlocks>, I>>(base?: I): PlayerBlocks {
    return PlayerBlocks.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerBlocks>, I>>(object: I): PlayerBlocks {
    const message = createBasePlayerBlocks();
    message.blockedBy = object.blockedBy ?? "";
    message.blocked = object.blocked ?? false;
    return message;
  },
};

function createBaseCustomEvent(): CustomEvent {
  return { name: "", payload: "" };
}

export const CustomEvent = {
  encode(message: CustomEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.payload !== "") {
      writer.uint32(18).string(message.payload);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CustomEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.payload = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomEvent {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      payload: isSet(object.payload) ? String(object.payload) : "",
    };
  },

  toJSON(message: CustomEvent): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.payload !== undefined && (obj.payload = message.payload);
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomEvent>, I>>(base?: I): CustomEvent {
    return CustomEvent.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CustomEvent>, I>>(object: I): CustomEvent {
    const message = createBaseCustomEvent();
    message.name = object.name ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBasePlayerUpdatesFocusModeStatus(): PlayerUpdatesFocusModeStatus {
  return { encId: 0, isInFocusMode: false };
}

export const PlayerUpdatesFocusModeStatus = {
  encode(message: PlayerUpdatesFocusModeStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.isInFocusMode === true) {
      writer.uint32(16).bool(message.isInFocusMode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerUpdatesFocusModeStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerUpdatesFocusModeStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isInFocusMode = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerUpdatesFocusModeStatus {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      isInFocusMode: isSet(object.isInFocusMode) ? Boolean(object.isInFocusMode) : false,
    };
  },

  toJSON(message: PlayerUpdatesFocusModeStatus): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.isInFocusMode !== undefined && (obj.isInFocusMode = message.isInFocusMode);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerUpdatesFocusModeStatus>, I>>(base?: I): PlayerUpdatesFocusModeStatus {
    return PlayerUpdatesFocusModeStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerUpdatesFocusModeStatus>, I>>(object: I): PlayerUpdatesFocusModeStatus {
    const message = createBasePlayerUpdatesFocusModeStatus();
    message.encId = object.encId ?? 0;
    message.isInFocusMode = object.isInFocusMode ?? false;
    return message;
  },
};

function createBasePlayerSetsItemString(): PlayerSetsItemString {
  return { encId: 0, itemString: "" };
}

export const PlayerSetsItemString = {
  encode(message: PlayerSetsItemString, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.itemString !== "") {
      writer.uint32(18).string(message.itemString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsItemString {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsItemString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.itemString = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsItemString {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      itemString: isSet(object.itemString) ? String(object.itemString) : "",
    };
  },

  toJSON(message: PlayerSetsItemString): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.itemString !== undefined && (obj.itemString = message.itemString);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsItemString>, I>>(base?: I): PlayerSetsItemString {
    return PlayerSetsItemString.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsItemString>, I>>(object: I): PlayerSetsItemString {
    const message = createBasePlayerSetsItemString();
    message.encId = object.encId ?? 0;
    message.itemString = object.itemString ?? "";
    return message;
  },
};

function createBasePlayerTriggersItem(): PlayerTriggersItem {
  return { encId: 0, closestObject: undefined, closestObjectTemplate: undefined };
}

export const PlayerTriggersItem = {
  encode(message: PlayerTriggersItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.closestObject !== undefined) {
      writer.uint32(18).string(message.closestObject);
    }
    if (message.closestObjectTemplate !== undefined) {
      writer.uint32(26).string(message.closestObjectTemplate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerTriggersItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerTriggersItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.closestObject = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.closestObjectTemplate = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerTriggersItem {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      closestObject: isSet(object.closestObject) ? String(object.closestObject) : undefined,
      closestObjectTemplate: isSet(object.closestObjectTemplate) ? String(object.closestObjectTemplate) : undefined,
    };
  },

  toJSON(message: PlayerTriggersItem): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.closestObject !== undefined && (obj.closestObject = message.closestObject);
    message.closestObjectTemplate !== undefined && (obj.closestObjectTemplate = message.closestObjectTemplate);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerTriggersItem>, I>>(base?: I): PlayerTriggersItem {
    return PlayerTriggersItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerTriggersItem>, I>>(object: I): PlayerTriggersItem {
    const message = createBasePlayerTriggersItem();
    message.encId = object.encId ?? 0;
    message.closestObject = object.closestObject ?? undefined;
    message.closestObjectTemplate = object.closestObjectTemplate ?? undefined;
    return message;
  },
};

function createBasePlayerNotifies(): PlayerNotifies {
  return { encId: 0, notification: "" };
}

export const PlayerNotifies = {
  encode(message: PlayerNotifies, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.notification !== "") {
      writer.uint32(18).string(message.notification);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerNotifies {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerNotifies();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.notification = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerNotifies {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      notification: isSet(object.notification) ? String(object.notification) : "",
    };
  },

  toJSON(message: PlayerNotifies): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.notification !== undefined && (obj.notification = message.notification);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerNotifies>, I>>(base?: I): PlayerNotifies {
    return PlayerNotifies.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerNotifies>, I>>(object: I): PlayerNotifies {
    const message = createBasePlayerNotifies();
    message.encId = object.encId ?? 0;
    message.notification = object.notification ?? "";
    return message;
  },
};

function createBasePlayerSetsFollowTarget(): PlayerSetsFollowTarget {
  return { encId: 0, followTarget: "" };
}

export const PlayerSetsFollowTarget = {
  encode(message: PlayerSetsFollowTarget, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.followTarget !== "") {
      writer.uint32(18).string(message.followTarget);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsFollowTarget {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsFollowTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.followTarget = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsFollowTarget {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      followTarget: isSet(object.followTarget) ? String(object.followTarget) : "",
    };
  },

  toJSON(message: PlayerSetsFollowTarget): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.followTarget !== undefined && (obj.followTarget = message.followTarget);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsFollowTarget>, I>>(base?: I): PlayerSetsFollowTarget {
    return PlayerSetsFollowTarget.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsFollowTarget>, I>>(object: I): PlayerSetsFollowTarget {
    const message = createBasePlayerSetsFollowTarget();
    message.encId = object.encId ?? 0;
    message.followTarget = object.followTarget ?? "";
    return message;
  },
};

function createBasePlayerRequestsToLead(): PlayerRequestsToLead {
  return { encId: 0, snapshot: "" };
}

export const PlayerRequestsToLead = {
  encode(message: PlayerRequestsToLead, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.snapshot !== "") {
      writer.uint32(18).string(message.snapshot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerRequestsToLead {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerRequestsToLead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.snapshot = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerRequestsToLead {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      snapshot: isSet(object.snapshot) ? String(object.snapshot) : "",
    };
  },

  toJSON(message: PlayerRequestsToLead): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.snapshot !== undefined && (obj.snapshot = message.snapshot);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerRequestsToLead>, I>>(base?: I): PlayerRequestsToLead {
    return PlayerRequestsToLead.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerRequestsToLead>, I>>(object: I): PlayerRequestsToLead {
    const message = createBasePlayerRequestsToLead();
    message.encId = object.encId ?? 0;
    message.snapshot = object.snapshot ?? "";
    return message;
  },
};

function createBasePlayerSetsManualVideoSrc(): PlayerSetsManualVideoSrc {
  return { encId: 0, manualVideoSrc: "" };
}

export const PlayerSetsManualVideoSrc = {
  encode(message: PlayerSetsManualVideoSrc, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.manualVideoSrc !== "") {
      writer.uint32(18).string(message.manualVideoSrc);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsManualVideoSrc {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsManualVideoSrc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.manualVideoSrc = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsManualVideoSrc {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      manualVideoSrc: isSet(object.manualVideoSrc) ? String(object.manualVideoSrc) : "",
    };
  },

  toJSON(message: PlayerSetsManualVideoSrc): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.manualVideoSrc !== undefined && (obj.manualVideoSrc = message.manualVideoSrc);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsManualVideoSrc>, I>>(base?: I): PlayerSetsManualVideoSrc {
    return PlayerSetsManualVideoSrc.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsManualVideoSrc>, I>>(object: I): PlayerSetsManualVideoSrc {
    const message = createBasePlayerSetsManualVideoSrc();
    message.encId = object.encId ?? 0;
    message.manualVideoSrc = object.manualVideoSrc ?? "";
    return message;
  },
};

function createBasePlayerSetsIsNpc(): PlayerSetsIsNpc {
  return { encId: 0, isNpc: false };
}

export const PlayerSetsIsNpc = {
  encode(message: PlayerSetsIsNpc, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.isNpc === true) {
      writer.uint32(16).bool(message.isNpc);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsIsNpc {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsIsNpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isNpc = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsIsNpc {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      isNpc: isSet(object.isNpc) ? Boolean(object.isNpc) : false,
    };
  },

  toJSON(message: PlayerSetsIsNpc): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.isNpc !== undefined && (obj.isNpc = message.isNpc);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsIsNpc>, I>>(base?: I): PlayerSetsIsNpc {
    return PlayerSetsIsNpc.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsIsNpc>, I>>(object: I): PlayerSetsIsNpc {
    const message = createBasePlayerSetsIsNpc();
    message.encId = object.encId ?? 0;
    message.isNpc = object.isNpc ?? false;
    return message;
  },
};

function createBasePlayerSetsSubtitle(): PlayerSetsSubtitle {
  return { encId: 0, subtitle: "" };
}

export const PlayerSetsSubtitle = {
  encode(message: PlayerSetsSubtitle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.subtitle !== "") {
      writer.uint32(18).string(message.subtitle);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsSubtitle {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsSubtitle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsSubtitle {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      subtitle: isSet(object.subtitle) ? String(object.subtitle) : "",
    };
  },

  toJSON(message: PlayerSetsSubtitle): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.subtitle !== undefined && (obj.subtitle = message.subtitle);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsSubtitle>, I>>(base?: I): PlayerSetsSubtitle {
    return PlayerSetsSubtitle.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsSubtitle>, I>>(object: I): PlayerSetsSubtitle {
    const message = createBasePlayerSetsSubtitle();
    message.encId = object.encId ?? 0;
    message.subtitle = object.subtitle ?? "";
    return message;
  },
};

function createBasePlayerCrafts(): PlayerCrafts {
  return { encId: 0, inputs: {} };
}

export const PlayerCrafts = {
  encode(message: PlayerCrafts, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    Object.entries(message.inputs).forEach(([key, value]) => {
      PlayerCrafts_InputsEntry291.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerCrafts {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerCrafts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = PlayerCrafts_InputsEntry291.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.inputs[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerCrafts {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      inputs: isObject(object.inputs)
        ? Object.entries(object.inputs).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PlayerCrafts): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    obj.inputs = {};
    if (message.inputs) {
      Object.entries(message.inputs).forEach(([k, v]) => {
        obj.inputs[k] = Math.round(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerCrafts>, I>>(base?: I): PlayerCrafts {
    return PlayerCrafts.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerCrafts>, I>>(object: I): PlayerCrafts {
    const message = createBasePlayerCrafts();
    message.encId = object.encId ?? 0;
    message.inputs = Object.entries(object.inputs ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Number(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBasePlayerCrafts_InputsEntry(): PlayerCrafts_InputsEntry {
  return { key: "", value: 0 };
}

export const PlayerCrafts_InputsEntry = {
  encode(message: PlayerCrafts_InputsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerCrafts_InputsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerCrafts_InputsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerCrafts_InputsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? Number(object.value) : 0 };
  },

  toJSON(message: PlayerCrafts_InputsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = Math.round(message.value));
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerCrafts_InputsEntry>, I>>(base?: I): PlayerCrafts_InputsEntry {
    return PlayerCrafts_InputsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerCrafts_InputsEntry>, I>>(object: I): PlayerCrafts_InputsEntry {
    const message = createBasePlayerCrafts_InputsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseMapMoveObject(): MapMoveObject {
  return {
    mapId: "",
    objectId: "",
    targetX: 0,
    targetY: 0,
    targetXOffset: undefined,
    targetYOffset: undefined,
    duration: 0,
    easing: undefined,
  };
}

export const MapMoveObject = {
  encode(message: MapMoveObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.objectId !== "") {
      writer.uint32(18).string(message.objectId);
    }
    if (message.targetX !== 0) {
      writer.uint32(29).float(message.targetX);
    }
    if (message.targetY !== 0) {
      writer.uint32(37).float(message.targetY);
    }
    if (message.targetXOffset !== undefined) {
      writer.uint32(45).float(message.targetXOffset);
    }
    if (message.targetYOffset !== undefined) {
      writer.uint32(53).float(message.targetYOffset);
    }
    if (message.duration !== 0) {
      writer.uint32(61).float(message.duration);
    }
    if (message.easing !== undefined) {
      writer.uint32(66).string(message.easing);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapMoveObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapMoveObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.objectId = reader.string();
          continue;
        case 3:
          if (tag != 29) {
            break;
          }

          message.targetX = reader.float();
          continue;
        case 4:
          if (tag != 37) {
            break;
          }

          message.targetY = reader.float();
          continue;
        case 5:
          if (tag != 45) {
            break;
          }

          message.targetXOffset = reader.float();
          continue;
        case 6:
          if (tag != 53) {
            break;
          }

          message.targetYOffset = reader.float();
          continue;
        case 7:
          if (tag != 61) {
            break;
          }

          message.duration = reader.float();
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.easing = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapMoveObject {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      objectId: isSet(object.objectId) ? String(object.objectId) : "",
      targetX: isSet(object.targetX) ? Number(object.targetX) : 0,
      targetY: isSet(object.targetY) ? Number(object.targetY) : 0,
      targetXOffset: isSet(object.targetXOffset) ? Number(object.targetXOffset) : undefined,
      targetYOffset: isSet(object.targetYOffset) ? Number(object.targetYOffset) : undefined,
      duration: isSet(object.duration) ? Number(object.duration) : 0,
      easing: isSet(object.easing) ? String(object.easing) : undefined,
    };
  },

  toJSON(message: MapMoveObject): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.objectId !== undefined && (obj.objectId = message.objectId);
    message.targetX !== undefined && (obj.targetX = message.targetX);
    message.targetY !== undefined && (obj.targetY = message.targetY);
    message.targetXOffset !== undefined && (obj.targetXOffset = message.targetXOffset);
    message.targetYOffset !== undefined && (obj.targetYOffset = message.targetYOffset);
    message.duration !== undefined && (obj.duration = message.duration);
    message.easing !== undefined && (obj.easing = message.easing);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapMoveObject>, I>>(base?: I): MapMoveObject {
    return MapMoveObject.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapMoveObject>, I>>(object: I): MapMoveObject {
    const message = createBaseMapMoveObject();
    message.mapId = object.mapId ?? "";
    message.objectId = object.objectId ?? "";
    message.targetX = object.targetX ?? 0;
    message.targetY = object.targetY ?? 0;
    message.targetXOffset = object.targetXOffset ?? undefined;
    message.targetYOffset = object.targetYOffset ?? undefined;
    message.duration = object.duration ?? 0;
    message.easing = object.easing ?? undefined;
    return message;
  },
};

function createBasePlayerEditsChatMessage(): PlayerEditsChatMessage {
  return { id: "", likes: undefined, replied: undefined, reply: undefined, approved: undefined };
}

export const PlayerEditsChatMessage = {
  encode(message: PlayerEditsChatMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.likes !== undefined) {
      writer.uint32(16).uint32(message.likes);
    }
    if (message.replied !== undefined) {
      writer.uint32(24).bool(message.replied);
    }
    if (message.reply !== undefined) {
      ChatReply168.encode(message.reply, writer.uint32(34).fork()).ldelim();
    }
    if (message.approved !== undefined) {
      writer.uint32(40).bool(message.approved);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerEditsChatMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerEditsChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.likes = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.replied = reader.bool();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.reply = ChatReply168.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.approved = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerEditsChatMessage {
    return {
      id: isSet(object.id) ? String(object.id) : "",
      likes: isSet(object.likes) ? Number(object.likes) : undefined,
      replied: isSet(object.replied) ? Boolean(object.replied) : undefined,
      reply: isSet(object.reply) ? ChatReply168.fromJSON(object.reply) : undefined,
      approved: isSet(object.approved) ? Boolean(object.approved) : undefined,
    };
  },

  toJSON(message: PlayerEditsChatMessage): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    message.likes !== undefined && (obj.likes = Math.round(message.likes));
    message.replied !== undefined && (obj.replied = message.replied);
    message.reply !== undefined && (obj.reply = message.reply ? ChatReply168.toJSON(message.reply) : undefined);
    message.approved !== undefined && (obj.approved = message.approved);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerEditsChatMessage>, I>>(base?: I): PlayerEditsChatMessage {
    return PlayerEditsChatMessage.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerEditsChatMessage>, I>>(object: I): PlayerEditsChatMessage {
    const message = createBasePlayerEditsChatMessage();
    message.id = object.id ?? "";
    message.likes = object.likes ?? undefined;
    message.replied = object.replied ?? undefined;
    message.reply = (object.reply !== undefined && object.reply !== null)
      ? ChatReply168.fromPartial(object.reply)
      : undefined;
    message.approved = object.approved ?? undefined;
    return message;
  },
};

function createBaseFXShakeObject(): FXShakeObject {
  return { mapId: "", targetId: "", intensity: undefined, durationMs: undefined, mode: undefined };
}

export const FXShakeObject = {
  encode(message: FXShakeObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.targetId !== "") {
      writer.uint32(18).string(message.targetId);
    }
    if (message.intensity !== undefined) {
      writer.uint32(29).float(message.intensity);
    }
    if (message.durationMs !== undefined) {
      writer.uint32(37).float(message.durationMs);
    }
    if (message.mode !== undefined) {
      writer.uint32(40).uint32(message.mode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FXShakeObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFXShakeObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 3:
          if (tag != 29) {
            break;
          }

          message.intensity = reader.float();
          continue;
        case 4:
          if (tag != 37) {
            break;
          }

          message.durationMs = reader.float();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.mode = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FXShakeObject {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : "",
      intensity: isSet(object.intensity) ? Number(object.intensity) : undefined,
      durationMs: isSet(object.durationMs) ? Number(object.durationMs) : undefined,
      mode: isSet(object.mode) ? Number(object.mode) : undefined,
    };
  },

  toJSON(message: FXShakeObject): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.intensity !== undefined && (obj.intensity = message.intensity);
    message.durationMs !== undefined && (obj.durationMs = message.durationMs);
    message.mode !== undefined && (obj.mode = Math.round(message.mode));
    return obj;
  },

  create<I extends Exact<DeepPartial<FXShakeObject>, I>>(base?: I): FXShakeObject {
    return FXShakeObject.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<FXShakeObject>, I>>(object: I): FXShakeObject {
    const message = createBaseFXShakeObject();
    message.mapId = object.mapId ?? "";
    message.targetId = object.targetId ?? "";
    message.intensity = object.intensity ?? undefined;
    message.durationMs = object.durationMs ?? undefined;
    message.mode = object.mode ?? undefined;
    return message;
  },
};

function createBaseFXShakeCamera(): FXShakeCamera {
  return { intensity: undefined, durationMs: undefined, mapId: undefined, targetUserId: undefined };
}

export const FXShakeCamera = {
  encode(message: FXShakeCamera, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.intensity !== undefined) {
      writer.uint32(13).float(message.intensity);
    }
    if (message.durationMs !== undefined) {
      writer.uint32(21).float(message.durationMs);
    }
    if (message.mapId !== undefined) {
      writer.uint32(26).string(message.mapId);
    }
    if (message.targetUserId !== undefined) {
      writer.uint32(34).string(message.targetUserId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FXShakeCamera {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFXShakeCamera();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 13) {
            break;
          }

          message.intensity = reader.float();
          continue;
        case 2:
          if (tag != 21) {
            break;
          }

          message.durationMs = reader.float();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.targetUserId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FXShakeCamera {
    return {
      intensity: isSet(object.intensity) ? Number(object.intensity) : undefined,
      durationMs: isSet(object.durationMs) ? Number(object.durationMs) : undefined,
      mapId: isSet(object.mapId) ? String(object.mapId) : undefined,
      targetUserId: isSet(object.targetUserId) ? String(object.targetUserId) : undefined,
    };
  },

  toJSON(message: FXShakeCamera): unknown {
    const obj: any = {};
    message.intensity !== undefined && (obj.intensity = message.intensity);
    message.durationMs !== undefined && (obj.durationMs = message.durationMs);
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.targetUserId !== undefined && (obj.targetUserId = message.targetUserId);
    return obj;
  },

  create<I extends Exact<DeepPartial<FXShakeCamera>, I>>(base?: I): FXShakeCamera {
    return FXShakeCamera.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<FXShakeCamera>, I>>(object: I): FXShakeCamera {
    const message = createBaseFXShakeCamera();
    message.intensity = object.intensity ?? undefined;
    message.durationMs = object.durationMs ?? undefined;
    message.mapId = object.mapId ?? undefined;
    message.targetUserId = object.targetUserId ?? undefined;
    return message;
  },
};

function createBasePlayerHighFives(): PlayerHighFives {
  return { encId: 0, encIdTarget: 0, emote: undefined };
}

export const PlayerHighFives = {
  encode(message: PlayerHighFives, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.encIdTarget !== 0) {
      writer.uint32(16).uint32(message.encIdTarget);
    }
    if (message.emote !== undefined) {
      writer.uint32(26).string(message.emote);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerHighFives {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerHighFives();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.encIdTarget = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.emote = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerHighFives {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      encIdTarget: isSet(object.encIdTarget) ? Number(object.encIdTarget) : 0,
      emote: isSet(object.emote) ? String(object.emote) : undefined,
    };
  },

  toJSON(message: PlayerHighFives): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.encIdTarget !== undefined && (obj.encIdTarget = Math.round(message.encIdTarget));
    message.emote !== undefined && (obj.emote = message.emote);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerHighFives>, I>>(base?: I): PlayerHighFives {
    return PlayerHighFives.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerHighFives>, I>>(object: I): PlayerHighFives {
    const message = createBasePlayerHighFives();
    message.encId = object.encId ?? 0;
    message.encIdTarget = object.encIdTarget ?? 0;
    message.emote = object.emote ?? undefined;
    return message;
  },
};

function createBasePlayerSendsCommand(): PlayerSendsCommand {
  return { encId: 0, command: "" };
}

export const PlayerSendsCommand = {
  encode(message: PlayerSendsCommand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.command !== "") {
      writer.uint32(18).string(message.command);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSendsCommand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSendsCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.command = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSendsCommand {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      command: isSet(object.command) ? String(object.command) : "",
    };
  },

  toJSON(message: PlayerSendsCommand): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.command !== undefined && (obj.command = message.command);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSendsCommand>, I>>(base?: I): PlayerSendsCommand {
    return PlayerSendsCommand.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSendsCommand>, I>>(object: I): PlayerSendsCommand {
    const message = createBasePlayerSendsCommand();
    message.encId = object.encId ?? 0;
    message.command = object.command ?? "";
    return message;
  },
};

function createBaseSpaceRegistersCommand(): SpaceRegistersCommand {
  return { command: "" };
}

export const SpaceRegistersCommand = {
  encode(message: SpaceRegistersCommand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.command !== "") {
      writer.uint32(18).string(message.command);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceRegistersCommand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceRegistersCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag != 18) {
            break;
          }

          message.command = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceRegistersCommand {
    return { command: isSet(object.command) ? String(object.command) : "" };
  },

  toJSON(message: SpaceRegistersCommand): unknown {
    const obj: any = {};
    message.command !== undefined && (obj.command = message.command);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceRegistersCommand>, I>>(base?: I): SpaceRegistersCommand {
    return SpaceRegistersCommand.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceRegistersCommand>, I>>(object: I): SpaceRegistersCommand {
    const message = createBaseSpaceRegistersCommand();
    message.command = object.command ?? "";
    return message;
  },
};

function createBasePlayerUpdatesInventory(): PlayerUpdatesInventory {
  return { encId: 0, items: {}, order: {} };
}

export const PlayerUpdatesInventory = {
  encode(message: PlayerUpdatesInventory, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    Object.entries(message.items).forEach(([key, value]) => {
      PlayerUpdatesInventory_ItemsEntry292.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    Object.entries(message.order).forEach(([key, value]) => {
      PlayerUpdatesInventory_OrderEntry293.encode({ key: key as any, value }, writer.uint32(26).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerUpdatesInventory {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerUpdatesInventory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = PlayerUpdatesInventory_ItemsEntry292.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.items[entry2.key] = entry2.value;
          }
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          const entry3 = PlayerUpdatesInventory_OrderEntry293.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.order[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerUpdatesInventory {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      items: isObject(object.items)
        ? Object.entries(object.items).reduce<{ [key: string]: InventoryItem29 }>((acc, [key, value]) => {
          acc[key] = InventoryItem29.fromJSON(value);
          return acc;
        }, {})
        : {},
      order: isObject(object.order)
        ? Object.entries(object.order).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PlayerUpdatesInventory): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    obj.items = {};
    if (message.items) {
      Object.entries(message.items).forEach(([k, v]) => {
        obj.items[k] = InventoryItem29.toJSON(v);
      });
    }
    obj.order = {};
    if (message.order) {
      Object.entries(message.order).forEach(([k, v]) => {
        obj.order[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerUpdatesInventory>, I>>(base?: I): PlayerUpdatesInventory {
    return PlayerUpdatesInventory.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerUpdatesInventory>, I>>(object: I): PlayerUpdatesInventory {
    const message = createBasePlayerUpdatesInventory();
    message.encId = object.encId ?? 0;
    message.items = Object.entries(object.items ?? {}).reduce<{ [key: string]: InventoryItem29 }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = InventoryItem29.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.order = Object.entries(object.order ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBasePlayerUpdatesInventory_ItemsEntry(): PlayerUpdatesInventory_ItemsEntry {
  return { key: "", value: undefined };
}

export const PlayerUpdatesInventory_ItemsEntry = {
  encode(message: PlayerUpdatesInventory_ItemsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      InventoryItem29.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerUpdatesInventory_ItemsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerUpdatesInventory_ItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = InventoryItem29.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerUpdatesInventory_ItemsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? InventoryItem29.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PlayerUpdatesInventory_ItemsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? InventoryItem29.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerUpdatesInventory_ItemsEntry>, I>>(
    base?: I,
  ): PlayerUpdatesInventory_ItemsEntry {
    return PlayerUpdatesInventory_ItemsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerUpdatesInventory_ItemsEntry>, I>>(
    object: I,
  ): PlayerUpdatesInventory_ItemsEntry {
    const message = createBasePlayerUpdatesInventory_ItemsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? InventoryItem29.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePlayerUpdatesInventory_OrderEntry(): PlayerUpdatesInventory_OrderEntry {
  return { key: "", value: "" };
}

export const PlayerUpdatesInventory_OrderEntry = {
  encode(message: PlayerUpdatesInventory_OrderEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerUpdatesInventory_OrderEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerUpdatesInventory_OrderEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerUpdatesInventory_OrderEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: PlayerUpdatesInventory_OrderEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerUpdatesInventory_OrderEntry>, I>>(
    base?: I,
  ): PlayerUpdatesInventory_OrderEntry {
    return PlayerUpdatesInventory_OrderEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerUpdatesInventory_OrderEntry>, I>>(
    object: I,
  ): PlayerUpdatesInventory_OrderEntry {
    const message = createBasePlayerUpdatesInventory_OrderEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSpaceUpdatesItems(): SpaceUpdatesItems {
  return { items: {} };
}

export const SpaceUpdatesItems = {
  encode(message: SpaceUpdatesItems, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.items).forEach(([key, value]) => {
      SpaceUpdatesItems_ItemsEntry294.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceUpdatesItems {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceUpdatesItems();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = SpaceUpdatesItems_ItemsEntry294.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.items[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceUpdatesItems {
    return {
      items: isObject(object.items)
        ? Object.entries(object.items).reduce<{ [key: string]: SpaceItem169 }>((acc, [key, value]) => {
          acc[key] = SpaceItem169.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: SpaceUpdatesItems): unknown {
    const obj: any = {};
    obj.items = {};
    if (message.items) {
      Object.entries(message.items).forEach(([k, v]) => {
        obj.items[k] = SpaceItem169.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceUpdatesItems>, I>>(base?: I): SpaceUpdatesItems {
    return SpaceUpdatesItems.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceUpdatesItems>, I>>(object: I): SpaceUpdatesItems {
    const message = createBaseSpaceUpdatesItems();
    message.items = Object.entries(object.items ?? {}).reduce<{ [key: string]: SpaceItem169 }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = SpaceItem169.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseSpaceUpdatesItems_ItemsEntry(): SpaceUpdatesItems_ItemsEntry {
  return { key: "", value: undefined };
}

export const SpaceUpdatesItems_ItemsEntry = {
  encode(message: SpaceUpdatesItems_ItemsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SpaceItem169.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceUpdatesItems_ItemsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceUpdatesItems_ItemsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = SpaceItem169.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceUpdatesItems_ItemsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? SpaceItem169.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: SpaceUpdatesItems_ItemsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value ? SpaceItem169.toJSON(message.value) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceUpdatesItems_ItemsEntry>, I>>(base?: I): SpaceUpdatesItems_ItemsEntry {
    return SpaceUpdatesItems_ItemsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceUpdatesItems_ItemsEntry>, I>>(object: I): SpaceUpdatesItems_ItemsEntry {
    const message = createBaseSpaceUpdatesItems_ItemsEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SpaceItem169.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBasePlayerTriggersInventoryItem(): PlayerTriggersInventoryItem {
  return { encId: 0, itemId: "", abilityId: "" };
}

export const PlayerTriggersInventoryItem = {
  encode(message: PlayerTriggersInventoryItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.itemId !== "") {
      writer.uint32(18).string(message.itemId);
    }
    if (message.abilityId !== "") {
      writer.uint32(26).string(message.abilityId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerTriggersInventoryItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerTriggersInventoryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.itemId = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.abilityId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerTriggersInventoryItem {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      itemId: isSet(object.itemId) ? String(object.itemId) : "",
      abilityId: isSet(object.abilityId) ? String(object.abilityId) : "",
    };
  },

  toJSON(message: PlayerTriggersInventoryItem): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.itemId !== undefined && (obj.itemId = message.itemId);
    message.abilityId !== undefined && (obj.abilityId = message.abilityId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerTriggersInventoryItem>, I>>(base?: I): PlayerTriggersInventoryItem {
    return PlayerTriggersInventoryItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerTriggersInventoryItem>, I>>(object: I): PlayerTriggersInventoryItem {
    const message = createBasePlayerTriggersInventoryItem();
    message.encId = object.encId ?? 0;
    message.itemId = object.itemId ?? "";
    message.abilityId = object.abilityId ?? "";
    return message;
  },
};

function createBasePlayerSetsAllowScreenPointer(): PlayerSetsAllowScreenPointer {
  return { encId: 0, allowScreenPointer: false };
}

export const PlayerSetsAllowScreenPointer = {
  encode(message: PlayerSetsAllowScreenPointer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.allowScreenPointer === true) {
      writer.uint32(16).bool(message.allowScreenPointer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsAllowScreenPointer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsAllowScreenPointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.allowScreenPointer = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsAllowScreenPointer {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      allowScreenPointer: isSet(object.allowScreenPointer) ? Boolean(object.allowScreenPointer) : false,
    };
  },

  toJSON(message: PlayerSetsAllowScreenPointer): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.allowScreenPointer !== undefined && (obj.allowScreenPointer = message.allowScreenPointer);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsAllowScreenPointer>, I>>(base?: I): PlayerSetsAllowScreenPointer {
    return PlayerSetsAllowScreenPointer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsAllowScreenPointer>, I>>(object: I): PlayerSetsAllowScreenPointer {
    const message = createBasePlayerSetsAllowScreenPointer();
    message.encId = object.encId ?? 0;
    message.allowScreenPointer = object.allowScreenPointer ?? false;
    return message;
  },
};

function createBasePrecomputedEnterLocation(): PrecomputedEnterLocation {
  return { enterLocation: undefined };
}

export const PrecomputedEnterLocation = {
  encode(message: PrecomputedEnterLocation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.enterLocation !== undefined) {
      MapLocation170.encode(message.enterLocation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrecomputedEnterLocation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrecomputedEnterLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.enterLocation = MapLocation170.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrecomputedEnterLocation {
    return { enterLocation: isSet(object.enterLocation) ? MapLocation170.fromJSON(object.enterLocation) : undefined };
  },

  toJSON(message: PrecomputedEnterLocation): unknown {
    const obj: any = {};
    message.enterLocation !== undefined &&
      (obj.enterLocation = message.enterLocation ? MapLocation170.toJSON(message.enterLocation) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<PrecomputedEnterLocation>, I>>(base?: I): PrecomputedEnterLocation {
    return PrecomputedEnterLocation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PrecomputedEnterLocation>, I>>(object: I): PrecomputedEnterLocation {
    const message = createBasePrecomputedEnterLocation();
    message.enterLocation = (object.enterLocation !== undefined && object.enterLocation !== null)
      ? MapLocation170.fromPartial(object.enterLocation)
      : undefined;
    return message;
  },
};

function createBasePlayerSetsDeskInfo(): PlayerSetsDeskInfo {
  return { encId: 0, deskInfo: undefined };
}

export const PlayerSetsDeskInfo = {
  encode(message: PlayerSetsDeskInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.deskInfo !== undefined) {
      DeskInfoV2171.encode(message.deskInfo, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsDeskInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsDeskInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.deskInfo = DeskInfoV2171.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsDeskInfo {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      deskInfo: isSet(object.deskInfo) ? DeskInfoV2171.fromJSON(object.deskInfo) : undefined,
    };
  },

  toJSON(message: PlayerSetsDeskInfo): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.deskInfo !== undefined &&
      (obj.deskInfo = message.deskInfo ? DeskInfoV2171.toJSON(message.deskInfo) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsDeskInfo>, I>>(base?: I): PlayerSetsDeskInfo {
    return PlayerSetsDeskInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsDeskInfo>, I>>(object: I): PlayerSetsDeskInfo {
    const message = createBasePlayerSetsDeskInfo();
    message.encId = object.encId ?? 0;
    message.deskInfo = (object.deskInfo !== undefined && object.deskInfo !== null)
      ? DeskInfoV2171.fromPartial(object.deskInfo)
      : undefined;
    return message;
  },
};

function createBaseSpaceSetsCapacity(): SpaceSetsCapacity {
  return { capacity: 0 };
}

export const SpaceSetsCapacity = {
  encode(message: SpaceSetsCapacity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.capacity !== 0) {
      writer.uint32(8).uint32(message.capacity);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceSetsCapacity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceSetsCapacity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.capacity = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceSetsCapacity {
    return { capacity: isSet(object.capacity) ? Number(object.capacity) : 0 };
  },

  toJSON(message: SpaceSetsCapacity): unknown {
    const obj: any = {};
    message.capacity !== undefined && (obj.capacity = Math.round(message.capacity));
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceSetsCapacity>, I>>(base?: I): SpaceSetsCapacity {
    return SpaceSetsCapacity.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceSetsCapacity>, I>>(object: I): SpaceSetsCapacity {
    const message = createBaseSpaceSetsCapacity();
    message.capacity = object.capacity ?? 0;
    return message;
  },
};

function createBaseSpaceOverCapacityDeniesUser(): SpaceOverCapacityDeniesUser {
  return { userId: "" };
}

export const SpaceOverCapacityDeniesUser = {
  encode(message: SpaceOverCapacityDeniesUser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceOverCapacityDeniesUser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceOverCapacityDeniesUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceOverCapacityDeniesUser {
    return { userId: isSet(object.userId) ? String(object.userId) : "" };
  },

  toJSON(message: SpaceOverCapacityDeniesUser): unknown {
    const obj: any = {};
    message.userId !== undefined && (obj.userId = message.userId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceOverCapacityDeniesUser>, I>>(base?: I): SpaceOverCapacityDeniesUser {
    return SpaceOverCapacityDeniesUser.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceOverCapacityDeniesUser>, I>>(object: I): SpaceOverCapacityDeniesUser {
    const message = createBaseSpaceOverCapacityDeniesUser();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBasePlayerSetsAway(): PlayerSetsAway {
  return { encId: 0, away: false };
}

export const PlayerSetsAway = {
  encode(message: PlayerSetsAway, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.away === true) {
      writer.uint32(16).bool(message.away);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerSetsAway {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerSetsAway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.away = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerSetsAway {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      away: isSet(object.away) ? Boolean(object.away) : false,
    };
  },

  toJSON(message: PlayerSetsAway): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.away !== undefined && (obj.away = message.away);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerSetsAway>, I>>(base?: I): PlayerSetsAway {
    return PlayerSetsAway.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerSetsAway>, I>>(object: I): PlayerSetsAway {
    const message = createBasePlayerSetsAway();
    message.encId = object.encId ?? 0;
    message.away = object.away ?? false;
    return message;
  },
};

function createBasePlayerStartsRecording(): PlayerStartsRecording {
  return { encId: 0, nookId: "", initializing: undefined };
}

export const PlayerStartsRecording = {
  encode(message: PlayerStartsRecording, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encId !== 0) {
      writer.uint32(8).uint32(message.encId);
    }
    if (message.nookId !== "") {
      writer.uint32(18).string(message.nookId);
    }
    if (message.initializing !== undefined) {
      writer.uint32(24).bool(message.initializing);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerStartsRecording {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerStartsRecording();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.encId = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.nookId = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.initializing = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerStartsRecording {
    return {
      encId: isSet(object.encId) ? Number(object.encId) : 0,
      nookId: isSet(object.nookId) ? String(object.nookId) : "",
      initializing: isSet(object.initializing) ? Boolean(object.initializing) : undefined,
    };
  },

  toJSON(message: PlayerStartsRecording): unknown {
    const obj: any = {};
    message.encId !== undefined && (obj.encId = Math.round(message.encId));
    message.nookId !== undefined && (obj.nookId = message.nookId);
    message.initializing !== undefined && (obj.initializing = message.initializing);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerStartsRecording>, I>>(base?: I): PlayerStartsRecording {
    return PlayerStartsRecording.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerStartsRecording>, I>>(object: I): PlayerStartsRecording {
    const message = createBasePlayerStartsRecording();
    message.encId = object.encId ?? 0;
    message.nookId = object.nookId ?? "";
    message.initializing = object.initializing ?? undefined;
    return message;
  },
};

function createBaseAccessRequest(): AccessRequest {
  return { guestId: "", memberId: "", requestedAtUnixTime: 0, guestName: "", guestOutfitString: "" };
}

export const AccessRequest = {
  encode(message: AccessRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.guestId !== "") {
      writer.uint32(10).string(message.guestId);
    }
    if (message.memberId !== "") {
      writer.uint32(18).string(message.memberId);
    }
    if (message.requestedAtUnixTime !== 0) {
      writer.uint32(24).uint64(message.requestedAtUnixTime);
    }
    if (message.guestName !== "") {
      writer.uint32(34).string(message.guestName);
    }
    if (message.guestOutfitString !== "") {
      writer.uint32(42).string(message.guestOutfitString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccessRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.guestId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.memberId = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.requestedAtUnixTime = longToNumber(reader.uint64() as Long);
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.guestName = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.guestOutfitString = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessRequest {
    return {
      guestId: isSet(object.guestId) ? String(object.guestId) : "",
      memberId: isSet(object.memberId) ? String(object.memberId) : "",
      requestedAtUnixTime: isSet(object.requestedAtUnixTime) ? Number(object.requestedAtUnixTime) : 0,
      guestName: isSet(object.guestName) ? String(object.guestName) : "",
      guestOutfitString: isSet(object.guestOutfitString) ? String(object.guestOutfitString) : "",
    };
  },

  toJSON(message: AccessRequest): unknown {
    const obj: any = {};
    message.guestId !== undefined && (obj.guestId = message.guestId);
    message.memberId !== undefined && (obj.memberId = message.memberId);
    message.requestedAtUnixTime !== undefined && (obj.requestedAtUnixTime = Math.round(message.requestedAtUnixTime));
    message.guestName !== undefined && (obj.guestName = message.guestName);
    message.guestOutfitString !== undefined && (obj.guestOutfitString = message.guestOutfitString);
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessRequest>, I>>(base?: I): AccessRequest {
    return AccessRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AccessRequest>, I>>(object: I): AccessRequest {
    const message = createBaseAccessRequest();
    message.guestId = object.guestId ?? "";
    message.memberId = object.memberId ?? "";
    message.requestedAtUnixTime = object.requestedAtUnixTime ?? 0;
    message.guestName = object.guestName ?? "";
    message.guestOutfitString = object.guestOutfitString ?? "";
    return message;
  },
};

function createBaseAccessRequestsUpdated(): AccessRequestsUpdated {
  return { requests: [] };
}

export const AccessRequestsUpdated = {
  encode(message: AccessRequestsUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.requests) {
      AccessRequest172.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccessRequestsUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessRequestsUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.requests.push(AccessRequest172.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessRequestsUpdated {
    return {
      requests: Array.isArray(object?.requests) ? object.requests.map((e: any) => AccessRequest.fromJSON(e)) : [],
    };
  },

  toJSON(message: AccessRequestsUpdated): unknown {
    const obj: any = {};
    if (message.requests) {
      obj.requests = message.requests.map((e) => e ? AccessRequest172.toJSON(e) : undefined);
    } else {
      obj.requests = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessRequestsUpdated>, I>>(base?: I): AccessRequestsUpdated {
    return AccessRequestsUpdated.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AccessRequestsUpdated>, I>>(object: I): AccessRequestsUpdated {
    const message = createBaseAccessRequestsUpdated();
    message.requests = object.requests?.map((e) => AccessRequest172.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccessRequestRespondedTo(): AccessRequestRespondedTo {
  return { targetId: "", accepted: false, location: undefined };
}

export const AccessRequestRespondedTo = {
  encode(message: AccessRequestRespondedTo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetId !== "") {
      writer.uint32(10).string(message.targetId);
    }
    if (message.accepted === true) {
      writer.uint32(16).bool(message.accepted);
    }
    if (message.location !== undefined) {
      MapLocation170.encode(message.location, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AccessRequestRespondedTo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessRequestRespondedTo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.location = MapLocation170.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccessRequestRespondedTo {
    return {
      targetId: isSet(object.targetId) ? String(object.targetId) : "",
      accepted: isSet(object.accepted) ? Boolean(object.accepted) : false,
      location: isSet(object.location) ? MapLocation170.fromJSON(object.location) : undefined,
    };
  },

  toJSON(message: AccessRequestRespondedTo): unknown {
    const obj: any = {};
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.accepted !== undefined && (obj.accepted = message.accepted);
    message.location !== undefined &&
      (obj.location = message.location ? MapLocation170.toJSON(message.location) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<AccessRequestRespondedTo>, I>>(base?: I): AccessRequestRespondedTo {
    return AccessRequestRespondedTo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AccessRequestRespondedTo>, I>>(object: I): AccessRequestRespondedTo {
    const message = createBaseAccessRequestRespondedTo();
    message.targetId = object.targetId ?? "";
    message.accepted = object.accepted ?? false;
    message.location = (object.location !== undefined && object.location !== null)
      ? MapLocation170.fromPartial(object.location)
      : undefined;
    return message;
  },
};

function createBasePlayerGuestPassStatus(): PlayerGuestPassStatus {
  return { userId: "", guestPassStatus: "" };
}

export const PlayerGuestPassStatus = {
  encode(message: PlayerGuestPassStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.guestPassStatus !== "") {
      writer.uint32(18).string(message.guestPassStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerGuestPassStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerGuestPassStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.guestPassStatus = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerGuestPassStatus {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      guestPassStatus: isSet(object.guestPassStatus) ? String(object.guestPassStatus) : "",
    };
  },

  toJSON(message: PlayerGuestPassStatus): unknown {
    const obj: any = {};
    message.userId !== undefined && (obj.userId = message.userId);
    message.guestPassStatus !== undefined && (obj.guestPassStatus = message.guestPassStatus);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerGuestPassStatus>, I>>(base?: I): PlayerGuestPassStatus {
    return PlayerGuestPassStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerGuestPassStatus>, I>>(object: I): PlayerGuestPassStatus {
    const message = createBasePlayerGuestPassStatus();
    message.userId = object.userId ?? "";
    message.guestPassStatus = object.guestPassStatus ?? "";
    return message;
  },
};

function createBaseSpaceSetsGuestPassStatuses(): SpaceSetsGuestPassStatuses {
  return { playerGuestPassStatuses: [] };
}

export const SpaceSetsGuestPassStatuses = {
  encode(message: SpaceSetsGuestPassStatuses, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.playerGuestPassStatuses) {
      PlayerGuestPassStatus173.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceSetsGuestPassStatuses {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceSetsGuestPassStatuses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playerGuestPassStatuses.push(PlayerGuestPassStatus173.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceSetsGuestPassStatuses {
    return {
      playerGuestPassStatuses: Array.isArray(object?.playerGuestPassStatuses)
        ? object.playerGuestPassStatuses.map((e: any) => PlayerGuestPassStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SpaceSetsGuestPassStatuses): unknown {
    const obj: any = {};
    if (message.playerGuestPassStatuses) {
      obj.playerGuestPassStatuses = message.playerGuestPassStatuses.map((e) =>
        e ? PlayerGuestPassStatus173.toJSON(e) : undefined
      );
    } else {
      obj.playerGuestPassStatuses = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceSetsGuestPassStatuses>, I>>(base?: I): SpaceSetsGuestPassStatuses {
    return SpaceSetsGuestPassStatuses.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceSetsGuestPassStatuses>, I>>(object: I): SpaceSetsGuestPassStatuses {
    const message = createBaseSpaceSetsGuestPassStatuses();
    message.playerGuestPassStatuses =
      object.playerGuestPassStatuses?.map((e) => PlayerGuestPassStatus173.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEnterWithTeammatesSetOwnLobbyInfo(): EnterWithTeammatesSetOwnLobbyInfo {
  return { name: "", outfitString: "" };
}

export const EnterWithTeammatesSetOwnLobbyInfo = {
  encode(message: EnterWithTeammatesSetOwnLobbyInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.outfitString !== "") {
      writer.uint32(18).string(message.outfitString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterWithTeammatesSetOwnLobbyInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterWithTeammatesSetOwnLobbyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.outfitString = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnterWithTeammatesSetOwnLobbyInfo {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      outfitString: isSet(object.outfitString) ? String(object.outfitString) : "",
    };
  },

  toJSON(message: EnterWithTeammatesSetOwnLobbyInfo): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.outfitString !== undefined && (obj.outfitString = message.outfitString);
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterWithTeammatesSetOwnLobbyInfo>, I>>(
    base?: I,
  ): EnterWithTeammatesSetOwnLobbyInfo {
    return EnterWithTeammatesSetOwnLobbyInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterWithTeammatesSetOwnLobbyInfo>, I>>(
    object: I,
  ): EnterWithTeammatesSetOwnLobbyInfo {
    const message = createBaseEnterWithTeammatesSetOwnLobbyInfo();
    message.name = object.name ?? "";
    message.outfitString = object.outfitString ?? "";
    return message;
  },
};

function createBaseEnterWithTeammatesInitiateEnterSpace(): EnterWithTeammatesInitiateEnterSpace {
  return {};
}

export const EnterWithTeammatesInitiateEnterSpace = {
  encode(_: EnterWithTeammatesInitiateEnterSpace, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterWithTeammatesInitiateEnterSpace {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterWithTeammatesInitiateEnterSpace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnterWithTeammatesInitiateEnterSpace {
    return {};
  },

  toJSON(_: EnterWithTeammatesInitiateEnterSpace): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterWithTeammatesInitiateEnterSpace>, I>>(
    base?: I,
  ): EnterWithTeammatesInitiateEnterSpace {
    return EnterWithTeammatesInitiateEnterSpace.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterWithTeammatesInitiateEnterSpace>, I>>(
    _: I,
  ): EnterWithTeammatesInitiateEnterSpace {
    const message = createBaseEnterWithTeammatesInitiateEnterSpace();
    return message;
  },
};

function createBaseSetDeskFromNextAvailableDesk(): SetDeskFromNextAvailableDesk {
  return { targetId: undefined, preferredDesk: undefined, desksToIgnore: [] };
}

export const SetDeskFromNextAvailableDesk = {
  encode(message: SetDeskFromNextAvailableDesk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetId !== undefined) {
      writer.uint32(10).string(message.targetId);
    }
    if (message.preferredDesk !== undefined) {
      MapAndDesk174.encode(message.preferredDesk, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.desksToIgnore) {
      MapAndDesk174.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDeskFromNextAvailableDesk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDeskFromNextAvailableDesk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.preferredDesk = MapAndDesk174.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.desksToIgnore.push(MapAndDesk174.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDeskFromNextAvailableDesk {
    return {
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
      preferredDesk: isSet(object.preferredDesk) ? MapAndDesk174.fromJSON(object.preferredDesk) : undefined,
      desksToIgnore: Array.isArray(object?.desksToIgnore)
        ? object.desksToIgnore.map((e: any) => MapAndDesk.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SetDeskFromNextAvailableDesk): unknown {
    const obj: any = {};
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.preferredDesk !== undefined &&
      (obj.preferredDesk = message.preferredDesk ? MapAndDesk174.toJSON(message.preferredDesk) : undefined);
    if (message.desksToIgnore) {
      obj.desksToIgnore = message.desksToIgnore.map((e) => e ? MapAndDesk174.toJSON(e) : undefined);
    } else {
      obj.desksToIgnore = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDeskFromNextAvailableDesk>, I>>(base?: I): SetDeskFromNextAvailableDesk {
    return SetDeskFromNextAvailableDesk.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetDeskFromNextAvailableDesk>, I>>(object: I): SetDeskFromNextAvailableDesk {
    const message = createBaseSetDeskFromNextAvailableDesk();
    message.targetId = object.targetId ?? undefined;
    message.preferredDesk = (object.preferredDesk !== undefined && object.preferredDesk !== null)
      ? MapAndDesk174.fromPartial(object.preferredDesk)
      : undefined;
    message.desksToIgnore = object.desksToIgnore?.map((e) => MapAndDesk174.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSpaceRolePermissionOverrideUpdated(): SpaceRolePermissionOverrideUpdated {
  return { role: "", permission: "", enabled: false };
}

export const SpaceRolePermissionOverrideUpdated = {
  encode(message: SpaceRolePermissionOverrideUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    if (message.permission !== "") {
      writer.uint32(18).string(message.permission);
    }
    if (message.enabled === true) {
      writer.uint32(24).bool(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpaceRolePermissionOverrideUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpaceRolePermissionOverrideUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.role = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.permission = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpaceRolePermissionOverrideUpdated {
    return {
      role: isSet(object.role) ? String(object.role) : "",
      permission: isSet(object.permission) ? String(object.permission) : "",
      enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,
    };
  },

  toJSON(message: SpaceRolePermissionOverrideUpdated): unknown {
    const obj: any = {};
    message.role !== undefined && (obj.role = message.role);
    message.permission !== undefined && (obj.permission = message.permission);
    message.enabled !== undefined && (obj.enabled = message.enabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpaceRolePermissionOverrideUpdated>, I>>(
    base?: I,
  ): SpaceRolePermissionOverrideUpdated {
    return SpaceRolePermissionOverrideUpdated.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpaceRolePermissionOverrideUpdated>, I>>(
    object: I,
  ): SpaceRolePermissionOverrideUpdated {
    const message = createBaseSpaceRolePermissionOverrideUpdated();
    message.role = object.role ?? "";
    message.permission = object.permission ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseClientServerBatch(): ClientServerBatch {
  return { actions: [] };
}

export const ClientServerBatch = {
  encode(message: ClientServerBatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.actions) {
      ClientServerAction175.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientServerBatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientServerBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.actions.push(ClientServerAction175.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientServerBatch {
    return {
      actions: Array.isArray(object?.actions) ? object.actions.map((e: any) => ClientServerAction.fromJSON(e)) : [],
    };
  },

  toJSON(message: ClientServerBatch): unknown {
    const obj: any = {};
    if (message.actions) {
      obj.actions = message.actions.map((e) => e ? ClientServerAction175.toJSON(e) : undefined);
    } else {
      obj.actions = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientServerBatch>, I>>(base?: I): ClientServerBatch {
    return ClientServerBatch.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ClientServerBatch>, I>>(object: I): ClientServerBatch {
    const message = createBaseClientServerBatch();
    message.actions = object.actions?.map((e) => ClientServerAction175.fromPartial(e)) || [];
    return message;
  },
};

function createBaseClientServerAction(): ClientServerAction {
  return {
    txnId: undefined,
    clientHeartbeat: undefined,
    clientBackupHeartbeat: undefined,
    updateSubscriptions: undefined,
    move: undefined,
    setAffiliation: undefined,
    setStatus: undefined,
    spotlight: undefined,
    ring: undefined,
    ban: undefined,
    kick: undefined,
    setImpassable: undefined,
    chat: undefined,
    interact: undefined,
    enterWhisper: undefined,
    leaveWhisper: undefined,
    setEmojiStatus: undefined,
    activelySpeaking: undefined,
    setName: undefined,
    setTextStatus: undefined,
    teleport: undefined,
    exit: undefined,
    enter: undefined,
    setWorkCondition: undefined,
    respawn: undefined,
    spawn: undefined,
    ghost: undefined,
    init: undefined,
    setOutfitString: undefined,
    shootConfetti: undefined,
    setEventStatus: undefined,
    setInConversation: undefined,
    setCurrentDesk: undefined,
    setCurrentArea: undefined,
    setImagePointer: undefined,
    setGoKartId: undefined,
    mapSetDimensions: undefined,
    mapSetCollisions: undefined,
    mapSetBackgroundImagePath: undefined,
    mapSetForegroundImagePath: undefined,
    mapSetSprites: undefined,
    mapSetSpawns: undefined,
    mapSetSpaces: undefined,
    mapSetPortals: undefined,
    mapSetAnnouncer: undefined,
    mapSetAssets: undefined,
    mapSetObjects: undefined,
    mapSetName: undefined,
    mapSetMuteOnEntry: undefined,
    mapSetUseDrawnBG: undefined,
    mapSetWalls: undefined,
    mapSetFloors: undefined,
    mapSetAreas: undefined,
    mapAddObject: undefined,
    mapDeleteObject: undefined,
    mapSetSpawn: undefined,
    setIsAlone: undefined,
    mapSetMiniMapImagePath: undefined,
    mapSetEnabledChats: undefined,
    mapSetDescription: undefined,
    mapSetDecoration: undefined,
    mapSetTutorialTasks: undefined,
    playSound: undefined,
    mapSetScript: undefined,
    setIsMobile: undefined,
    setScreenPointer: undefined,
    setEmoteV2: undefined,
    setFocusModeEndTime: undefined,
    mapDeleteObjectById: undefined,
    customAction: undefined,
    block: undefined,
    setItemString: undefined,
    triggerItem: undefined,
    notify: undefined,
    setFollowTarget: undefined,
    requestToLead: undefined,
    enterPortal: undefined,
    setManualVideoSrc: undefined,
    setSubtitle: undefined,
    playerUpdatesSession: undefined,
    mapMoveObject: undefined,
    chatMessageUpdated: undefined,
    fxShakeObject: undefined,
    fxShakeCamera: undefined,
    registerCommand: undefined,
    sendCommand: undefined,
    speakerUpdatesSession: undefined,
    addInventoryItem: undefined,
    removeInventoryItem: undefined,
    setVehicleId: undefined,
    setSpeedModifier: undefined,
    highFive: undefined,
    updateSpaceItems: undefined,
    stopSound: undefined,
    hipToBeSquare: undefined,
    craft: undefined,
    triggerInventoryItem: undefined,
    setAllowScreenPointer: undefined,
    precomputeEnter: undefined,
    requestMute: undefined,
    setDeskInfo: undefined,
    mapSetNooks: undefined,
    requestToJoinNook: undefined,
    updateNookPermission: undefined,
    wave: undefined,
    setPronouns: undefined,
    setTitle: undefined,
    setTimezone: undefined,
    setPhone: undefined,
    setDescription: undefined,
    setProfileImageUrl: undefined,
    setPersonalImageUrl: undefined,
    setAway: undefined,
    setCity: undefined,
    setCountry: undefined,
    setStartDate: undefined,
    startRecording: undefined,
    requestAccessViaCheckIn: undefined,
    respondToAccessRequest: undefined,
    setAvailability: undefined,
    enterWithTeammatesSetOwnLobbyInfo: undefined,
    enterWithTeammatesInitiateEnterSpace: undefined,
    respawnAtDesk: undefined,
    setDeskFromNextAvailableDesk: undefined,
    setSpaceRolePermissionOverride: undefined,
  };
}

export const ClientServerAction = {
  encode(message: ClientServerAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.txnId !== undefined) {
      writer.uint32(800).uint32(message.txnId);
    }
    if (message.clientHeartbeat !== undefined) {
      ClientHeartbeat176.encode(message.clientHeartbeat, writer.uint32(10).fork()).ldelim();
    }
    if (message.clientBackupHeartbeat !== undefined) {
      ClientBackupHeartbeat177.encode(message.clientBackupHeartbeat, writer.uint32(18).fork()).ldelim();
    }
    if (message.updateSubscriptions !== undefined) {
      UpdateSubscriptions178.encode(message.updateSubscriptions, writer.uint32(26).fork()).ldelim();
    }
    if (message.move !== undefined) {
      Move179.encode(message.move, writer.uint32(42).fork()).ldelim();
    }
    if (message.setAffiliation !== undefined) {
      SetAffiliation180.encode(message.setAffiliation, writer.uint32(58).fork()).ldelim();
    }
    if (message.setStatus !== undefined) {
      SetStatus181.encode(message.setStatus, writer.uint32(66).fork()).ldelim();
    }
    if (message.spotlight !== undefined) {
      Spotlight182.encode(message.spotlight, writer.uint32(74).fork()).ldelim();
    }
    if (message.ring !== undefined) {
      Ring183.encode(message.ring, writer.uint32(82).fork()).ldelim();
    }
    if (message.ban !== undefined) {
      Ban184.encode(message.ban, writer.uint32(98).fork()).ldelim();
    }
    if (message.kick !== undefined) {
      Kick185.encode(message.kick, writer.uint32(106).fork()).ldelim();
    }
    if (message.setImpassable !== undefined) {
      SetImpassable186.encode(message.setImpassable, writer.uint32(114).fork()).ldelim();
    }
    if (message.chat !== undefined) {
      Chat187.encode(message.chat, writer.uint32(122).fork()).ldelim();
    }
    if (message.interact !== undefined) {
      Interact188.encode(message.interact, writer.uint32(146).fork()).ldelim();
    }
    if (message.enterWhisper !== undefined) {
      EnterWhisper189.encode(message.enterWhisper, writer.uint32(154).fork()).ldelim();
    }
    if (message.leaveWhisper !== undefined) {
      LeaveWhisper190.encode(message.leaveWhisper, writer.uint32(162).fork()).ldelim();
    }
    if (message.setEmojiStatus !== undefined) {
      SetEmojiStatus191.encode(message.setEmojiStatus, writer.uint32(170).fork()).ldelim();
    }
    if (message.activelySpeaking !== undefined) {
      ActivelySpeaking192.encode(message.activelySpeaking, writer.uint32(178).fork()).ldelim();
    }
    if (message.setName !== undefined) {
      SetName193.encode(message.setName, writer.uint32(194).fork()).ldelim();
    }
    if (message.setTextStatus !== undefined) {
      SetTextStatus194.encode(message.setTextStatus, writer.uint32(202).fork()).ldelim();
    }
    if (message.teleport !== undefined) {
      Teleport195.encode(message.teleport, writer.uint32(210).fork()).ldelim();
    }
    if (message.exit !== undefined) {
      Exit196.encode(message.exit, writer.uint32(218).fork()).ldelim();
    }
    if (message.enter !== undefined) {
      Enter197.encode(message.enter, writer.uint32(226).fork()).ldelim();
    }
    if (message.setWorkCondition !== undefined) {
      SetWorkCondition198.encode(message.setWorkCondition, writer.uint32(234).fork()).ldelim();
    }
    if (message.respawn !== undefined) {
      Respawn199.encode(message.respawn, writer.uint32(242).fork()).ldelim();
    }
    if (message.spawn !== undefined) {
      Spawn200.encode(message.spawn, writer.uint32(250).fork()).ldelim();
    }
    if (message.ghost !== undefined) {
      Ghost201.encode(message.ghost, writer.uint32(258).fork()).ldelim();
    }
    if (message.init !== undefined) {
      Init202.encode(message.init, writer.uint32(266).fork()).ldelim();
    }
    if (message.setOutfitString !== undefined) {
      SetOutfitString203.encode(message.setOutfitString, writer.uint32(274).fork()).ldelim();
    }
    if (message.shootConfetti !== undefined) {
      ShootConfetti204.encode(message.shootConfetti, writer.uint32(290).fork()).ldelim();
    }
    if (message.setEventStatus !== undefined) {
      SetEventStatus205.encode(message.setEventStatus, writer.uint32(298).fork()).ldelim();
    }
    if (message.setInConversation !== undefined) {
      SetInConversation206.encode(message.setInConversation, writer.uint32(306).fork()).ldelim();
    }
    if (message.setCurrentDesk !== undefined) {
      SetCurrentDesk207.encode(message.setCurrentDesk, writer.uint32(314).fork()).ldelim();
    }
    if (message.setCurrentArea !== undefined) {
      SetCurrentArea208.encode(message.setCurrentArea, writer.uint32(322).fork()).ldelim();
    }
    if (message.setImagePointer !== undefined) {
      SetImagePointer209.encode(message.setImagePointer, writer.uint32(330).fork()).ldelim();
    }
    if (message.setGoKartId !== undefined) {
      SetGoKartId210.encode(message.setGoKartId, writer.uint32(338).fork()).ldelim();
    }
    if (message.mapSetDimensions !== undefined) {
      MapSetDimensions72.encode(message.mapSetDimensions, writer.uint32(346).fork()).ldelim();
    }
    if (message.mapSetCollisions !== undefined) {
      MapSetCollisions73.encode(message.mapSetCollisions, writer.uint32(354).fork()).ldelim();
    }
    if (message.mapSetBackgroundImagePath !== undefined) {
      MapSetBackgroundImagePath74.encode(message.mapSetBackgroundImagePath, writer.uint32(362).fork()).ldelim();
    }
    if (message.mapSetForegroundImagePath !== undefined) {
      MapSetForegroundImagePath75.encode(message.mapSetForegroundImagePath, writer.uint32(370).fork()).ldelim();
    }
    if (message.mapSetSprites !== undefined) {
      MapSetSprites76.encode(message.mapSetSprites, writer.uint32(378).fork()).ldelim();
    }
    if (message.mapSetSpawns !== undefined) {
      MapSetSpawns78.encode(message.mapSetSpawns, writer.uint32(386).fork()).ldelim();
    }
    if (message.mapSetSpaces !== undefined) {
      MapSetSpaces77.encode(message.mapSetSpaces, writer.uint32(394).fork()).ldelim();
    }
    if (message.mapSetPortals !== undefined) {
      MapSetPortals79.encode(message.mapSetPortals, writer.uint32(402).fork()).ldelim();
    }
    if (message.mapSetAnnouncer !== undefined) {
      MapSetAnnouncer80.encode(message.mapSetAnnouncer, writer.uint32(410).fork()).ldelim();
    }
    if (message.mapSetAssets !== undefined) {
      MapSetAssets81.encode(message.mapSetAssets, writer.uint32(434).fork()).ldelim();
    }
    if (message.mapSetObjects !== undefined) {
      MapSetObjects82.encode(message.mapSetObjects, writer.uint32(442).fork()).ldelim();
    }
    if (message.mapSetName !== undefined) {
      MapSetName83.encode(message.mapSetName, writer.uint32(450).fork()).ldelim();
    }
    if (message.mapSetMuteOnEntry !== undefined) {
      MapSetMuteOnEntry84.encode(message.mapSetMuteOnEntry, writer.uint32(466).fork()).ldelim();
    }
    if (message.mapSetUseDrawnBG !== undefined) {
      MapSetUseDrawnBG85.encode(message.mapSetUseDrawnBG, writer.uint32(474).fork()).ldelim();
    }
    if (message.mapSetWalls !== undefined) {
      MapSetWalls86.encode(message.mapSetWalls, writer.uint32(482).fork()).ldelim();
    }
    if (message.mapSetFloors !== undefined) {
      MapSetFloors87.encode(message.mapSetFloors, writer.uint32(490).fork()).ldelim();
    }
    if (message.mapSetAreas !== undefined) {
      MapSetAreas88.encode(message.mapSetAreas, writer.uint32(498).fork()).ldelim();
    }
    if (message.mapAddObject !== undefined) {
      MapAddObject211.encode(message.mapAddObject, writer.uint32(506).fork()).ldelim();
    }
    if (message.mapDeleteObject !== undefined) {
      MapDeleteObject89.encode(message.mapDeleteObject, writer.uint32(514).fork()).ldelim();
    }
    if (message.mapSetSpawn !== undefined) {
      MapSetSpawn90.encode(message.mapSetSpawn, writer.uint32(522).fork()).ldelim();
    }
    if (message.setIsAlone !== undefined) {
      SetIsAlone212.encode(message.setIsAlone, writer.uint32(530).fork()).ldelim();
    }
    if (message.mapSetMiniMapImagePath !== undefined) {
      MapSetMiniMapImagePath97.encode(message.mapSetMiniMapImagePath, writer.uint32(538).fork()).ldelim();
    }
    if (message.mapSetEnabledChats !== undefined) {
      MapSetEnabledChats93.encode(message.mapSetEnabledChats, writer.uint32(546).fork()).ldelim();
    }
    if (message.mapSetDescription !== undefined) {
      MapSetDescription94.encode(message.mapSetDescription, writer.uint32(554).fork()).ldelim();
    }
    if (message.mapSetDecoration !== undefined) {
      MapSetDecoration95.encode(message.mapSetDecoration, writer.uint32(562).fork()).ldelim();
    }
    if (message.mapSetTutorialTasks !== undefined) {
      MapSetTutorialTasks96.encode(message.mapSetTutorialTasks, writer.uint32(570).fork()).ldelim();
    }
    if (message.playSound !== undefined) {
      PlaySound213.encode(message.playSound, writer.uint32(578).fork()).ldelim();
    }
    if (message.mapSetScript !== undefined) {
      MapSetScript99.encode(message.mapSetScript, writer.uint32(586).fork()).ldelim();
    }
    if (message.setIsMobile !== undefined) {
      SetIsMobile214.encode(message.setIsMobile, writer.uint32(602).fork()).ldelim();
    }
    if (message.setScreenPointer !== undefined) {
      SetScreenPointer215.encode(message.setScreenPointer, writer.uint32(610).fork()).ldelim();
    }
    if (message.setEmoteV2 !== undefined) {
      SetEmoteV2216.encode(message.setEmoteV2, writer.uint32(618).fork()).ldelim();
    }
    if (message.setFocusModeEndTime !== undefined) {
      SetFocusModeEndTime217.encode(message.setFocusModeEndTime, writer.uint32(626).fork()).ldelim();
    }
    if (message.mapDeleteObjectById !== undefined) {
      MapDeleteObjectById218.encode(message.mapDeleteObjectById, writer.uint32(634).fork()).ldelim();
    }
    if (message.customAction !== undefined) {
      CustomAction219.encode(message.customAction, writer.uint32(642).fork()).ldelim();
    }
    if (message.block !== undefined) {
      Block220.encode(message.block, writer.uint32(658).fork()).ldelim();
    }
    if (message.setItemString !== undefined) {
      SetItemString221.encode(message.setItemString, writer.uint32(666).fork()).ldelim();
    }
    if (message.triggerItem !== undefined) {
      TriggerItem222.encode(message.triggerItem, writer.uint32(674).fork()).ldelim();
    }
    if (message.notify !== undefined) {
      Notify223.encode(message.notify, writer.uint32(682).fork()).ldelim();
    }
    if (message.setFollowTarget !== undefined) {
      SetFollowTarget224.encode(message.setFollowTarget, writer.uint32(690).fork()).ldelim();
    }
    if (message.requestToLead !== undefined) {
      RequestToLead225.encode(message.requestToLead, writer.uint32(698).fork()).ldelim();
    }
    if (message.enterPortal !== undefined) {
      EnterPortal226.encode(message.enterPortal, writer.uint32(706).fork()).ldelim();
    }
    if (message.setManualVideoSrc !== undefined) {
      SetManualVideoSrc227.encode(message.setManualVideoSrc, writer.uint32(714).fork()).ldelim();
    }
    if (message.setSubtitle !== undefined) {
      SetSubtitle228.encode(message.setSubtitle, writer.uint32(722).fork()).ldelim();
    }
    if (message.playerUpdatesSession !== undefined) {
      PlayerUpdatesSession117.encode(message.playerUpdatesSession, writer.uint32(730).fork()).ldelim();
    }
    if (message.mapMoveObject !== undefined) {
      MapMoveObject118.encode(message.mapMoveObject, writer.uint32(738).fork()).ldelim();
    }
    if (message.chatMessageUpdated !== undefined) {
      ChatMessageUpdated229.encode(message.chatMessageUpdated, writer.uint32(746).fork()).ldelim();
    }
    if (message.fxShakeObject !== undefined) {
      FXShakeObject120.encode(message.fxShakeObject, writer.uint32(754).fork()).ldelim();
    }
    if (message.fxShakeCamera !== undefined) {
      FXShakeCamera121.encode(message.fxShakeCamera, writer.uint32(762).fork()).ldelim();
    }
    if (message.registerCommand !== undefined) {
      RegisterCommand230.encode(message.registerCommand, writer.uint32(770).fork()).ldelim();
    }
    if (message.sendCommand !== undefined) {
      SendCommand231.encode(message.sendCommand, writer.uint32(778).fork()).ldelim();
    }
    if (message.speakerUpdatesSession !== undefined) {
      SpeakerUpdatesSession124.encode(message.speakerUpdatesSession, writer.uint32(786).fork()).ldelim();
    }
    if (message.addInventoryItem !== undefined) {
      AddInventoryItem232.encode(message.addInventoryItem, writer.uint32(810).fork()).ldelim();
    }
    if (message.removeInventoryItem !== undefined) {
      RemoveInventoryItem233.encode(message.removeInventoryItem, writer.uint32(818).fork()).ldelim();
    }
    if (message.setVehicleId !== undefined) {
      SetVehicleId234.encode(message.setVehicleId, writer.uint32(826).fork()).ldelim();
    }
    if (message.setSpeedModifier !== undefined) {
      SetSpeedModifier235.encode(message.setSpeedModifier, writer.uint32(834).fork()).ldelim();
    }
    if (message.highFive !== undefined) {
      HighFive236.encode(message.highFive, writer.uint32(842).fork()).ldelim();
    }
    if (message.updateSpaceItems !== undefined) {
      SpaceUpdatesItems126.encode(message.updateSpaceItems, writer.uint32(858).fork()).ldelim();
    }
    if (message.stopSound !== undefined) {
      StopSound237.encode(message.stopSound, writer.uint32(866).fork()).ldelim();
    }
    if (message.hipToBeSquare !== undefined) {
      HipToBeSquare131.encode(message.hipToBeSquare, writer.uint32(874).fork()).ldelim();
    }
    if (message.craft !== undefined) {
      Craft238.encode(message.craft, writer.uint32(882).fork()).ldelim();
    }
    if (message.triggerInventoryItem !== undefined) {
      TriggerInventoryItem239.encode(message.triggerInventoryItem, writer.uint32(890).fork()).ldelim();
    }
    if (message.setAllowScreenPointer !== undefined) {
      SetAllowScreenPointer240.encode(message.setAllowScreenPointer, writer.uint32(898).fork()).ldelim();
    }
    if (message.precomputeEnter !== undefined) {
      PrecomputeEnter241.encode(message.precomputeEnter, writer.uint32(906).fork()).ldelim();
    }
    if (message.requestMute !== undefined) {
      RequestMute242.encode(message.requestMute, writer.uint32(914).fork()).ldelim();
    }
    if (message.setDeskInfo !== undefined) {
      SetDeskInfo243.encode(message.setDeskInfo, writer.uint32(922).fork()).ldelim();
    }
    if (message.mapSetNooks !== undefined) {
      MapSetNooks138.encode(message.mapSetNooks, writer.uint32(930).fork()).ldelim();
    }
    if (message.requestToJoinNook !== undefined) {
      RequestToJoinNook244.encode(message.requestToJoinNook, writer.uint32(938).fork()).ldelim();
    }
    if (message.updateNookPermission !== undefined) {
      UpdateNookPermission245.encode(message.updateNookPermission, writer.uint32(946).fork()).ldelim();
    }
    if (message.wave !== undefined) {
      Wave246.encode(message.wave, writer.uint32(954).fork()).ldelim();
    }
    if (message.setPronouns !== undefined) {
      SetPronouns247.encode(message.setPronouns, writer.uint32(962).fork()).ldelim();
    }
    if (message.setTitle !== undefined) {
      SetTitle248.encode(message.setTitle, writer.uint32(970).fork()).ldelim();
    }
    if (message.setTimezone !== undefined) {
      SetTimezone249.encode(message.setTimezone, writer.uint32(978).fork()).ldelim();
    }
    if (message.setPhone !== undefined) {
      SetPhone250.encode(message.setPhone, writer.uint32(986).fork()).ldelim();
    }
    if (message.setDescription !== undefined) {
      SetDescription251.encode(message.setDescription, writer.uint32(994).fork()).ldelim();
    }
    if (message.setProfileImageUrl !== undefined) {
      SetProfileImageUrl252.encode(message.setProfileImageUrl, writer.uint32(1002).fork()).ldelim();
    }
    if (message.setPersonalImageUrl !== undefined) {
      SetPersonalImageUrl253.encode(message.setPersonalImageUrl, writer.uint32(1010).fork()).ldelim();
    }
    if (message.setAway !== undefined) {
      SetAway254.encode(message.setAway, writer.uint32(1018).fork()).ldelim();
    }
    if (message.setCity !== undefined) {
      SetCity255.encode(message.setCity, writer.uint32(1026).fork()).ldelim();
    }
    if (message.setCountry !== undefined) {
      SetCountry256.encode(message.setCountry, writer.uint32(1034).fork()).ldelim();
    }
    if (message.setStartDate !== undefined) {
      SetStartDate257.encode(message.setStartDate, writer.uint32(1042).fork()).ldelim();
    }
    if (message.startRecording !== undefined) {
      StartRecording258.encode(message.startRecording, writer.uint32(1050).fork()).ldelim();
    }
    if (message.requestAccessViaCheckIn !== undefined) {
      RequestAccessViaCheckIn259.encode(message.requestAccessViaCheckIn, writer.uint32(1058).fork()).ldelim();
    }
    if (message.respondToAccessRequest !== undefined) {
      RespondToAccessRequest260.encode(message.respondToAccessRequest, writer.uint32(1066).fork()).ldelim();
    }
    if (message.setAvailability !== undefined) {
      SetAvailability261.encode(message.setAvailability, writer.uint32(1074).fork()).ldelim();
    }
    if (message.enterWithTeammatesSetOwnLobbyInfo !== undefined) {
      EnterWithTeammatesSetOwnLobbyInfo262.encode(message.enterWithTeammatesSetOwnLobbyInfo, writer.uint32(1082).fork())
        .ldelim();
    }
    if (message.enterWithTeammatesInitiateEnterSpace !== undefined) {
      EnterWithTeammatesInitiateEnterSpace263.encode(
        message.enterWithTeammatesInitiateEnterSpace,
        writer.uint32(1090).fork(),
      ).ldelim();
    }
    if (message.respawnAtDesk !== undefined) {
      RespawnAtDesk264.encode(message.respawnAtDesk, writer.uint32(1098).fork()).ldelim();
    }
    if (message.setDeskFromNextAvailableDesk !== undefined) {
      SetDeskFromNextAvailableDesk265.encode(message.setDeskFromNextAvailableDesk, writer.uint32(1106).fork()).ldelim();
    }
    if (message.setSpaceRolePermissionOverride !== undefined) {
      SetSpaceRolePermissionOverride266.encode(message.setSpaceRolePermissionOverride, writer.uint32(1114).fork())
        .ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientServerAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientServerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 100:
          if (tag != 800) {
            break;
          }

          message.txnId = reader.uint32();
          continue;
        case 1:
          if (tag != 10) {
            break;
          }

          message.clientHeartbeat = ClientHeartbeat176.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.clientBackupHeartbeat = ClientBackupHeartbeat177.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.updateSubscriptions = UpdateSubscriptions178.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.move = Move179.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.setAffiliation = SetAffiliation180.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.setStatus = SetStatus181.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.spotlight = Spotlight182.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.ring = Ring183.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.ban = Ban184.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.kick = Kick185.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.setImpassable = SetImpassable186.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.chat = Chat187.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.interact = Interact188.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag != 154) {
            break;
          }

          message.enterWhisper = EnterWhisper189.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag != 162) {
            break;
          }

          message.leaveWhisper = LeaveWhisper190.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag != 170) {
            break;
          }

          message.setEmojiStatus = SetEmojiStatus191.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag != 178) {
            break;
          }

          message.activelySpeaking = ActivelySpeaking192.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag != 194) {
            break;
          }

          message.setName = SetName193.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag != 202) {
            break;
          }

          message.setTextStatus = SetTextStatus194.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag != 210) {
            break;
          }

          message.teleport = Teleport195.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag != 218) {
            break;
          }

          message.exit = Exit196.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag != 226) {
            break;
          }

          message.enter = Enter197.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag != 234) {
            break;
          }

          message.setWorkCondition = SetWorkCondition198.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag != 242) {
            break;
          }

          message.respawn = Respawn199.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag != 250) {
            break;
          }

          message.spawn = Spawn200.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag != 258) {
            break;
          }

          message.ghost = Ghost201.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag != 266) {
            break;
          }

          message.init = Init202.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag != 274) {
            break;
          }

          message.setOutfitString = SetOutfitString203.decode(reader, reader.uint32());
          continue;
        case 36:
          if (tag != 290) {
            break;
          }

          message.shootConfetti = ShootConfetti204.decode(reader, reader.uint32());
          continue;
        case 37:
          if (tag != 298) {
            break;
          }

          message.setEventStatus = SetEventStatus205.decode(reader, reader.uint32());
          continue;
        case 38:
          if (tag != 306) {
            break;
          }

          message.setInConversation = SetInConversation206.decode(reader, reader.uint32());
          continue;
        case 39:
          if (tag != 314) {
            break;
          }

          message.setCurrentDesk = SetCurrentDesk207.decode(reader, reader.uint32());
          continue;
        case 40:
          if (tag != 322) {
            break;
          }

          message.setCurrentArea = SetCurrentArea208.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag != 330) {
            break;
          }

          message.setImagePointer = SetImagePointer209.decode(reader, reader.uint32());
          continue;
        case 42:
          if (tag != 338) {
            break;
          }

          message.setGoKartId = SetGoKartId210.decode(reader, reader.uint32());
          continue;
        case 43:
          if (tag != 346) {
            break;
          }

          message.mapSetDimensions = MapSetDimensions72.decode(reader, reader.uint32());
          continue;
        case 44:
          if (tag != 354) {
            break;
          }

          message.mapSetCollisions = MapSetCollisions73.decode(reader, reader.uint32());
          continue;
        case 45:
          if (tag != 362) {
            break;
          }

          message.mapSetBackgroundImagePath = MapSetBackgroundImagePath74.decode(reader, reader.uint32());
          continue;
        case 46:
          if (tag != 370) {
            break;
          }

          message.mapSetForegroundImagePath = MapSetForegroundImagePath75.decode(reader, reader.uint32());
          continue;
        case 47:
          if (tag != 378) {
            break;
          }

          message.mapSetSprites = MapSetSprites76.decode(reader, reader.uint32());
          continue;
        case 48:
          if (tag != 386) {
            break;
          }

          message.mapSetSpawns = MapSetSpawns78.decode(reader, reader.uint32());
          continue;
        case 49:
          if (tag != 394) {
            break;
          }

          message.mapSetSpaces = MapSetSpaces77.decode(reader, reader.uint32());
          continue;
        case 50:
          if (tag != 402) {
            break;
          }

          message.mapSetPortals = MapSetPortals79.decode(reader, reader.uint32());
          continue;
        case 51:
          if (tag != 410) {
            break;
          }

          message.mapSetAnnouncer = MapSetAnnouncer80.decode(reader, reader.uint32());
          continue;
        case 54:
          if (tag != 434) {
            break;
          }

          message.mapSetAssets = MapSetAssets81.decode(reader, reader.uint32());
          continue;
        case 55:
          if (tag != 442) {
            break;
          }

          message.mapSetObjects = MapSetObjects82.decode(reader, reader.uint32());
          continue;
        case 56:
          if (tag != 450) {
            break;
          }

          message.mapSetName = MapSetName83.decode(reader, reader.uint32());
          continue;
        case 58:
          if (tag != 466) {
            break;
          }

          message.mapSetMuteOnEntry = MapSetMuteOnEntry84.decode(reader, reader.uint32());
          continue;
        case 59:
          if (tag != 474) {
            break;
          }

          message.mapSetUseDrawnBG = MapSetUseDrawnBG85.decode(reader, reader.uint32());
          continue;
        case 60:
          if (tag != 482) {
            break;
          }

          message.mapSetWalls = MapSetWalls86.decode(reader, reader.uint32());
          continue;
        case 61:
          if (tag != 490) {
            break;
          }

          message.mapSetFloors = MapSetFloors87.decode(reader, reader.uint32());
          continue;
        case 62:
          if (tag != 498) {
            break;
          }

          message.mapSetAreas = MapSetAreas88.decode(reader, reader.uint32());
          continue;
        case 63:
          if (tag != 506) {
            break;
          }

          message.mapAddObject = MapAddObject211.decode(reader, reader.uint32());
          continue;
        case 64:
          if (tag != 514) {
            break;
          }

          message.mapDeleteObject = MapDeleteObject89.decode(reader, reader.uint32());
          continue;
        case 65:
          if (tag != 522) {
            break;
          }

          message.mapSetSpawn = MapSetSpawn90.decode(reader, reader.uint32());
          continue;
        case 66:
          if (tag != 530) {
            break;
          }

          message.setIsAlone = SetIsAlone212.decode(reader, reader.uint32());
          continue;
        case 67:
          if (tag != 538) {
            break;
          }

          message.mapSetMiniMapImagePath = MapSetMiniMapImagePath97.decode(reader, reader.uint32());
          continue;
        case 68:
          if (tag != 546) {
            break;
          }

          message.mapSetEnabledChats = MapSetEnabledChats93.decode(reader, reader.uint32());
          continue;
        case 69:
          if (tag != 554) {
            break;
          }

          message.mapSetDescription = MapSetDescription94.decode(reader, reader.uint32());
          continue;
        case 70:
          if (tag != 562) {
            break;
          }

          message.mapSetDecoration = MapSetDecoration95.decode(reader, reader.uint32());
          continue;
        case 71:
          if (tag != 570) {
            break;
          }

          message.mapSetTutorialTasks = MapSetTutorialTasks96.decode(reader, reader.uint32());
          continue;
        case 72:
          if (tag != 578) {
            break;
          }

          message.playSound = PlaySound213.decode(reader, reader.uint32());
          continue;
        case 73:
          if (tag != 586) {
            break;
          }

          message.mapSetScript = MapSetScript99.decode(reader, reader.uint32());
          continue;
        case 75:
          if (tag != 602) {
            break;
          }

          message.setIsMobile = SetIsMobile214.decode(reader, reader.uint32());
          continue;
        case 76:
          if (tag != 610) {
            break;
          }

          message.setScreenPointer = SetScreenPointer215.decode(reader, reader.uint32());
          continue;
        case 77:
          if (tag != 618) {
            break;
          }

          message.setEmoteV2 = SetEmoteV2216.decode(reader, reader.uint32());
          continue;
        case 78:
          if (tag != 626) {
            break;
          }

          message.setFocusModeEndTime = SetFocusModeEndTime217.decode(reader, reader.uint32());
          continue;
        case 79:
          if (tag != 634) {
            break;
          }

          message.mapDeleteObjectById = MapDeleteObjectById218.decode(reader, reader.uint32());
          continue;
        case 80:
          if (tag != 642) {
            break;
          }

          message.customAction = CustomAction219.decode(reader, reader.uint32());
          continue;
        case 82:
          if (tag != 658) {
            break;
          }

          message.block = Block220.decode(reader, reader.uint32());
          continue;
        case 83:
          if (tag != 666) {
            break;
          }

          message.setItemString = SetItemString221.decode(reader, reader.uint32());
          continue;
        case 84:
          if (tag != 674) {
            break;
          }

          message.triggerItem = TriggerItem222.decode(reader, reader.uint32());
          continue;
        case 85:
          if (tag != 682) {
            break;
          }

          message.notify = Notify223.decode(reader, reader.uint32());
          continue;
        case 86:
          if (tag != 690) {
            break;
          }

          message.setFollowTarget = SetFollowTarget224.decode(reader, reader.uint32());
          continue;
        case 87:
          if (tag != 698) {
            break;
          }

          message.requestToLead = RequestToLead225.decode(reader, reader.uint32());
          continue;
        case 88:
          if (tag != 706) {
            break;
          }

          message.enterPortal = EnterPortal226.decode(reader, reader.uint32());
          continue;
        case 89:
          if (tag != 714) {
            break;
          }

          message.setManualVideoSrc = SetManualVideoSrc227.decode(reader, reader.uint32());
          continue;
        case 90:
          if (tag != 722) {
            break;
          }

          message.setSubtitle = SetSubtitle228.decode(reader, reader.uint32());
          continue;
        case 91:
          if (tag != 730) {
            break;
          }

          message.playerUpdatesSession = PlayerUpdatesSession117.decode(reader, reader.uint32());
          continue;
        case 92:
          if (tag != 738) {
            break;
          }

          message.mapMoveObject = MapMoveObject118.decode(reader, reader.uint32());
          continue;
        case 93:
          if (tag != 746) {
            break;
          }

          message.chatMessageUpdated = ChatMessageUpdated229.decode(reader, reader.uint32());
          continue;
        case 94:
          if (tag != 754) {
            break;
          }

          message.fxShakeObject = FXShakeObject120.decode(reader, reader.uint32());
          continue;
        case 95:
          if (tag != 762) {
            break;
          }

          message.fxShakeCamera = FXShakeCamera121.decode(reader, reader.uint32());
          continue;
        case 96:
          if (tag != 770) {
            break;
          }

          message.registerCommand = RegisterCommand230.decode(reader, reader.uint32());
          continue;
        case 97:
          if (tag != 778) {
            break;
          }

          message.sendCommand = SendCommand231.decode(reader, reader.uint32());
          continue;
        case 98:
          if (tag != 786) {
            break;
          }

          message.speakerUpdatesSession = SpeakerUpdatesSession124.decode(reader, reader.uint32());
          continue;
        case 101:
          if (tag != 810) {
            break;
          }

          message.addInventoryItem = AddInventoryItem232.decode(reader, reader.uint32());
          continue;
        case 102:
          if (tag != 818) {
            break;
          }

          message.removeInventoryItem = RemoveInventoryItem233.decode(reader, reader.uint32());
          continue;
        case 103:
          if (tag != 826) {
            break;
          }

          message.setVehicleId = SetVehicleId234.decode(reader, reader.uint32());
          continue;
        case 104:
          if (tag != 834) {
            break;
          }

          message.setSpeedModifier = SetSpeedModifier235.decode(reader, reader.uint32());
          continue;
        case 105:
          if (tag != 842) {
            break;
          }

          message.highFive = HighFive236.decode(reader, reader.uint32());
          continue;
        case 107:
          if (tag != 858) {
            break;
          }

          message.updateSpaceItems = SpaceUpdatesItems126.decode(reader, reader.uint32());
          continue;
        case 108:
          if (tag != 866) {
            break;
          }

          message.stopSound = StopSound237.decode(reader, reader.uint32());
          continue;
        case 109:
          if (tag != 874) {
            break;
          }

          message.hipToBeSquare = HipToBeSquare131.decode(reader, reader.uint32());
          continue;
        case 110:
          if (tag != 882) {
            break;
          }

          message.craft = Craft238.decode(reader, reader.uint32());
          continue;
        case 111:
          if (tag != 890) {
            break;
          }

          message.triggerInventoryItem = TriggerInventoryItem239.decode(reader, reader.uint32());
          continue;
        case 112:
          if (tag != 898) {
            break;
          }

          message.setAllowScreenPointer = SetAllowScreenPointer240.decode(reader, reader.uint32());
          continue;
        case 113:
          if (tag != 906) {
            break;
          }

          message.precomputeEnter = PrecomputeEnter241.decode(reader, reader.uint32());
          continue;
        case 114:
          if (tag != 914) {
            break;
          }

          message.requestMute = RequestMute242.decode(reader, reader.uint32());
          continue;
        case 115:
          if (tag != 922) {
            break;
          }

          message.setDeskInfo = SetDeskInfo243.decode(reader, reader.uint32());
          continue;
        case 116:
          if (tag != 930) {
            break;
          }

          message.mapSetNooks = MapSetNooks138.decode(reader, reader.uint32());
          continue;
        case 117:
          if (tag != 938) {
            break;
          }

          message.requestToJoinNook = RequestToJoinNook244.decode(reader, reader.uint32());
          continue;
        case 118:
          if (tag != 946) {
            break;
          }

          message.updateNookPermission = UpdateNookPermission245.decode(reader, reader.uint32());
          continue;
        case 119:
          if (tag != 954) {
            break;
          }

          message.wave = Wave246.decode(reader, reader.uint32());
          continue;
        case 120:
          if (tag != 962) {
            break;
          }

          message.setPronouns = SetPronouns247.decode(reader, reader.uint32());
          continue;
        case 121:
          if (tag != 970) {
            break;
          }

          message.setTitle = SetTitle248.decode(reader, reader.uint32());
          continue;
        case 122:
          if (tag != 978) {
            break;
          }

          message.setTimezone = SetTimezone249.decode(reader, reader.uint32());
          continue;
        case 123:
          if (tag != 986) {
            break;
          }

          message.setPhone = SetPhone250.decode(reader, reader.uint32());
          continue;
        case 124:
          if (tag != 994) {
            break;
          }

          message.setDescription = SetDescription251.decode(reader, reader.uint32());
          continue;
        case 125:
          if (tag != 1002) {
            break;
          }

          message.setProfileImageUrl = SetProfileImageUrl252.decode(reader, reader.uint32());
          continue;
        case 126:
          if (tag != 1010) {
            break;
          }

          message.setPersonalImageUrl = SetPersonalImageUrl253.decode(reader, reader.uint32());
          continue;
        case 127:
          if (tag != 1018) {
            break;
          }

          message.setAway = SetAway254.decode(reader, reader.uint32());
          continue;
        case 128:
          if (tag != 1026) {
            break;
          }

          message.setCity = SetCity255.decode(reader, reader.uint32());
          continue;
        case 129:
          if (tag != 1034) {
            break;
          }

          message.setCountry = SetCountry256.decode(reader, reader.uint32());
          continue;
        case 130:
          if (tag != 1042) {
            break;
          }

          message.setStartDate = SetStartDate257.decode(reader, reader.uint32());
          continue;
        case 131:
          if (tag != 1050) {
            break;
          }

          message.startRecording = StartRecording258.decode(reader, reader.uint32());
          continue;
        case 132:
          if (tag != 1058) {
            break;
          }

          message.requestAccessViaCheckIn = RequestAccessViaCheckIn259.decode(reader, reader.uint32());
          continue;
        case 133:
          if (tag != 1066) {
            break;
          }

          message.respondToAccessRequest = RespondToAccessRequest260.decode(reader, reader.uint32());
          continue;
        case 134:
          if (tag != 1074) {
            break;
          }

          message.setAvailability = SetAvailability261.decode(reader, reader.uint32());
          continue;
        case 135:
          if (tag != 1082) {
            break;
          }

          message.enterWithTeammatesSetOwnLobbyInfo = EnterWithTeammatesSetOwnLobbyInfo262.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 136:
          if (tag != 1090) {
            break;
          }

          message.enterWithTeammatesInitiateEnterSpace = EnterWithTeammatesInitiateEnterSpace263.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 137:
          if (tag != 1098) {
            break;
          }

          message.respawnAtDesk = RespawnAtDesk264.decode(reader, reader.uint32());
          continue;
        case 138:
          if (tag != 1106) {
            break;
          }

          message.setDeskFromNextAvailableDesk = SetDeskFromNextAvailableDesk265.decode(reader, reader.uint32());
          continue;
        case 139:
          if (tag != 1114) {
            break;
          }

          message.setSpaceRolePermissionOverride = SetSpaceRolePermissionOverride266.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientServerAction {
    return {
      txnId: isSet(object.txnId) ? Number(object.txnId) : undefined,
      clientHeartbeat: isSet(object.clientHeartbeat) ? ClientHeartbeat176.fromJSON(object.clientHeartbeat) : undefined,
      clientBackupHeartbeat: isSet(object.clientBackupHeartbeat)
        ? ClientBackupHeartbeat177.fromJSON(object.clientBackupHeartbeat)
        : undefined,
      updateSubscriptions: isSet(object.updateSubscriptions)
        ? UpdateSubscriptions178.fromJSON(object.updateSubscriptions)
        : undefined,
      move: isSet(object.move) ? Move179.fromJSON(object.move) : undefined,
      setAffiliation: isSet(object.setAffiliation) ? SetAffiliation180.fromJSON(object.setAffiliation) : undefined,
      setStatus: isSet(object.setStatus) ? SetStatus181.fromJSON(object.setStatus) : undefined,
      spotlight: isSet(object.spotlight) ? Spotlight182.fromJSON(object.spotlight) : undefined,
      ring: isSet(object.ring) ? Ring183.fromJSON(object.ring) : undefined,
      ban: isSet(object.ban) ? Ban184.fromJSON(object.ban) : undefined,
      kick: isSet(object.kick) ? Kick185.fromJSON(object.kick) : undefined,
      setImpassable: isSet(object.setImpassable) ? SetImpassable186.fromJSON(object.setImpassable) : undefined,
      chat: isSet(object.chat) ? Chat187.fromJSON(object.chat) : undefined,
      interact: isSet(object.interact) ? Interact188.fromJSON(object.interact) : undefined,
      enterWhisper: isSet(object.enterWhisper) ? EnterWhisper189.fromJSON(object.enterWhisper) : undefined,
      leaveWhisper: isSet(object.leaveWhisper) ? LeaveWhisper190.fromJSON(object.leaveWhisper) : undefined,
      setEmojiStatus: isSet(object.setEmojiStatus) ? SetEmojiStatus191.fromJSON(object.setEmojiStatus) : undefined,
      activelySpeaking: isSet(object.activelySpeaking)
        ? ActivelySpeaking192.fromJSON(object.activelySpeaking)
        : undefined,
      setName: isSet(object.setName) ? SetName193.fromJSON(object.setName) : undefined,
      setTextStatus: isSet(object.setTextStatus) ? SetTextStatus194.fromJSON(object.setTextStatus) : undefined,
      teleport: isSet(object.teleport) ? Teleport195.fromJSON(object.teleport) : undefined,
      exit: isSet(object.exit) ? Exit196.fromJSON(object.exit) : undefined,
      enter: isSet(object.enter) ? Enter197.fromJSON(object.enter) : undefined,
      setWorkCondition: isSet(object.setWorkCondition)
        ? SetWorkCondition198.fromJSON(object.setWorkCondition)
        : undefined,
      respawn: isSet(object.respawn) ? Respawn199.fromJSON(object.respawn) : undefined,
      spawn: isSet(object.spawn) ? Spawn200.fromJSON(object.spawn) : undefined,
      ghost: isSet(object.ghost) ? Ghost201.fromJSON(object.ghost) : undefined,
      init: isSet(object.init) ? Init202.fromJSON(object.init) : undefined,
      setOutfitString: isSet(object.setOutfitString) ? SetOutfitString203.fromJSON(object.setOutfitString) : undefined,
      shootConfetti: isSet(object.shootConfetti) ? ShootConfetti204.fromJSON(object.shootConfetti) : undefined,
      setEventStatus: isSet(object.setEventStatus) ? SetEventStatus205.fromJSON(object.setEventStatus) : undefined,
      setInConversation: isSet(object.setInConversation)
        ? SetInConversation206.fromJSON(object.setInConversation)
        : undefined,
      setCurrentDesk: isSet(object.setCurrentDesk) ? SetCurrentDesk207.fromJSON(object.setCurrentDesk) : undefined,
      setCurrentArea: isSet(object.setCurrentArea) ? SetCurrentArea208.fromJSON(object.setCurrentArea) : undefined,
      setImagePointer: isSet(object.setImagePointer) ? SetImagePointer209.fromJSON(object.setImagePointer) : undefined,
      setGoKartId: isSet(object.setGoKartId) ? SetGoKartId210.fromJSON(object.setGoKartId) : undefined,
      mapSetDimensions: isSet(object.mapSetDimensions)
        ? MapSetDimensions72.fromJSON(object.mapSetDimensions)
        : undefined,
      mapSetCollisions: isSet(object.mapSetCollisions)
        ? MapSetCollisions73.fromJSON(object.mapSetCollisions)
        : undefined,
      mapSetBackgroundImagePath: isSet(object.mapSetBackgroundImagePath)
        ? MapSetBackgroundImagePath74.fromJSON(object.mapSetBackgroundImagePath)
        : undefined,
      mapSetForegroundImagePath: isSet(object.mapSetForegroundImagePath)
        ? MapSetForegroundImagePath75.fromJSON(object.mapSetForegroundImagePath)
        : undefined,
      mapSetSprites: isSet(object.mapSetSprites) ? MapSetSprites76.fromJSON(object.mapSetSprites) : undefined,
      mapSetSpawns: isSet(object.mapSetSpawns) ? MapSetSpawns78.fromJSON(object.mapSetSpawns) : undefined,
      mapSetSpaces: isSet(object.mapSetSpaces) ? MapSetSpaces77.fromJSON(object.mapSetSpaces) : undefined,
      mapSetPortals: isSet(object.mapSetPortals) ? MapSetPortals79.fromJSON(object.mapSetPortals) : undefined,
      mapSetAnnouncer: isSet(object.mapSetAnnouncer) ? MapSetAnnouncer80.fromJSON(object.mapSetAnnouncer) : undefined,
      mapSetAssets: isSet(object.mapSetAssets) ? MapSetAssets81.fromJSON(object.mapSetAssets) : undefined,
      mapSetObjects: isSet(object.mapSetObjects) ? MapSetObjects82.fromJSON(object.mapSetObjects) : undefined,
      mapSetName: isSet(object.mapSetName) ? MapSetName83.fromJSON(object.mapSetName) : undefined,
      mapSetMuteOnEntry: isSet(object.mapSetMuteOnEntry)
        ? MapSetMuteOnEntry84.fromJSON(object.mapSetMuteOnEntry)
        : undefined,
      mapSetUseDrawnBG: isSet(object.mapSetUseDrawnBG)
        ? MapSetUseDrawnBG85.fromJSON(object.mapSetUseDrawnBG)
        : undefined,
      mapSetWalls: isSet(object.mapSetWalls) ? MapSetWalls86.fromJSON(object.mapSetWalls) : undefined,
      mapSetFloors: isSet(object.mapSetFloors) ? MapSetFloors87.fromJSON(object.mapSetFloors) : undefined,
      mapSetAreas: isSet(object.mapSetAreas) ? MapSetAreas88.fromJSON(object.mapSetAreas) : undefined,
      mapAddObject: isSet(object.mapAddObject) ? MapAddObject211.fromJSON(object.mapAddObject) : undefined,
      mapDeleteObject: isSet(object.mapDeleteObject) ? MapDeleteObject89.fromJSON(object.mapDeleteObject) : undefined,
      mapSetSpawn: isSet(object.mapSetSpawn) ? MapSetSpawn90.fromJSON(object.mapSetSpawn) : undefined,
      setIsAlone: isSet(object.setIsAlone) ? SetIsAlone212.fromJSON(object.setIsAlone) : undefined,
      mapSetMiniMapImagePath: isSet(object.mapSetMiniMapImagePath)
        ? MapSetMiniMapImagePath97.fromJSON(object.mapSetMiniMapImagePath)
        : undefined,
      mapSetEnabledChats: isSet(object.mapSetEnabledChats)
        ? MapSetEnabledChats93.fromJSON(object.mapSetEnabledChats)
        : undefined,
      mapSetDescription: isSet(object.mapSetDescription)
        ? MapSetDescription94.fromJSON(object.mapSetDescription)
        : undefined,
      mapSetDecoration: isSet(object.mapSetDecoration)
        ? MapSetDecoration95.fromJSON(object.mapSetDecoration)
        : undefined,
      mapSetTutorialTasks: isSet(object.mapSetTutorialTasks)
        ? MapSetTutorialTasks96.fromJSON(object.mapSetTutorialTasks)
        : undefined,
      playSound: isSet(object.playSound) ? PlaySound213.fromJSON(object.playSound) : undefined,
      mapSetScript: isSet(object.mapSetScript) ? MapSetScript99.fromJSON(object.mapSetScript) : undefined,
      setIsMobile: isSet(object.setIsMobile) ? SetIsMobile214.fromJSON(object.setIsMobile) : undefined,
      setScreenPointer: isSet(object.setScreenPointer)
        ? SetScreenPointer215.fromJSON(object.setScreenPointer)
        : undefined,
      setEmoteV2: isSet(object.setEmoteV2) ? SetEmoteV2216.fromJSON(object.setEmoteV2) : undefined,
      setFocusModeEndTime: isSet(object.setFocusModeEndTime)
        ? SetFocusModeEndTime217.fromJSON(object.setFocusModeEndTime)
        : undefined,
      mapDeleteObjectById: isSet(object.mapDeleteObjectById)
        ? MapDeleteObjectById218.fromJSON(object.mapDeleteObjectById)
        : undefined,
      customAction: isSet(object.customAction) ? CustomAction219.fromJSON(object.customAction) : undefined,
      block: isSet(object.block) ? Block220.fromJSON(object.block) : undefined,
      setItemString: isSet(object.setItemString) ? SetItemString221.fromJSON(object.setItemString) : undefined,
      triggerItem: isSet(object.triggerItem) ? TriggerItem222.fromJSON(object.triggerItem) : undefined,
      notify: isSet(object.notify) ? Notify223.fromJSON(object.notify) : undefined,
      setFollowTarget: isSet(object.setFollowTarget) ? SetFollowTarget224.fromJSON(object.setFollowTarget) : undefined,
      requestToLead: isSet(object.requestToLead) ? RequestToLead225.fromJSON(object.requestToLead) : undefined,
      enterPortal: isSet(object.enterPortal) ? EnterPortal226.fromJSON(object.enterPortal) : undefined,
      setManualVideoSrc: isSet(object.setManualVideoSrc)
        ? SetManualVideoSrc227.fromJSON(object.setManualVideoSrc)
        : undefined,
      setSubtitle: isSet(object.setSubtitle) ? SetSubtitle228.fromJSON(object.setSubtitle) : undefined,
      playerUpdatesSession: isSet(object.playerUpdatesSession)
        ? PlayerUpdatesSession117.fromJSON(object.playerUpdatesSession)
        : undefined,
      mapMoveObject: isSet(object.mapMoveObject) ? MapMoveObject118.fromJSON(object.mapMoveObject) : undefined,
      chatMessageUpdated: isSet(object.chatMessageUpdated)
        ? ChatMessageUpdated229.fromJSON(object.chatMessageUpdated)
        : undefined,
      fxShakeObject: isSet(object.fxShakeObject) ? FXShakeObject120.fromJSON(object.fxShakeObject) : undefined,
      fxShakeCamera: isSet(object.fxShakeCamera) ? FXShakeCamera121.fromJSON(object.fxShakeCamera) : undefined,
      registerCommand: isSet(object.registerCommand) ? RegisterCommand230.fromJSON(object.registerCommand) : undefined,
      sendCommand: isSet(object.sendCommand) ? SendCommand231.fromJSON(object.sendCommand) : undefined,
      speakerUpdatesSession: isSet(object.speakerUpdatesSession)
        ? SpeakerUpdatesSession124.fromJSON(object.speakerUpdatesSession)
        : undefined,
      addInventoryItem: isSet(object.addInventoryItem)
        ? AddInventoryItem232.fromJSON(object.addInventoryItem)
        : undefined,
      removeInventoryItem: isSet(object.removeInventoryItem)
        ? RemoveInventoryItem233.fromJSON(object.removeInventoryItem)
        : undefined,
      setVehicleId: isSet(object.setVehicleId) ? SetVehicleId234.fromJSON(object.setVehicleId) : undefined,
      setSpeedModifier: isSet(object.setSpeedModifier)
        ? SetSpeedModifier235.fromJSON(object.setSpeedModifier)
        : undefined,
      highFive: isSet(object.highFive) ? HighFive236.fromJSON(object.highFive) : undefined,
      updateSpaceItems: isSet(object.updateSpaceItems)
        ? SpaceUpdatesItems126.fromJSON(object.updateSpaceItems)
        : undefined,
      stopSound: isSet(object.stopSound) ? StopSound237.fromJSON(object.stopSound) : undefined,
      hipToBeSquare: isSet(object.hipToBeSquare) ? HipToBeSquare131.fromJSON(object.hipToBeSquare) : undefined,
      craft: isSet(object.craft) ? Craft238.fromJSON(object.craft) : undefined,
      triggerInventoryItem: isSet(object.triggerInventoryItem)
        ? TriggerInventoryItem239.fromJSON(object.triggerInventoryItem)
        : undefined,
      setAllowScreenPointer: isSet(object.setAllowScreenPointer)
        ? SetAllowScreenPointer240.fromJSON(object.setAllowScreenPointer)
        : undefined,
      precomputeEnter: isSet(object.precomputeEnter) ? PrecomputeEnter241.fromJSON(object.precomputeEnter) : undefined,
      requestMute: isSet(object.requestMute) ? RequestMute242.fromJSON(object.requestMute) : undefined,
      setDeskInfo: isSet(object.setDeskInfo) ? SetDeskInfo243.fromJSON(object.setDeskInfo) : undefined,
      mapSetNooks: isSet(object.mapSetNooks) ? MapSetNooks138.fromJSON(object.mapSetNooks) : undefined,
      requestToJoinNook: isSet(object.requestToJoinNook)
        ? RequestToJoinNook244.fromJSON(object.requestToJoinNook)
        : undefined,
      updateNookPermission: isSet(object.updateNookPermission)
        ? UpdateNookPermission245.fromJSON(object.updateNookPermission)
        : undefined,
      wave: isSet(object.wave) ? Wave246.fromJSON(object.wave) : undefined,
      setPronouns: isSet(object.setPronouns) ? SetPronouns247.fromJSON(object.setPronouns) : undefined,
      setTitle: isSet(object.setTitle) ? SetTitle248.fromJSON(object.setTitle) : undefined,
      setTimezone: isSet(object.setTimezone) ? SetTimezone249.fromJSON(object.setTimezone) : undefined,
      setPhone: isSet(object.setPhone) ? SetPhone250.fromJSON(object.setPhone) : undefined,
      setDescription: isSet(object.setDescription) ? SetDescription251.fromJSON(object.setDescription) : undefined,
      setProfileImageUrl: isSet(object.setProfileImageUrl)
        ? SetProfileImageUrl252.fromJSON(object.setProfileImageUrl)
        : undefined,
      setPersonalImageUrl: isSet(object.setPersonalImageUrl)
        ? SetPersonalImageUrl253.fromJSON(object.setPersonalImageUrl)
        : undefined,
      setAway: isSet(object.setAway) ? SetAway254.fromJSON(object.setAway) : undefined,
      setCity: isSet(object.setCity) ? SetCity255.fromJSON(object.setCity) : undefined,
      setCountry: isSet(object.setCountry) ? SetCountry256.fromJSON(object.setCountry) : undefined,
      setStartDate: isSet(object.setStartDate) ? SetStartDate257.fromJSON(object.setStartDate) : undefined,
      startRecording: isSet(object.startRecording) ? StartRecording258.fromJSON(object.startRecording) : undefined,
      requestAccessViaCheckIn: isSet(object.requestAccessViaCheckIn)
        ? RequestAccessViaCheckIn259.fromJSON(object.requestAccessViaCheckIn)
        : undefined,
      respondToAccessRequest: isSet(object.respondToAccessRequest)
        ? RespondToAccessRequest260.fromJSON(object.respondToAccessRequest)
        : undefined,
      setAvailability: isSet(object.setAvailability) ? SetAvailability261.fromJSON(object.setAvailability) : undefined,
      enterWithTeammatesSetOwnLobbyInfo: isSet(object.enterWithTeammatesSetOwnLobbyInfo)
        ? EnterWithTeammatesSetOwnLobbyInfo262.fromJSON(object.enterWithTeammatesSetOwnLobbyInfo)
        : undefined,
      enterWithTeammatesInitiateEnterSpace: isSet(object.enterWithTeammatesInitiateEnterSpace)
        ? EnterWithTeammatesInitiateEnterSpace263.fromJSON(object.enterWithTeammatesInitiateEnterSpace)
        : undefined,
      respawnAtDesk: isSet(object.respawnAtDesk) ? RespawnAtDesk264.fromJSON(object.respawnAtDesk) : undefined,
      setDeskFromNextAvailableDesk: isSet(object.setDeskFromNextAvailableDesk)
        ? SetDeskFromNextAvailableDesk265.fromJSON(object.setDeskFromNextAvailableDesk)
        : undefined,
      setSpaceRolePermissionOverride: isSet(object.setSpaceRolePermissionOverride)
        ? SetSpaceRolePermissionOverride266.fromJSON(object.setSpaceRolePermissionOverride)
        : undefined,
    };
  },

  toJSON(message: ClientServerAction): unknown {
    const obj: any = {};
    message.txnId !== undefined && (obj.txnId = Math.round(message.txnId));
    message.clientHeartbeat !== undefined &&
      (obj.clientHeartbeat = message.clientHeartbeat ? ClientHeartbeat176.toJSON(message.clientHeartbeat) : undefined);
    message.clientBackupHeartbeat !== undefined && (obj.clientBackupHeartbeat = message.clientBackupHeartbeat
      ? ClientBackupHeartbeat177.toJSON(message.clientBackupHeartbeat)
      : undefined);
    message.updateSubscriptions !== undefined && (obj.updateSubscriptions = message.updateSubscriptions
      ? UpdateSubscriptions178.toJSON(message.updateSubscriptions)
      : undefined);
    message.move !== undefined && (obj.move = message.move ? Move179.toJSON(message.move) : undefined);
    message.setAffiliation !== undefined &&
      (obj.setAffiliation = message.setAffiliation ? SetAffiliation180.toJSON(message.setAffiliation) : undefined);
    message.setStatus !== undefined &&
      (obj.setStatus = message.setStatus ? SetStatus181.toJSON(message.setStatus) : undefined);
    message.spotlight !== undefined &&
      (obj.spotlight = message.spotlight ? Spotlight182.toJSON(message.spotlight) : undefined);
    message.ring !== undefined && (obj.ring = message.ring ? Ring183.toJSON(message.ring) : undefined);
    message.ban !== undefined && (obj.ban = message.ban ? Ban184.toJSON(message.ban) : undefined);
    message.kick !== undefined && (obj.kick = message.kick ? Kick185.toJSON(message.kick) : undefined);
    message.setImpassable !== undefined &&
      (obj.setImpassable = message.setImpassable ? SetImpassable186.toJSON(message.setImpassable) : undefined);
    message.chat !== undefined && (obj.chat = message.chat ? Chat187.toJSON(message.chat) : undefined);
    message.interact !== undefined &&
      (obj.interact = message.interact ? Interact188.toJSON(message.interact) : undefined);
    message.enterWhisper !== undefined &&
      (obj.enterWhisper = message.enterWhisper ? EnterWhisper189.toJSON(message.enterWhisper) : undefined);
    message.leaveWhisper !== undefined &&
      (obj.leaveWhisper = message.leaveWhisper ? LeaveWhisper190.toJSON(message.leaveWhisper) : undefined);
    message.setEmojiStatus !== undefined &&
      (obj.setEmojiStatus = message.setEmojiStatus ? SetEmojiStatus191.toJSON(message.setEmojiStatus) : undefined);
    message.activelySpeaking !== undefined && (obj.activelySpeaking = message.activelySpeaking
      ? ActivelySpeaking192.toJSON(message.activelySpeaking)
      : undefined);
    message.setName !== undefined && (obj.setName = message.setName ? SetName193.toJSON(message.setName) : undefined);
    message.setTextStatus !== undefined &&
      (obj.setTextStatus = message.setTextStatus ? SetTextStatus194.toJSON(message.setTextStatus) : undefined);
    message.teleport !== undefined &&
      (obj.teleport = message.teleport ? Teleport195.toJSON(message.teleport) : undefined);
    message.exit !== undefined && (obj.exit = message.exit ? Exit196.toJSON(message.exit) : undefined);
    message.enter !== undefined && (obj.enter = message.enter ? Enter197.toJSON(message.enter) : undefined);
    message.setWorkCondition !== undefined && (obj.setWorkCondition = message.setWorkCondition
      ? SetWorkCondition198.toJSON(message.setWorkCondition)
      : undefined);
    message.respawn !== undefined && (obj.respawn = message.respawn ? Respawn199.toJSON(message.respawn) : undefined);
    message.spawn !== undefined && (obj.spawn = message.spawn ? Spawn200.toJSON(message.spawn) : undefined);
    message.ghost !== undefined && (obj.ghost = message.ghost ? Ghost201.toJSON(message.ghost) : undefined);
    message.init !== undefined && (obj.init = message.init ? Init202.toJSON(message.init) : undefined);
    message.setOutfitString !== undefined &&
      (obj.setOutfitString = message.setOutfitString ? SetOutfitString203.toJSON(message.setOutfitString) : undefined);
    message.shootConfetti !== undefined &&
      (obj.shootConfetti = message.shootConfetti ? ShootConfetti204.toJSON(message.shootConfetti) : undefined);
    message.setEventStatus !== undefined &&
      (obj.setEventStatus = message.setEventStatus ? SetEventStatus205.toJSON(message.setEventStatus) : undefined);
    message.setInConversation !== undefined && (obj.setInConversation = message.setInConversation
      ? SetInConversation206.toJSON(message.setInConversation)
      : undefined);
    message.setCurrentDesk !== undefined &&
      (obj.setCurrentDesk = message.setCurrentDesk ? SetCurrentDesk207.toJSON(message.setCurrentDesk) : undefined);
    message.setCurrentArea !== undefined &&
      (obj.setCurrentArea = message.setCurrentArea ? SetCurrentArea208.toJSON(message.setCurrentArea) : undefined);
    message.setImagePointer !== undefined &&
      (obj.setImagePointer = message.setImagePointer ? SetImagePointer209.toJSON(message.setImagePointer) : undefined);
    message.setGoKartId !== undefined &&
      (obj.setGoKartId = message.setGoKartId ? SetGoKartId210.toJSON(message.setGoKartId) : undefined);
    message.mapSetDimensions !== undefined &&
      (obj.mapSetDimensions = message.mapSetDimensions
        ? MapSetDimensions72.toJSON(message.mapSetDimensions)
        : undefined);
    message.mapSetCollisions !== undefined &&
      (obj.mapSetCollisions = message.mapSetCollisions
        ? MapSetCollisions73.toJSON(message.mapSetCollisions)
        : undefined);
    message.mapSetBackgroundImagePath !== undefined &&
      (obj.mapSetBackgroundImagePath = message.mapSetBackgroundImagePath
        ? MapSetBackgroundImagePath74.toJSON(message.mapSetBackgroundImagePath)
        : undefined);
    message.mapSetForegroundImagePath !== undefined &&
      (obj.mapSetForegroundImagePath = message.mapSetForegroundImagePath
        ? MapSetForegroundImagePath75.toJSON(message.mapSetForegroundImagePath)
        : undefined);
    message.mapSetSprites !== undefined &&
      (obj.mapSetSprites = message.mapSetSprites ? MapSetSprites76.toJSON(message.mapSetSprites) : undefined);
    message.mapSetSpawns !== undefined &&
      (obj.mapSetSpawns = message.mapSetSpawns ? MapSetSpawns78.toJSON(message.mapSetSpawns) : undefined);
    message.mapSetSpaces !== undefined &&
      (obj.mapSetSpaces = message.mapSetSpaces ? MapSetSpaces77.toJSON(message.mapSetSpaces) : undefined);
    message.mapSetPortals !== undefined &&
      (obj.mapSetPortals = message.mapSetPortals ? MapSetPortals79.toJSON(message.mapSetPortals) : undefined);
    message.mapSetAnnouncer !== undefined &&
      (obj.mapSetAnnouncer = message.mapSetAnnouncer ? MapSetAnnouncer80.toJSON(message.mapSetAnnouncer) : undefined);
    message.mapSetAssets !== undefined &&
      (obj.mapSetAssets = message.mapSetAssets ? MapSetAssets81.toJSON(message.mapSetAssets) : undefined);
    message.mapSetObjects !== undefined &&
      (obj.mapSetObjects = message.mapSetObjects ? MapSetObjects82.toJSON(message.mapSetObjects) : undefined);
    message.mapSetName !== undefined &&
      (obj.mapSetName = message.mapSetName ? MapSetName83.toJSON(message.mapSetName) : undefined);
    message.mapSetMuteOnEntry !== undefined && (obj.mapSetMuteOnEntry = message.mapSetMuteOnEntry
      ? MapSetMuteOnEntry84.toJSON(message.mapSetMuteOnEntry)
      : undefined);
    message.mapSetUseDrawnBG !== undefined &&
      (obj.mapSetUseDrawnBG = message.mapSetUseDrawnBG
        ? MapSetUseDrawnBG85.toJSON(message.mapSetUseDrawnBG)
        : undefined);
    message.mapSetWalls !== undefined &&
      (obj.mapSetWalls = message.mapSetWalls ? MapSetWalls86.toJSON(message.mapSetWalls) : undefined);
    message.mapSetFloors !== undefined &&
      (obj.mapSetFloors = message.mapSetFloors ? MapSetFloors87.toJSON(message.mapSetFloors) : undefined);
    message.mapSetAreas !== undefined &&
      (obj.mapSetAreas = message.mapSetAreas ? MapSetAreas88.toJSON(message.mapSetAreas) : undefined);
    message.mapAddObject !== undefined &&
      (obj.mapAddObject = message.mapAddObject ? MapAddObject211.toJSON(message.mapAddObject) : undefined);
    message.mapDeleteObject !== undefined &&
      (obj.mapDeleteObject = message.mapDeleteObject ? MapDeleteObject89.toJSON(message.mapDeleteObject) : undefined);
    message.mapSetSpawn !== undefined &&
      (obj.mapSetSpawn = message.mapSetSpawn ? MapSetSpawn90.toJSON(message.mapSetSpawn) : undefined);
    message.setIsAlone !== undefined &&
      (obj.setIsAlone = message.setIsAlone ? SetIsAlone212.toJSON(message.setIsAlone) : undefined);
    message.mapSetMiniMapImagePath !== undefined && (obj.mapSetMiniMapImagePath = message.mapSetMiniMapImagePath
      ? MapSetMiniMapImagePath97.toJSON(message.mapSetMiniMapImagePath)
      : undefined);
    message.mapSetEnabledChats !== undefined && (obj.mapSetEnabledChats = message.mapSetEnabledChats
      ? MapSetEnabledChats93.toJSON(message.mapSetEnabledChats)
      : undefined);
    message.mapSetDescription !== undefined && (obj.mapSetDescription = message.mapSetDescription
      ? MapSetDescription94.toJSON(message.mapSetDescription)
      : undefined);
    message.mapSetDecoration !== undefined &&
      (obj.mapSetDecoration = message.mapSetDecoration
        ? MapSetDecoration95.toJSON(message.mapSetDecoration)
        : undefined);
    message.mapSetTutorialTasks !== undefined && (obj.mapSetTutorialTasks = message.mapSetTutorialTasks
      ? MapSetTutorialTasks96.toJSON(message.mapSetTutorialTasks)
      : undefined);
    message.playSound !== undefined &&
      (obj.playSound = message.playSound ? PlaySound213.toJSON(message.playSound) : undefined);
    message.mapSetScript !== undefined &&
      (obj.mapSetScript = message.mapSetScript ? MapSetScript99.toJSON(message.mapSetScript) : undefined);
    message.setIsMobile !== undefined &&
      (obj.setIsMobile = message.setIsMobile ? SetIsMobile214.toJSON(message.setIsMobile) : undefined);
    message.setScreenPointer !== undefined && (obj.setScreenPointer = message.setScreenPointer
      ? SetScreenPointer215.toJSON(message.setScreenPointer)
      : undefined);
    message.setEmoteV2 !== undefined &&
      (obj.setEmoteV2 = message.setEmoteV2 ? SetEmoteV2216.toJSON(message.setEmoteV2) : undefined);
    message.setFocusModeEndTime !== undefined && (obj.setFocusModeEndTime = message.setFocusModeEndTime
      ? SetFocusModeEndTime217.toJSON(message.setFocusModeEndTime)
      : undefined);
    message.mapDeleteObjectById !== undefined && (obj.mapDeleteObjectById = message.mapDeleteObjectById
      ? MapDeleteObjectById218.toJSON(message.mapDeleteObjectById)
      : undefined);
    message.customAction !== undefined &&
      (obj.customAction = message.customAction ? CustomAction219.toJSON(message.customAction) : undefined);
    message.block !== undefined && (obj.block = message.block ? Block220.toJSON(message.block) : undefined);
    message.setItemString !== undefined &&
      (obj.setItemString = message.setItemString ? SetItemString221.toJSON(message.setItemString) : undefined);
    message.triggerItem !== undefined &&
      (obj.triggerItem = message.triggerItem ? TriggerItem222.toJSON(message.triggerItem) : undefined);
    message.notify !== undefined && (obj.notify = message.notify ? Notify223.toJSON(message.notify) : undefined);
    message.setFollowTarget !== undefined &&
      (obj.setFollowTarget = message.setFollowTarget ? SetFollowTarget224.toJSON(message.setFollowTarget) : undefined);
    message.requestToLead !== undefined &&
      (obj.requestToLead = message.requestToLead ? RequestToLead225.toJSON(message.requestToLead) : undefined);
    message.enterPortal !== undefined &&
      (obj.enterPortal = message.enterPortal ? EnterPortal226.toJSON(message.enterPortal) : undefined);
    message.setManualVideoSrc !== undefined && (obj.setManualVideoSrc = message.setManualVideoSrc
      ? SetManualVideoSrc227.toJSON(message.setManualVideoSrc)
      : undefined);
    message.setSubtitle !== undefined &&
      (obj.setSubtitle = message.setSubtitle ? SetSubtitle228.toJSON(message.setSubtitle) : undefined);
    message.playerUpdatesSession !== undefined && (obj.playerUpdatesSession = message.playerUpdatesSession
      ? PlayerUpdatesSession117.toJSON(message.playerUpdatesSession)
      : undefined);
    message.mapMoveObject !== undefined &&
      (obj.mapMoveObject = message.mapMoveObject ? MapMoveObject118.toJSON(message.mapMoveObject) : undefined);
    message.chatMessageUpdated !== undefined && (obj.chatMessageUpdated = message.chatMessageUpdated
      ? ChatMessageUpdated229.toJSON(message.chatMessageUpdated)
      : undefined);
    message.fxShakeObject !== undefined &&
      (obj.fxShakeObject = message.fxShakeObject ? FXShakeObject120.toJSON(message.fxShakeObject) : undefined);
    message.fxShakeCamera !== undefined &&
      (obj.fxShakeCamera = message.fxShakeCamera ? FXShakeCamera121.toJSON(message.fxShakeCamera) : undefined);
    message.registerCommand !== undefined &&
      (obj.registerCommand = message.registerCommand ? RegisterCommand230.toJSON(message.registerCommand) : undefined);
    message.sendCommand !== undefined &&
      (obj.sendCommand = message.sendCommand ? SendCommand231.toJSON(message.sendCommand) : undefined);
    message.speakerUpdatesSession !== undefined && (obj.speakerUpdatesSession = message.speakerUpdatesSession
      ? SpeakerUpdatesSession124.toJSON(message.speakerUpdatesSession)
      : undefined);
    message.addInventoryItem !== undefined && (obj.addInventoryItem = message.addInventoryItem
      ? AddInventoryItem232.toJSON(message.addInventoryItem)
      : undefined);
    message.removeInventoryItem !== undefined && (obj.removeInventoryItem = message.removeInventoryItem
      ? RemoveInventoryItem233.toJSON(message.removeInventoryItem)
      : undefined);
    message.setVehicleId !== undefined &&
      (obj.setVehicleId = message.setVehicleId ? SetVehicleId234.toJSON(message.setVehicleId) : undefined);
    message.setSpeedModifier !== undefined && (obj.setSpeedModifier = message.setSpeedModifier
      ? SetSpeedModifier235.toJSON(message.setSpeedModifier)
      : undefined);
    message.highFive !== undefined &&
      (obj.highFive = message.highFive ? HighFive236.toJSON(message.highFive) : undefined);
    message.updateSpaceItems !== undefined && (obj.updateSpaceItems = message.updateSpaceItems
      ? SpaceUpdatesItems126.toJSON(message.updateSpaceItems)
      : undefined);
    message.stopSound !== undefined &&
      (obj.stopSound = message.stopSound ? StopSound237.toJSON(message.stopSound) : undefined);
    message.hipToBeSquare !== undefined &&
      (obj.hipToBeSquare = message.hipToBeSquare ? HipToBeSquare131.toJSON(message.hipToBeSquare) : undefined);
    message.craft !== undefined && (obj.craft = message.craft ? Craft238.toJSON(message.craft) : undefined);
    message.triggerInventoryItem !== undefined && (obj.triggerInventoryItem = message.triggerInventoryItem
      ? TriggerInventoryItem239.toJSON(message.triggerInventoryItem)
      : undefined);
    message.setAllowScreenPointer !== undefined && (obj.setAllowScreenPointer = message.setAllowScreenPointer
      ? SetAllowScreenPointer240.toJSON(message.setAllowScreenPointer)
      : undefined);
    message.precomputeEnter !== undefined &&
      (obj.precomputeEnter = message.precomputeEnter ? PrecomputeEnter241.toJSON(message.precomputeEnter) : undefined);
    message.requestMute !== undefined &&
      (obj.requestMute = message.requestMute ? RequestMute242.toJSON(message.requestMute) : undefined);
    message.setDeskInfo !== undefined &&
      (obj.setDeskInfo = message.setDeskInfo ? SetDeskInfo243.toJSON(message.setDeskInfo) : undefined);
    message.mapSetNooks !== undefined &&
      (obj.mapSetNooks = message.mapSetNooks ? MapSetNooks138.toJSON(message.mapSetNooks) : undefined);
    message.requestToJoinNook !== undefined && (obj.requestToJoinNook = message.requestToJoinNook
      ? RequestToJoinNook244.toJSON(message.requestToJoinNook)
      : undefined);
    message.updateNookPermission !== undefined && (obj.updateNookPermission = message.updateNookPermission
      ? UpdateNookPermission245.toJSON(message.updateNookPermission)
      : undefined);
    message.wave !== undefined && (obj.wave = message.wave ? Wave246.toJSON(message.wave) : undefined);
    message.setPronouns !== undefined &&
      (obj.setPronouns = message.setPronouns ? SetPronouns247.toJSON(message.setPronouns) : undefined);
    message.setTitle !== undefined &&
      (obj.setTitle = message.setTitle ? SetTitle248.toJSON(message.setTitle) : undefined);
    message.setTimezone !== undefined &&
      (obj.setTimezone = message.setTimezone ? SetTimezone249.toJSON(message.setTimezone) : undefined);
    message.setPhone !== undefined &&
      (obj.setPhone = message.setPhone ? SetPhone250.toJSON(message.setPhone) : undefined);
    message.setDescription !== undefined &&
      (obj.setDescription = message.setDescription ? SetDescription251.toJSON(message.setDescription) : undefined);
    message.setProfileImageUrl !== undefined && (obj.setProfileImageUrl = message.setProfileImageUrl
      ? SetProfileImageUrl252.toJSON(message.setProfileImageUrl)
      : undefined);
    message.setPersonalImageUrl !== undefined && (obj.setPersonalImageUrl = message.setPersonalImageUrl
      ? SetPersonalImageUrl253.toJSON(message.setPersonalImageUrl)
      : undefined);
    message.setAway !== undefined && (obj.setAway = message.setAway ? SetAway254.toJSON(message.setAway) : undefined);
    message.setCity !== undefined && (obj.setCity = message.setCity ? SetCity255.toJSON(message.setCity) : undefined);
    message.setCountry !== undefined &&
      (obj.setCountry = message.setCountry ? SetCountry256.toJSON(message.setCountry) : undefined);
    message.setStartDate !== undefined &&
      (obj.setStartDate = message.setStartDate ? SetStartDate257.toJSON(message.setStartDate) : undefined);
    message.startRecording !== undefined &&
      (obj.startRecording = message.startRecording ? StartRecording258.toJSON(message.startRecording) : undefined);
    message.requestAccessViaCheckIn !== undefined && (obj.requestAccessViaCheckIn = message.requestAccessViaCheckIn
      ? RequestAccessViaCheckIn259.toJSON(message.requestAccessViaCheckIn)
      : undefined);
    message.respondToAccessRequest !== undefined && (obj.respondToAccessRequest = message.respondToAccessRequest
      ? RespondToAccessRequest260.toJSON(message.respondToAccessRequest)
      : undefined);
    message.setAvailability !== undefined &&
      (obj.setAvailability = message.setAvailability ? SetAvailability261.toJSON(message.setAvailability) : undefined);
    message.enterWithTeammatesSetOwnLobbyInfo !== undefined &&
      (obj.enterWithTeammatesSetOwnLobbyInfo = message.enterWithTeammatesSetOwnLobbyInfo
        ? EnterWithTeammatesSetOwnLobbyInfo262.toJSON(message.enterWithTeammatesSetOwnLobbyInfo)
        : undefined);
    message.enterWithTeammatesInitiateEnterSpace !== undefined &&
      (obj.enterWithTeammatesInitiateEnterSpace = message.enterWithTeammatesInitiateEnterSpace
        ? EnterWithTeammatesInitiateEnterSpace263.toJSON(message.enterWithTeammatesInitiateEnterSpace)
        : undefined);
    message.respawnAtDesk !== undefined &&
      (obj.respawnAtDesk = message.respawnAtDesk ? RespawnAtDesk264.toJSON(message.respawnAtDesk) : undefined);
    message.setDeskFromNextAvailableDesk !== undefined &&
      (obj.setDeskFromNextAvailableDesk = message.setDeskFromNextAvailableDesk
        ? SetDeskFromNextAvailableDesk265.toJSON(message.setDeskFromNextAvailableDesk)
        : undefined);
    message.setSpaceRolePermissionOverride !== undefined &&
      (obj.setSpaceRolePermissionOverride = message.setSpaceRolePermissionOverride
        ? SetSpaceRolePermissionOverride266.toJSON(message.setSpaceRolePermissionOverride)
        : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientServerAction>, I>>(base?: I): ClientServerAction {
    return ClientServerAction.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ClientServerAction>, I>>(object: I): ClientServerAction {
    const message = createBaseClientServerAction();
    message.txnId = object.txnId ?? undefined;
    message.clientHeartbeat = (object.clientHeartbeat !== undefined && object.clientHeartbeat !== null)
      ? ClientHeartbeat176.fromPartial(object.clientHeartbeat)
      : undefined;
    message.clientBackupHeartbeat =
      (object.clientBackupHeartbeat !== undefined && object.clientBackupHeartbeat !== null)
        ? ClientBackupHeartbeat177.fromPartial(object.clientBackupHeartbeat)
        : undefined;
    message.updateSubscriptions = (object.updateSubscriptions !== undefined && object.updateSubscriptions !== null)
      ? UpdateSubscriptions178.fromPartial(object.updateSubscriptions)
      : undefined;
    message.move = (object.move !== undefined && object.move !== null) ? Move179.fromPartial(object.move) : undefined;
    message.setAffiliation = (object.setAffiliation !== undefined && object.setAffiliation !== null)
      ? SetAffiliation180.fromPartial(object.setAffiliation)
      : undefined;
    message.setStatus = (object.setStatus !== undefined && object.setStatus !== null)
      ? SetStatus181.fromPartial(object.setStatus)
      : undefined;
    message.spotlight = (object.spotlight !== undefined && object.spotlight !== null)
      ? Spotlight182.fromPartial(object.spotlight)
      : undefined;
    message.ring = (object.ring !== undefined && object.ring !== null) ? Ring183.fromPartial(object.ring) : undefined;
    message.ban = (object.ban !== undefined && object.ban !== null) ? Ban184.fromPartial(object.ban) : undefined;
    message.kick = (object.kick !== undefined && object.kick !== null) ? Kick185.fromPartial(object.kick) : undefined;
    message.setImpassable = (object.setImpassable !== undefined && object.setImpassable !== null)
      ? SetImpassable186.fromPartial(object.setImpassable)
      : undefined;
    message.chat = (object.chat !== undefined && object.chat !== null) ? Chat187.fromPartial(object.chat) : undefined;
    message.interact = (object.interact !== undefined && object.interact !== null)
      ? Interact188.fromPartial(object.interact)
      : undefined;
    message.enterWhisper = (object.enterWhisper !== undefined && object.enterWhisper !== null)
      ? EnterWhisper189.fromPartial(object.enterWhisper)
      : undefined;
    message.leaveWhisper = (object.leaveWhisper !== undefined && object.leaveWhisper !== null)
      ? LeaveWhisper190.fromPartial(object.leaveWhisper)
      : undefined;
    message.setEmojiStatus = (object.setEmojiStatus !== undefined && object.setEmojiStatus !== null)
      ? SetEmojiStatus191.fromPartial(object.setEmojiStatus)
      : undefined;
    message.activelySpeaking = (object.activelySpeaking !== undefined && object.activelySpeaking !== null)
      ? ActivelySpeaking192.fromPartial(object.activelySpeaking)
      : undefined;
    message.setName = (object.setName !== undefined && object.setName !== null)
      ? SetName193.fromPartial(object.setName)
      : undefined;
    message.setTextStatus = (object.setTextStatus !== undefined && object.setTextStatus !== null)
      ? SetTextStatus194.fromPartial(object.setTextStatus)
      : undefined;
    message.teleport = (object.teleport !== undefined && object.teleport !== null)
      ? Teleport195.fromPartial(object.teleport)
      : undefined;
    message.exit = (object.exit !== undefined && object.exit !== null) ? Exit196.fromPartial(object.exit) : undefined;
    message.enter = (object.enter !== undefined && object.enter !== null)
      ? Enter197.fromPartial(object.enter)
      : undefined;
    message.setWorkCondition = (object.setWorkCondition !== undefined && object.setWorkCondition !== null)
      ? SetWorkCondition198.fromPartial(object.setWorkCondition)
      : undefined;
    message.respawn = (object.respawn !== undefined && object.respawn !== null)
      ? Respawn199.fromPartial(object.respawn)
      : undefined;
    message.spawn = (object.spawn !== undefined && object.spawn !== null)
      ? Spawn200.fromPartial(object.spawn)
      : undefined;
    message.ghost = (object.ghost !== undefined && object.ghost !== null)
      ? Ghost201.fromPartial(object.ghost)
      : undefined;
    message.init = (object.init !== undefined && object.init !== null) ? Init202.fromPartial(object.init) : undefined;
    message.setOutfitString = (object.setOutfitString !== undefined && object.setOutfitString !== null)
      ? SetOutfitString203.fromPartial(object.setOutfitString)
      : undefined;
    message.shootConfetti = (object.shootConfetti !== undefined && object.shootConfetti !== null)
      ? ShootConfetti204.fromPartial(object.shootConfetti)
      : undefined;
    message.setEventStatus = (object.setEventStatus !== undefined && object.setEventStatus !== null)
      ? SetEventStatus205.fromPartial(object.setEventStatus)
      : undefined;
    message.setInConversation = (object.setInConversation !== undefined && object.setInConversation !== null)
      ? SetInConversation206.fromPartial(object.setInConversation)
      : undefined;
    message.setCurrentDesk = (object.setCurrentDesk !== undefined && object.setCurrentDesk !== null)
      ? SetCurrentDesk207.fromPartial(object.setCurrentDesk)
      : undefined;
    message.setCurrentArea = (object.setCurrentArea !== undefined && object.setCurrentArea !== null)
      ? SetCurrentArea208.fromPartial(object.setCurrentArea)
      : undefined;
    message.setImagePointer = (object.setImagePointer !== undefined && object.setImagePointer !== null)
      ? SetImagePointer209.fromPartial(object.setImagePointer)
      : undefined;
    message.setGoKartId = (object.setGoKartId !== undefined && object.setGoKartId !== null)
      ? SetGoKartId210.fromPartial(object.setGoKartId)
      : undefined;
    message.mapSetDimensions = (object.mapSetDimensions !== undefined && object.mapSetDimensions !== null)
      ? MapSetDimensions72.fromPartial(object.mapSetDimensions)
      : undefined;
    message.mapSetCollisions = (object.mapSetCollisions !== undefined && object.mapSetCollisions !== null)
      ? MapSetCollisions73.fromPartial(object.mapSetCollisions)
      : undefined;
    message.mapSetBackgroundImagePath =
      (object.mapSetBackgroundImagePath !== undefined && object.mapSetBackgroundImagePath !== null)
        ? MapSetBackgroundImagePath74.fromPartial(object.mapSetBackgroundImagePath)
        : undefined;
    message.mapSetForegroundImagePath =
      (object.mapSetForegroundImagePath !== undefined && object.mapSetForegroundImagePath !== null)
        ? MapSetForegroundImagePath75.fromPartial(object.mapSetForegroundImagePath)
        : undefined;
    message.mapSetSprites = (object.mapSetSprites !== undefined && object.mapSetSprites !== null)
      ? MapSetSprites76.fromPartial(object.mapSetSprites)
      : undefined;
    message.mapSetSpawns = (object.mapSetSpawns !== undefined && object.mapSetSpawns !== null)
      ? MapSetSpawns78.fromPartial(object.mapSetSpawns)
      : undefined;
    message.mapSetSpaces = (object.mapSetSpaces !== undefined && object.mapSetSpaces !== null)
      ? MapSetSpaces77.fromPartial(object.mapSetSpaces)
      : undefined;
    message.mapSetPortals = (object.mapSetPortals !== undefined && object.mapSetPortals !== null)
      ? MapSetPortals79.fromPartial(object.mapSetPortals)
      : undefined;
    message.mapSetAnnouncer = (object.mapSetAnnouncer !== undefined && object.mapSetAnnouncer !== null)
      ? MapSetAnnouncer80.fromPartial(object.mapSetAnnouncer)
      : undefined;
    message.mapSetAssets = (object.mapSetAssets !== undefined && object.mapSetAssets !== null)
      ? MapSetAssets81.fromPartial(object.mapSetAssets)
      : undefined;
    message.mapSetObjects = (object.mapSetObjects !== undefined && object.mapSetObjects !== null)
      ? MapSetObjects82.fromPartial(object.mapSetObjects)
      : undefined;
    message.mapSetName = (object.mapSetName !== undefined && object.mapSetName !== null)
      ? MapSetName83.fromPartial(object.mapSetName)
      : undefined;
    message.mapSetMuteOnEntry = (object.mapSetMuteOnEntry !== undefined && object.mapSetMuteOnEntry !== null)
      ? MapSetMuteOnEntry84.fromPartial(object.mapSetMuteOnEntry)
      : undefined;
    message.mapSetUseDrawnBG = (object.mapSetUseDrawnBG !== undefined && object.mapSetUseDrawnBG !== null)
      ? MapSetUseDrawnBG85.fromPartial(object.mapSetUseDrawnBG)
      : undefined;
    message.mapSetWalls = (object.mapSetWalls !== undefined && object.mapSetWalls !== null)
      ? MapSetWalls86.fromPartial(object.mapSetWalls)
      : undefined;
    message.mapSetFloors = (object.mapSetFloors !== undefined && object.mapSetFloors !== null)
      ? MapSetFloors87.fromPartial(object.mapSetFloors)
      : undefined;
    message.mapSetAreas = (object.mapSetAreas !== undefined && object.mapSetAreas !== null)
      ? MapSetAreas88.fromPartial(object.mapSetAreas)
      : undefined;
    message.mapAddObject = (object.mapAddObject !== undefined && object.mapAddObject !== null)
      ? MapAddObject211.fromPartial(object.mapAddObject)
      : undefined;
    message.mapDeleteObject = (object.mapDeleteObject !== undefined && object.mapDeleteObject !== null)
      ? MapDeleteObject89.fromPartial(object.mapDeleteObject)
      : undefined;
    message.mapSetSpawn = (object.mapSetSpawn !== undefined && object.mapSetSpawn !== null)
      ? MapSetSpawn90.fromPartial(object.mapSetSpawn)
      : undefined;
    message.setIsAlone = (object.setIsAlone !== undefined && object.setIsAlone !== null)
      ? SetIsAlone212.fromPartial(object.setIsAlone)
      : undefined;
    message.mapSetMiniMapImagePath =
      (object.mapSetMiniMapImagePath !== undefined && object.mapSetMiniMapImagePath !== null)
        ? MapSetMiniMapImagePath97.fromPartial(object.mapSetMiniMapImagePath)
        : undefined;
    message.mapSetEnabledChats = (object.mapSetEnabledChats !== undefined && object.mapSetEnabledChats !== null)
      ? MapSetEnabledChats93.fromPartial(object.mapSetEnabledChats)
      : undefined;
    message.mapSetDescription = (object.mapSetDescription !== undefined && object.mapSetDescription !== null)
      ? MapSetDescription94.fromPartial(object.mapSetDescription)
      : undefined;
    message.mapSetDecoration = (object.mapSetDecoration !== undefined && object.mapSetDecoration !== null)
      ? MapSetDecoration95.fromPartial(object.mapSetDecoration)
      : undefined;
    message.mapSetTutorialTasks = (object.mapSetTutorialTasks !== undefined && object.mapSetTutorialTasks !== null)
      ? MapSetTutorialTasks96.fromPartial(object.mapSetTutorialTasks)
      : undefined;
    message.playSound = (object.playSound !== undefined && object.playSound !== null)
      ? PlaySound213.fromPartial(object.playSound)
      : undefined;
    message.mapSetScript = (object.mapSetScript !== undefined && object.mapSetScript !== null)
      ? MapSetScript99.fromPartial(object.mapSetScript)
      : undefined;
    message.setIsMobile = (object.setIsMobile !== undefined && object.setIsMobile !== null)
      ? SetIsMobile214.fromPartial(object.setIsMobile)
      : undefined;
    message.setScreenPointer = (object.setScreenPointer !== undefined && object.setScreenPointer !== null)
      ? SetScreenPointer215.fromPartial(object.setScreenPointer)
      : undefined;
    message.setEmoteV2 = (object.setEmoteV2 !== undefined && object.setEmoteV2 !== null)
      ? SetEmoteV2216.fromPartial(object.setEmoteV2)
      : undefined;
    message.setFocusModeEndTime = (object.setFocusModeEndTime !== undefined && object.setFocusModeEndTime !== null)
      ? SetFocusModeEndTime217.fromPartial(object.setFocusModeEndTime)
      : undefined;
    message.mapDeleteObjectById = (object.mapDeleteObjectById !== undefined && object.mapDeleteObjectById !== null)
      ? MapDeleteObjectById218.fromPartial(object.mapDeleteObjectById)
      : undefined;
    message.customAction = (object.customAction !== undefined && object.customAction !== null)
      ? CustomAction219.fromPartial(object.customAction)
      : undefined;
    message.block = (object.block !== undefined && object.block !== null)
      ? Block220.fromPartial(object.block)
      : undefined;
    message.setItemString = (object.setItemString !== undefined && object.setItemString !== null)
      ? SetItemString221.fromPartial(object.setItemString)
      : undefined;
    message.triggerItem = (object.triggerItem !== undefined && object.triggerItem !== null)
      ? TriggerItem222.fromPartial(object.triggerItem)
      : undefined;
    message.notify = (object.notify !== undefined && object.notify !== null)
      ? Notify223.fromPartial(object.notify)
      : undefined;
    message.setFollowTarget = (object.setFollowTarget !== undefined && object.setFollowTarget !== null)
      ? SetFollowTarget224.fromPartial(object.setFollowTarget)
      : undefined;
    message.requestToLead = (object.requestToLead !== undefined && object.requestToLead !== null)
      ? RequestToLead225.fromPartial(object.requestToLead)
      : undefined;
    message.enterPortal = (object.enterPortal !== undefined && object.enterPortal !== null)
      ? EnterPortal226.fromPartial(object.enterPortal)
      : undefined;
    message.setManualVideoSrc = (object.setManualVideoSrc !== undefined && object.setManualVideoSrc !== null)
      ? SetManualVideoSrc227.fromPartial(object.setManualVideoSrc)
      : undefined;
    message.setSubtitle = (object.setSubtitle !== undefined && object.setSubtitle !== null)
      ? SetSubtitle228.fromPartial(object.setSubtitle)
      : undefined;
    message.playerUpdatesSession = (object.playerUpdatesSession !== undefined && object.playerUpdatesSession !== null)
      ? PlayerUpdatesSession117.fromPartial(object.playerUpdatesSession)
      : undefined;
    message.mapMoveObject = (object.mapMoveObject !== undefined && object.mapMoveObject !== null)
      ? MapMoveObject118.fromPartial(object.mapMoveObject)
      : undefined;
    message.chatMessageUpdated = (object.chatMessageUpdated !== undefined && object.chatMessageUpdated !== null)
      ? ChatMessageUpdated229.fromPartial(object.chatMessageUpdated)
      : undefined;
    message.fxShakeObject = (object.fxShakeObject !== undefined && object.fxShakeObject !== null)
      ? FXShakeObject120.fromPartial(object.fxShakeObject)
      : undefined;
    message.fxShakeCamera = (object.fxShakeCamera !== undefined && object.fxShakeCamera !== null)
      ? FXShakeCamera121.fromPartial(object.fxShakeCamera)
      : undefined;
    message.registerCommand = (object.registerCommand !== undefined && object.registerCommand !== null)
      ? RegisterCommand230.fromPartial(object.registerCommand)
      : undefined;
    message.sendCommand = (object.sendCommand !== undefined && object.sendCommand !== null)
      ? SendCommand231.fromPartial(object.sendCommand)
      : undefined;
    message.speakerUpdatesSession =
      (object.speakerUpdatesSession !== undefined && object.speakerUpdatesSession !== null)
        ? SpeakerUpdatesSession124.fromPartial(object.speakerUpdatesSession)
        : undefined;
    message.addInventoryItem = (object.addInventoryItem !== undefined && object.addInventoryItem !== null)
      ? AddInventoryItem232.fromPartial(object.addInventoryItem)
      : undefined;
    message.removeInventoryItem = (object.removeInventoryItem !== undefined && object.removeInventoryItem !== null)
      ? RemoveInventoryItem233.fromPartial(object.removeInventoryItem)
      : undefined;
    message.setVehicleId = (object.setVehicleId !== undefined && object.setVehicleId !== null)
      ? SetVehicleId234.fromPartial(object.setVehicleId)
      : undefined;
    message.setSpeedModifier = (object.setSpeedModifier !== undefined && object.setSpeedModifier !== null)
      ? SetSpeedModifier235.fromPartial(object.setSpeedModifier)
      : undefined;
    message.highFive = (object.highFive !== undefined && object.highFive !== null)
      ? HighFive236.fromPartial(object.highFive)
      : undefined;
    message.updateSpaceItems = (object.updateSpaceItems !== undefined && object.updateSpaceItems !== null)
      ? SpaceUpdatesItems126.fromPartial(object.updateSpaceItems)
      : undefined;
    message.stopSound = (object.stopSound !== undefined && object.stopSound !== null)
      ? StopSound237.fromPartial(object.stopSound)
      : undefined;
    message.hipToBeSquare = (object.hipToBeSquare !== undefined && object.hipToBeSquare !== null)
      ? HipToBeSquare131.fromPartial(object.hipToBeSquare)
      : undefined;
    message.craft = (object.craft !== undefined && object.craft !== null)
      ? Craft238.fromPartial(object.craft)
      : undefined;
    message.triggerInventoryItem = (object.triggerInventoryItem !== undefined && object.triggerInventoryItem !== null)
      ? TriggerInventoryItem239.fromPartial(object.triggerInventoryItem)
      : undefined;
    message.setAllowScreenPointer =
      (object.setAllowScreenPointer !== undefined && object.setAllowScreenPointer !== null)
        ? SetAllowScreenPointer240.fromPartial(object.setAllowScreenPointer)
        : undefined;
    message.precomputeEnter = (object.precomputeEnter !== undefined && object.precomputeEnter !== null)
      ? PrecomputeEnter241.fromPartial(object.precomputeEnter)
      : undefined;
    message.requestMute = (object.requestMute !== undefined && object.requestMute !== null)
      ? RequestMute242.fromPartial(object.requestMute)
      : undefined;
    message.setDeskInfo = (object.setDeskInfo !== undefined && object.setDeskInfo !== null)
      ? SetDeskInfo243.fromPartial(object.setDeskInfo)
      : undefined;
    message.mapSetNooks = (object.mapSetNooks !== undefined && object.mapSetNooks !== null)
      ? MapSetNooks138.fromPartial(object.mapSetNooks)
      : undefined;
    message.requestToJoinNook = (object.requestToJoinNook !== undefined && object.requestToJoinNook !== null)
      ? RequestToJoinNook244.fromPartial(object.requestToJoinNook)
      : undefined;
    message.updateNookPermission = (object.updateNookPermission !== undefined && object.updateNookPermission !== null)
      ? UpdateNookPermission245.fromPartial(object.updateNookPermission)
      : undefined;
    message.wave = (object.wave !== undefined && object.wave !== null) ? Wave246.fromPartial(object.wave) : undefined;
    message.setPronouns = (object.setPronouns !== undefined && object.setPronouns !== null)
      ? SetPronouns247.fromPartial(object.setPronouns)
      : undefined;
    message.setTitle = (object.setTitle !== undefined && object.setTitle !== null)
      ? SetTitle248.fromPartial(object.setTitle)
      : undefined;
    message.setTimezone = (object.setTimezone !== undefined && object.setTimezone !== null)
      ? SetTimezone249.fromPartial(object.setTimezone)
      : undefined;
    message.setPhone = (object.setPhone !== undefined && object.setPhone !== null)
      ? SetPhone250.fromPartial(object.setPhone)
      : undefined;
    message.setDescription = (object.setDescription !== undefined && object.setDescription !== null)
      ? SetDescription251.fromPartial(object.setDescription)
      : undefined;
    message.setProfileImageUrl = (object.setProfileImageUrl !== undefined && object.setProfileImageUrl !== null)
      ? SetProfileImageUrl252.fromPartial(object.setProfileImageUrl)
      : undefined;
    message.setPersonalImageUrl = (object.setPersonalImageUrl !== undefined && object.setPersonalImageUrl !== null)
      ? SetPersonalImageUrl253.fromPartial(object.setPersonalImageUrl)
      : undefined;
    message.setAway = (object.setAway !== undefined && object.setAway !== null)
      ? SetAway254.fromPartial(object.setAway)
      : undefined;
    message.setCity = (object.setCity !== undefined && object.setCity !== null)
      ? SetCity255.fromPartial(object.setCity)
      : undefined;
    message.setCountry = (object.setCountry !== undefined && object.setCountry !== null)
      ? SetCountry256.fromPartial(object.setCountry)
      : undefined;
    message.setStartDate = (object.setStartDate !== undefined && object.setStartDate !== null)
      ? SetStartDate257.fromPartial(object.setStartDate)
      : undefined;
    message.startRecording = (object.startRecording !== undefined && object.startRecording !== null)
      ? StartRecording258.fromPartial(object.startRecording)
      : undefined;
    message.requestAccessViaCheckIn =
      (object.requestAccessViaCheckIn !== undefined && object.requestAccessViaCheckIn !== null)
        ? RequestAccessViaCheckIn259.fromPartial(object.requestAccessViaCheckIn)
        : undefined;
    message.respondToAccessRequest =
      (object.respondToAccessRequest !== undefined && object.respondToAccessRequest !== null)
        ? RespondToAccessRequest260.fromPartial(object.respondToAccessRequest)
        : undefined;
    message.setAvailability = (object.setAvailability !== undefined && object.setAvailability !== null)
      ? SetAvailability261.fromPartial(object.setAvailability)
      : undefined;
    message.enterWithTeammatesSetOwnLobbyInfo =
      (object.enterWithTeammatesSetOwnLobbyInfo !== undefined && object.enterWithTeammatesSetOwnLobbyInfo !== null)
        ? EnterWithTeammatesSetOwnLobbyInfo262.fromPartial(object.enterWithTeammatesSetOwnLobbyInfo)
        : undefined;
    message.enterWithTeammatesInitiateEnterSpace =
      (object.enterWithTeammatesInitiateEnterSpace !== undefined &&
          object.enterWithTeammatesInitiateEnterSpace !== null)
        ? EnterWithTeammatesInitiateEnterSpace263.fromPartial(object.enterWithTeammatesInitiateEnterSpace)
        : undefined;
    message.respawnAtDesk = (object.respawnAtDesk !== undefined && object.respawnAtDesk !== null)
      ? RespawnAtDesk264.fromPartial(object.respawnAtDesk)
      : undefined;
    message.setDeskFromNextAvailableDesk =
      (object.setDeskFromNextAvailableDesk !== undefined && object.setDeskFromNextAvailableDesk !== null)
        ? SetDeskFromNextAvailableDesk265.fromPartial(object.setDeskFromNextAvailableDesk)
        : undefined;
    message.setSpaceRolePermissionOverride =
      (object.setSpaceRolePermissionOverride !== undefined && object.setSpaceRolePermissionOverride !== null)
        ? SetSpaceRolePermissionOverride266.fromPartial(object.setSpaceRolePermissionOverride)
        : undefined;
    return message;
  },
};

function createBaseClientHeartbeat(): ClientHeartbeat {
  return {};
}

export const ClientHeartbeat = {
  encode(_: ClientHeartbeat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientHeartbeat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientHeartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientHeartbeat {
    return {};
  },

  toJSON(_: ClientHeartbeat): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientHeartbeat>, I>>(base?: I): ClientHeartbeat {
    return ClientHeartbeat.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ClientHeartbeat>, I>>(_: I): ClientHeartbeat {
    const message = createBaseClientHeartbeat();
    return message;
  },
};

function createBaseClientBackupHeartbeat(): ClientBackupHeartbeat {
  return {};
}

export const ClientBackupHeartbeat = {
  encode(_: ClientBackupHeartbeat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClientBackupHeartbeat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientBackupHeartbeat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClientBackupHeartbeat {
    return {};
  },

  toJSON(_: ClientBackupHeartbeat): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientBackupHeartbeat>, I>>(base?: I): ClientBackupHeartbeat {
    return ClientBackupHeartbeat.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ClientBackupHeartbeat>, I>>(_: I): ClientBackupHeartbeat {
    const message = createBaseClientBackupHeartbeat();
    return message;
  },
};

function createBaseUpdateSubscriptions(): UpdateSubscriptions {
  return { subscriptions: {}, mapUpdateIds: {} };
}

export const UpdateSubscriptions = {
  encode(message: UpdateSubscriptions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.subscriptions).forEach(([key, value]) => {
      UpdateSubscriptions_SubscriptionsEntry295.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    Object.entries(message.mapUpdateIds).forEach(([key, value]) => {
      UpdateSubscriptions_MapUpdateIdsEntry296.encode({ key: key as any, value }, writer.uint32(18).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSubscriptions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = UpdateSubscriptions_SubscriptionsEntry295.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.subscriptions[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = UpdateSubscriptions_MapUpdateIdsEntry296.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.mapUpdateIds[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSubscriptions {
    return {
      subscriptions: isObject(object.subscriptions)
        ? Object.entries(object.subscriptions).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      mapUpdateIds: isObject(object.mapUpdateIds)
        ? Object.entries(object.mapUpdateIds).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UpdateSubscriptions): unknown {
    const obj: any = {};
    obj.subscriptions = {};
    if (message.subscriptions) {
      Object.entries(message.subscriptions).forEach(([k, v]) => {
        obj.subscriptions[k] = v;
      });
    }
    obj.mapUpdateIds = {};
    if (message.mapUpdateIds) {
      Object.entries(message.mapUpdateIds).forEach(([k, v]) => {
        obj.mapUpdateIds[k] = Math.round(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSubscriptions>, I>>(base?: I): UpdateSubscriptions {
    return UpdateSubscriptions.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<UpdateSubscriptions>, I>>(object: I): UpdateSubscriptions {
    const message = createBaseUpdateSubscriptions();
    message.subscriptions = Object.entries(object.subscriptions ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Boolean(value);
        }
        return acc;
      },
      {},
    );
    message.mapUpdateIds = Object.entries(object.mapUpdateIds ?? {}).reduce<{ [key: string]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Number(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseUpdateSubscriptions_SubscriptionsEntry(): UpdateSubscriptions_SubscriptionsEntry {
  return { key: "", value: false };
}

export const UpdateSubscriptions_SubscriptionsEntry = {
  encode(message: UpdateSubscriptions_SubscriptionsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value === true) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSubscriptions_SubscriptionsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptions_SubscriptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.value = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSubscriptions_SubscriptionsEntry {
    return {
      key: isSet(object.key) ? String(object.key) : "",
      value: isSet(object.value) ? Boolean(object.value) : false,
    };
  },

  toJSON(message: UpdateSubscriptions_SubscriptionsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSubscriptions_SubscriptionsEntry>, I>>(
    base?: I,
  ): UpdateSubscriptions_SubscriptionsEntry {
    return UpdateSubscriptions_SubscriptionsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<UpdateSubscriptions_SubscriptionsEntry>, I>>(
    object: I,
  ): UpdateSubscriptions_SubscriptionsEntry {
    const message = createBaseUpdateSubscriptions_SubscriptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseUpdateSubscriptions_MapUpdateIdsEntry(): UpdateSubscriptions_MapUpdateIdsEntry {
  return { key: "", value: 0 };
}

export const UpdateSubscriptions_MapUpdateIdsEntry = {
  encode(message: UpdateSubscriptions_MapUpdateIdsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint64(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSubscriptions_MapUpdateIdsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptions_MapUpdateIdsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.value = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSubscriptions_MapUpdateIdsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? Number(object.value) : 0 };
  },

  toJSON(message: UpdateSubscriptions_MapUpdateIdsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = Math.round(message.value));
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSubscriptions_MapUpdateIdsEntry>, I>>(
    base?: I,
  ): UpdateSubscriptions_MapUpdateIdsEntry {
    return UpdateSubscriptions_MapUpdateIdsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<UpdateSubscriptions_MapUpdateIdsEntry>, I>>(
    object: I,
  ): UpdateSubscriptions_MapUpdateIdsEntry {
    const message = createBaseUpdateSubscriptions_MapUpdateIdsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseMove(): Move {
  return { dir: 0, stopped: false, inputId: 0, targetId: undefined };
}

export const Move = {
  encode(message: Move, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.dir !== 0) {
      writer.uint32(8).int32(message.dir);
    }
    if (message.stopped === true) {
      writer.uint32(16).bool(message.stopped);
    }
    if (message.inputId !== 0) {
      writer.uint32(24).uint32(message.inputId);
    }
    if (message.targetId !== undefined) {
      writer.uint32(34).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Move {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.dir = reader.int32() as any;
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.stopped = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.inputId = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Move {
    return {
      dir: isSet(object.dir) ? moveDirectionEnum_ENUMFromJSON273(object.dir) : 0,
      stopped: isSet(object.stopped) ? Boolean(object.stopped) : false,
      inputId: isSet(object.inputId) ? Number(object.inputId) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: Move): unknown {
    const obj: any = {};
    message.dir !== undefined && (obj.dir = moveDirectionEnum_ENUMToJSON274(message.dir));
    message.stopped !== undefined && (obj.stopped = message.stopped);
    message.inputId !== undefined && (obj.inputId = Math.round(message.inputId));
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<Move>, I>>(base?: I): Move {
    return Move.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Move>, I>>(object: I): Move {
    const message = createBaseMove();
    message.dir = object.dir ?? 0;
    message.stopped = object.stopped ?? false;
    message.inputId = object.inputId ?? 0;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseRequestMute(): RequestMute {
  return { target: "", video: false };
}

export const RequestMute = {
  encode(message: RequestMute, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.target !== "") {
      writer.uint32(10).string(message.target);
    }
    if (message.video === true) {
      writer.uint32(16).bool(message.video);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestMute {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestMute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.target = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.video = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestMute {
    return {
      target: isSet(object.target) ? String(object.target) : "",
      video: isSet(object.video) ? Boolean(object.video) : false,
    };
  },

  toJSON(message: RequestMute): unknown {
    const obj: any = {};
    message.target !== undefined && (obj.target = message.target);
    message.video !== undefined && (obj.video = message.video);
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestMute>, I>>(base?: I): RequestMute {
    return RequestMute.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestMute>, I>>(object: I): RequestMute {
    const message = createBaseRequestMute();
    message.target = object.target ?? "";
    message.video = object.video ?? false;
    return message;
  },
};

function createBaseSetAffiliation(): SetAffiliation {
  return { affiliation: "", targetId: undefined };
}

export const SetAffiliation = {
  encode(message: SetAffiliation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.affiliation !== "") {
      writer.uint32(10).string(message.affiliation);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAffiliation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAffiliation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.affiliation = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAffiliation {
    return {
      affiliation: isSet(object.affiliation) ? String(object.affiliation) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetAffiliation): unknown {
    const obj: any = {};
    message.affiliation !== undefined && (obj.affiliation = message.affiliation);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAffiliation>, I>>(base?: I): SetAffiliation {
    return SetAffiliation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetAffiliation>, I>>(object: I): SetAffiliation {
    const message = createBaseSetAffiliation();
    message.affiliation = object.affiliation ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetStatus(): SetStatus {
  return { status: false, targetId: undefined };
}

export const SetStatus = {
  encode(message: SetStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status === true) {
      writer.uint32(8).bool(message.status);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.status = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetStatus {
    return {
      status: isSet(object.status) ? Boolean(object.status) : false,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetStatus): unknown {
    const obj: any = {};
    message.status !== undefined && (obj.status = message.status);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetStatus>, I>>(base?: I): SetStatus {
    return SetStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetStatus>, I>>(object: I): SetStatus {
    const message = createBaseSetStatus();
    message.status = object.status ?? false;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetAvailability(): SetAvailability {
  return { availability: "", endOption: undefined };
}

export const SetAvailability = {
  encode(message: SetAvailability, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.availability !== "") {
      writer.uint32(10).string(message.availability);
    }
    if (message.endOption !== undefined) {
      writer.uint32(18).string(message.endOption);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAvailability {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAvailability();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.availability = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.endOption = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAvailability {
    return {
      availability: isSet(object.availability) ? String(object.availability) : "",
      endOption: isSet(object.endOption) ? String(object.endOption) : undefined,
    };
  },

  toJSON(message: SetAvailability): unknown {
    const obj: any = {};
    message.availability !== undefined && (obj.availability = message.availability);
    message.endOption !== undefined && (obj.endOption = message.endOption);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAvailability>, I>>(base?: I): SetAvailability {
    return SetAvailability.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetAvailability>, I>>(object: I): SetAvailability {
    const message = createBaseSetAvailability();
    message.availability = object.availability ?? "";
    message.endOption = object.endOption ?? undefined;
    return message;
  },
};

function createBaseSetOutfitString(): SetOutfitString {
  return { outfitString: "", targetId: undefined };
}

export const SetOutfitString = {
  encode(message: SetOutfitString, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.outfitString !== "") {
      writer.uint32(10).string(message.outfitString);
    }
    if (message.targetId !== undefined) {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOutfitString {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOutfitString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.outfitString = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetOutfitString {
    return {
      outfitString: isSet(object.outfitString) ? String(object.outfitString) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetOutfitString): unknown {
    const obj: any = {};
    message.outfitString !== undefined && (obj.outfitString = message.outfitString);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetOutfitString>, I>>(base?: I): SetOutfitString {
    return SetOutfitString.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetOutfitString>, I>>(object: I): SetOutfitString {
    const message = createBaseSetOutfitString();
    message.outfitString = object.outfitString ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSpotlight(): Spotlight {
  return { spotlightedUser: "", isSpotlighted: false };
}

export const Spotlight = {
  encode(message: Spotlight, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spotlightedUser !== "") {
      writer.uint32(10).string(message.spotlightedUser);
    }
    if (message.isSpotlighted === true) {
      writer.uint32(16).bool(message.isSpotlighted);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Spotlight {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpotlight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.spotlightedUser = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isSpotlighted = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spotlight {
    return {
      spotlightedUser: isSet(object.spotlightedUser) ? String(object.spotlightedUser) : "",
      isSpotlighted: isSet(object.isSpotlighted) ? Boolean(object.isSpotlighted) : false,
    };
  },

  toJSON(message: Spotlight): unknown {
    const obj: any = {};
    message.spotlightedUser !== undefined && (obj.spotlightedUser = message.spotlightedUser);
    message.isSpotlighted !== undefined && (obj.isSpotlighted = message.isSpotlighted);
    return obj;
  },

  create<I extends Exact<DeepPartial<Spotlight>, I>>(base?: I): Spotlight {
    return Spotlight.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Spotlight>, I>>(object: I): Spotlight {
    const message = createBaseSpotlight();
    message.spotlightedUser = object.spotlightedUser ?? "";
    message.isSpotlighted = object.isSpotlighted ?? false;
    return message;
  },
};

function createBaseRing(): Ring {
  return { user: "" };
}

export const Ring = {
  encode(message: Ring, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Ring {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ring {
    return { user: isSet(object.user) ? String(object.user) : "" };
  },

  toJSON(message: Ring): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user);
    return obj;
  },

  create<I extends Exact<DeepPartial<Ring>, I>>(base?: I): Ring {
    return Ring.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Ring>, I>>(object: I): Ring {
    const message = createBaseRing();
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseSetImagePointer(): SetImagePointer {
  return { objectId: "", x: 0, y: 0 };
}

export const SetImagePointer = {
  encode(message: SetImagePointer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.objectId !== "") {
      writer.uint32(10).string(message.objectId);
    }
    if (message.x !== 0) {
      writer.uint32(17).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(25).double(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetImagePointer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetImagePointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.objectId = reader.string();
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.x = reader.double();
          continue;
        case 3:
          if (tag != 25) {
            break;
          }

          message.y = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetImagePointer {
    return {
      objectId: isSet(object.objectId) ? String(object.objectId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
    };
  },

  toJSON(message: SetImagePointer): unknown {
    const obj: any = {};
    message.objectId !== undefined && (obj.objectId = message.objectId);
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetImagePointer>, I>>(base?: I): SetImagePointer {
    return SetImagePointer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetImagePointer>, I>>(object: I): SetImagePointer {
    const message = createBaseSetImagePointer();
    message.objectId = object.objectId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseSetScreenPointer(): SetScreenPointer {
  return { screenId: "", x: 0, y: 0 };
}

export const SetScreenPointer = {
  encode(message: SetScreenPointer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.screenId !== "") {
      writer.uint32(10).string(message.screenId);
    }
    if (message.x !== 0) {
      writer.uint32(17).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(25).double(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetScreenPointer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetScreenPointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.screenId = reader.string();
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.x = reader.double();
          continue;
        case 3:
          if (tag != 25) {
            break;
          }

          message.y = reader.double();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetScreenPointer {
    return {
      screenId: isSet(object.screenId) ? String(object.screenId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
    };
  },

  toJSON(message: SetScreenPointer): unknown {
    const obj: any = {};
    message.screenId !== undefined && (obj.screenId = message.screenId);
    message.x !== undefined && (obj.x = message.x);
    message.y !== undefined && (obj.y = message.y);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetScreenPointer>, I>>(base?: I): SetScreenPointer {
    return SetScreenPointer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetScreenPointer>, I>>(object: I): SetScreenPointer {
    const message = createBaseSetScreenPointer();
    message.screenId = object.screenId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBaseBan(): Ban {
  return { user: "" };
}

export const Ban = {
  encode(message: Ban, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Ban {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ban {
    return { user: isSet(object.user) ? String(object.user) : "" };
  },

  toJSON(message: Ban): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user);
    return obj;
  },

  create<I extends Exact<DeepPartial<Ban>, I>>(base?: I): Ban {
    return Ban.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Ban>, I>>(object: I): Ban {
    const message = createBaseBan();
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseKick(): Kick {
  return { user: "" };
}

export const Kick = {
  encode(message: Kick, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Kick {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKick();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.user = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Kick {
    return { user: isSet(object.user) ? String(object.user) : "" };
  },

  toJSON(message: Kick): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user);
    return obj;
  },

  create<I extends Exact<DeepPartial<Kick>, I>>(base?: I): Kick {
    return Kick.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Kick>, I>>(object: I): Kick {
    const message = createBaseKick();
    message.user = object.user ?? "";
    return message;
  },
};

function createBaseBlock(): Block {
  return { blockedUserId: "", blocked: false };
}

export const Block = {
  encode(message: Block, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.blockedUserId !== "") {
      writer.uint32(10).string(message.blockedUserId);
    }
    if (message.blocked === true) {
      writer.uint32(16).bool(message.blocked);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Block {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.blockedUserId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.blocked = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Block {
    return {
      blockedUserId: isSet(object.blockedUserId) ? String(object.blockedUserId) : "",
      blocked: isSet(object.blocked) ? Boolean(object.blocked) : false,
    };
  },

  toJSON(message: Block): unknown {
    const obj: any = {};
    message.blockedUserId !== undefined && (obj.blockedUserId = message.blockedUserId);
    message.blocked !== undefined && (obj.blocked = message.blocked);
    return obj;
  },

  create<I extends Exact<DeepPartial<Block>, I>>(base?: I): Block {
    return Block.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Block>, I>>(object: I): Block {
    const message = createBaseBlock();
    message.blockedUserId = object.blockedUserId ?? "";
    message.blocked = object.blocked ?? false;
    return message;
  },
};

function createBaseSetImpassable(): SetImpassable {
  return { mapId: "", x: 0, y: 0, impassable: false };
}

export const SetImpassable = {
  encode(message: SetImpassable, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.x !== 0) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    if (message.impassable === true) {
      writer.uint32(32).bool(message.impassable);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetImpassable {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetImpassable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.impassable = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetImpassable {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      impassable: isSet(object.impassable) ? Boolean(object.impassable) : false,
    };
  },

  toJSON(message: SetImpassable): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.impassable !== undefined && (obj.impassable = message.impassable);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetImpassable>, I>>(base?: I): SetImpassable {
    return SetImpassable.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetImpassable>, I>>(object: I): SetImpassable {
    const message = createBaseSetImpassable();
    message.mapId = object.mapId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.impassable = object.impassable ?? false;
    return message;
  },
};

function createBaseChat(): Chat {
  return { chatRecipient: "", contents: "", localPlayerIds: [], mapId: "", id: undefined, nookId: undefined };
}

export const Chat = {
  encode(message: Chat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.chatRecipient !== "") {
      writer.uint32(10).string(message.chatRecipient);
    }
    if (message.contents !== "") {
      writer.uint32(18).string(message.contents);
    }
    for (const v of message.localPlayerIds) {
      writer.uint32(26).string(v!);
    }
    if (message.mapId !== "") {
      writer.uint32(34).string(message.mapId);
    }
    if (message.id !== undefined) {
      writer.uint32(42).string(message.id);
    }
    if (message.nookId !== undefined) {
      writer.uint32(50).string(message.nookId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Chat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.chatRecipient = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.contents = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.localPlayerIds.push(reader.string());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.id = reader.string();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.nookId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Chat {
    return {
      chatRecipient: isSet(object.chatRecipient) ? String(object.chatRecipient) : "",
      contents: isSet(object.contents) ? String(object.contents) : "",
      localPlayerIds: Array.isArray(object?.localPlayerIds) ? object.localPlayerIds.map((e: any) => String(e)) : [],
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      id: isSet(object.id) ? String(object.id) : undefined,
      nookId: isSet(object.nookId) ? String(object.nookId) : undefined,
    };
  },

  toJSON(message: Chat): unknown {
    const obj: any = {};
    message.chatRecipient !== undefined && (obj.chatRecipient = message.chatRecipient);
    message.contents !== undefined && (obj.contents = message.contents);
    if (message.localPlayerIds) {
      obj.localPlayerIds = message.localPlayerIds.map((e) => e);
    } else {
      obj.localPlayerIds = [];
    }
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.id !== undefined && (obj.id = message.id);
    message.nookId !== undefined && (obj.nookId = message.nookId);
    return obj;
  },

  create<I extends Exact<DeepPartial<Chat>, I>>(base?: I): Chat {
    return Chat.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Chat>, I>>(object: I): Chat {
    const message = createBaseChat();
    message.chatRecipient = object.chatRecipient ?? "";
    message.contents = object.contents ?? "";
    message.localPlayerIds = object.localPlayerIds?.map((e) => e) || [];
    message.mapId = object.mapId ?? "";
    message.id = object.id ?? undefined;
    message.nookId = object.nookId ?? undefined;
    return message;
  },
};

function createBaseNotify(): Notify {
  return { notification: "" };
}

export const Notify = {
  encode(message: Notify, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.notification !== "") {
      writer.uint32(10).string(message.notification);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Notify {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotify();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.notification = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notify {
    return { notification: isSet(object.notification) ? String(object.notification) : "" };
  },

  toJSON(message: Notify): unknown {
    const obj: any = {};
    message.notification !== undefined && (obj.notification = message.notification);
    return obj;
  },

  create<I extends Exact<DeepPartial<Notify>, I>>(base?: I): Notify {
    return Notify.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Notify>, I>>(object: I): Notify {
    const message = createBaseNotify();
    message.notification = object.notification ?? "";
    return message;
  },
};

function createBaseInteract(): Interact {
  return { objId: "", mapId: undefined, dataJson: undefined };
}

export const Interact = {
  encode(message: Interact, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.objId !== "") {
      writer.uint32(10).string(message.objId);
    }
    if (message.mapId !== undefined) {
      writer.uint32(26).string(message.mapId);
    }
    if (message.dataJson !== undefined) {
      writer.uint32(18).string(message.dataJson);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Interact {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInteract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.objId = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.dataJson = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Interact {
    return {
      objId: isSet(object.objId) ? String(object.objId) : "",
      mapId: isSet(object.mapId) ? String(object.mapId) : undefined,
      dataJson: isSet(object.dataJson) ? String(object.dataJson) : undefined,
    };
  },

  toJSON(message: Interact): unknown {
    const obj: any = {};
    message.objId !== undefined && (obj.objId = message.objId);
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.dataJson !== undefined && (obj.dataJson = message.dataJson);
    return obj;
  },

  create<I extends Exact<DeepPartial<Interact>, I>>(base?: I): Interact {
    return Interact.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Interact>, I>>(object: I): Interact {
    const message = createBaseInteract();
    message.objId = object.objId ?? "";
    message.mapId = object.mapId ?? undefined;
    message.dataJson = object.dataJson ?? undefined;
    return message;
  },
};

function createBaseActivelySpeaking(): ActivelySpeaking {
  return { activelySpeaking: false };
}

export const ActivelySpeaking = {
  encode(message: ActivelySpeaking, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.activelySpeaking === true) {
      writer.uint32(8).bool(message.activelySpeaking);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivelySpeaking {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivelySpeaking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.activelySpeaking = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActivelySpeaking {
    return { activelySpeaking: isSet(object.activelySpeaking) ? Boolean(object.activelySpeaking) : false };
  },

  toJSON(message: ActivelySpeaking): unknown {
    const obj: any = {};
    message.activelySpeaking !== undefined && (obj.activelySpeaking = message.activelySpeaking);
    return obj;
  },

  create<I extends Exact<DeepPartial<ActivelySpeaking>, I>>(base?: I): ActivelySpeaking {
    return ActivelySpeaking.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ActivelySpeaking>, I>>(object: I): ActivelySpeaking {
    const message = createBaseActivelySpeaking();
    message.activelySpeaking = object.activelySpeaking ?? false;
    return message;
  },
};

function createBaseEnterWhisper(): EnterWhisper {
  return { recipientId: "", dir: 0 };
}

export const EnterWhisper = {
  encode(message: EnterWhisper, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.recipientId !== "") {
      writer.uint32(10).string(message.recipientId);
    }
    if (message.dir !== 0) {
      writer.uint32(16).int32(message.dir);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterWhisper {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterWhisper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.recipientId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.dir = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnterWhisper {
    return {
      recipientId: isSet(object.recipientId) ? String(object.recipientId) : "",
      dir: isSet(object.dir) ? moveDirectionEnum_ENUMFromJSON273(object.dir) : 0,
    };
  },

  toJSON(message: EnterWhisper): unknown {
    const obj: any = {};
    message.recipientId !== undefined && (obj.recipientId = message.recipientId);
    message.dir !== undefined && (obj.dir = moveDirectionEnum_ENUMToJSON274(message.dir));
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterWhisper>, I>>(base?: I): EnterWhisper {
    return EnterWhisper.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterWhisper>, I>>(object: I): EnterWhisper {
    const message = createBaseEnterWhisper();
    message.recipientId = object.recipientId ?? "";
    message.dir = object.dir ?? 0;
    return message;
  },
};

function createBaseLeaveWhisper(): LeaveWhisper {
  return {};
}

export const LeaveWhisper = {
  encode(_: LeaveWhisper, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LeaveWhisper {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveWhisper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LeaveWhisper {
    return {};
  },

  toJSON(_: LeaveWhisper): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaveWhisper>, I>>(base?: I): LeaveWhisper {
    return LeaveWhisper.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<LeaveWhisper>, I>>(_: I): LeaveWhisper {
    const message = createBaseLeaveWhisper();
    return message;
  },
};

function createBaseGhost(): Ghost {
  return { ghost: 0, targetId: undefined };
}

export const Ghost = {
  encode(message: Ghost, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ghost !== 0) {
      writer.uint32(8).uint32(message.ghost);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Ghost {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGhost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.ghost = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ghost {
    return {
      ghost: isSet(object.ghost) ? Number(object.ghost) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: Ghost): unknown {
    const obj: any = {};
    message.ghost !== undefined && (obj.ghost = Math.round(message.ghost));
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<Ghost>, I>>(base?: I): Ghost {
    return Ghost.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Ghost>, I>>(object: I): Ghost {
    const message = createBaseGhost();
    message.ghost = object.ghost ?? 0;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetEmoteV2(): SetEmoteV2 {
  return { emote: undefined, targetId: undefined, count: undefined };
}

export const SetEmoteV2 = {
  encode(message: SetEmoteV2, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.emote !== undefined) {
      writer.uint32(10).string(message.emote);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    if (message.count !== undefined) {
      writer.uint32(24).uint32(message.count);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetEmoteV2 {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetEmoteV2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.emote = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.count = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetEmoteV2 {
    return {
      emote: isSet(object.emote) ? String(object.emote) : undefined,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
      count: isSet(object.count) ? Number(object.count) : undefined,
    };
  },

  toJSON(message: SetEmoteV2): unknown {
    const obj: any = {};
    message.emote !== undefined && (obj.emote = message.emote);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.count !== undefined && (obj.count = Math.round(message.count));
    return obj;
  },

  create<I extends Exact<DeepPartial<SetEmoteV2>, I>>(base?: I): SetEmoteV2 {
    return SetEmoteV2.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetEmoteV2>, I>>(object: I): SetEmoteV2 {
    const message = createBaseSetEmoteV2();
    message.emote = object.emote ?? undefined;
    message.targetId = object.targetId ?? undefined;
    message.count = object.count ?? undefined;
    return message;
  },
};

function createBaseSetName(): SetName {
  return { name: "", targetId: undefined };
}

export const SetName = {
  encode(message: SetName, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetName {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetName {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetName): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetName>, I>>(base?: I): SetName {
    return SetName.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetName>, I>>(object: I): SetName {
    const message = createBaseSetName();
    message.name = object.name ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetTextStatus(): SetTextStatus {
  return { textStatus: "", targetId: undefined };
}

export const SetTextStatus = {
  encode(message: SetTextStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.textStatus !== "") {
      writer.uint32(10).string(message.textStatus);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTextStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTextStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.textStatus = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTextStatus {
    return {
      textStatus: isSet(object.textStatus) ? String(object.textStatus) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetTextStatus): unknown {
    const obj: any = {};
    message.textStatus !== undefined && (obj.textStatus = message.textStatus);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTextStatus>, I>>(base?: I): SetTextStatus {
    return SetTextStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetTextStatus>, I>>(object: I): SetTextStatus {
    const message = createBaseSetTextStatus();
    message.textStatus = object.textStatus ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetPronouns(): SetPronouns {
  return { pronouns: "", targetId: undefined };
}

export const SetPronouns = {
  encode(message: SetPronouns, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pronouns !== "") {
      writer.uint32(10).string(message.pronouns);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPronouns {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPronouns();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.pronouns = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPronouns {
    return {
      pronouns: isSet(object.pronouns) ? String(object.pronouns) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetPronouns): unknown {
    const obj: any = {};
    message.pronouns !== undefined && (obj.pronouns = message.pronouns);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPronouns>, I>>(base?: I): SetPronouns {
    return SetPronouns.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetPronouns>, I>>(object: I): SetPronouns {
    const message = createBaseSetPronouns();
    message.pronouns = object.pronouns ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetTitle(): SetTitle {
  return { title: "", targetId: undefined };
}

export const SetTitle = {
  encode(message: SetTitle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTitle {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTitle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTitle {
    return {
      title: isSet(object.title) ? String(object.title) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetTitle): unknown {
    const obj: any = {};
    message.title !== undefined && (obj.title = message.title);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTitle>, I>>(base?: I): SetTitle {
    return SetTitle.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetTitle>, I>>(object: I): SetTitle {
    const message = createBaseSetTitle();
    message.title = object.title ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetCity(): SetCity {
  return { city: "", targetId: undefined };
}

export const SetCity = {
  encode(message: SetCity, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.city !== "") {
      writer.uint32(10).string(message.city);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCity {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.city = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCity {
    return {
      city: isSet(object.city) ? String(object.city) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetCity): unknown {
    const obj: any = {};
    message.city !== undefined && (obj.city = message.city);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCity>, I>>(base?: I): SetCity {
    return SetCity.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetCity>, I>>(object: I): SetCity {
    const message = createBaseSetCity();
    message.city = object.city ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetCountry(): SetCountry {
  return { country: "", targetId: undefined };
}

export const SetCountry = {
  encode(message: SetCountry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.country !== "") {
      writer.uint32(10).string(message.country);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCountry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCountry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.country = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCountry {
    return {
      country: isSet(object.country) ? String(object.country) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetCountry): unknown {
    const obj: any = {};
    message.country !== undefined && (obj.country = message.country);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCountry>, I>>(base?: I): SetCountry {
    return SetCountry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetCountry>, I>>(object: I): SetCountry {
    const message = createBaseSetCountry();
    message.country = object.country ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetStartDate(): SetStartDate {
  return { startDate: "", targetId: undefined };
}

export const SetStartDate = {
  encode(message: SetStartDate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.startDate !== "") {
      writer.uint32(10).string(message.startDate);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetStartDate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetStartDate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.startDate = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetStartDate {
    return {
      startDate: isSet(object.startDate) ? String(object.startDate) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetStartDate): unknown {
    const obj: any = {};
    message.startDate !== undefined && (obj.startDate = message.startDate);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetStartDate>, I>>(base?: I): SetStartDate {
    return SetStartDate.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetStartDate>, I>>(object: I): SetStartDate {
    const message = createBaseSetStartDate();
    message.startDate = object.startDate ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetTimezone(): SetTimezone {
  return { timezone: "", targetId: undefined };
}

export const SetTimezone = {
  encode(message: SetTimezone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timezone !== "") {
      writer.uint32(10).string(message.timezone);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTimezone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTimezone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.timezone = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTimezone {
    return {
      timezone: isSet(object.timezone) ? String(object.timezone) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetTimezone): unknown {
    const obj: any = {};
    message.timezone !== undefined && (obj.timezone = message.timezone);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTimezone>, I>>(base?: I): SetTimezone {
    return SetTimezone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetTimezone>, I>>(object: I): SetTimezone {
    const message = createBaseSetTimezone();
    message.timezone = object.timezone ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetPhone(): SetPhone {
  return { phone: "", targetId: undefined };
}

export const SetPhone = {
  encode(message: SetPhone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPhone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPhone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPhone {
    return {
      phone: isSet(object.phone) ? String(object.phone) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetPhone): unknown {
    const obj: any = {};
    message.phone !== undefined && (obj.phone = message.phone);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPhone>, I>>(base?: I): SetPhone {
    return SetPhone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetPhone>, I>>(object: I): SetPhone {
    const message = createBaseSetPhone();
    message.phone = object.phone ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetDescription(): SetDescription {
  return { description: "", targetId: undefined };
}

export const SetDescription = {
  encode(message: SetDescription, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDescription {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDescription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.description = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDescription {
    return {
      description: isSet(object.description) ? String(object.description) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetDescription): unknown {
    const obj: any = {};
    message.description !== undefined && (obj.description = message.description);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDescription>, I>>(base?: I): SetDescription {
    return SetDescription.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetDescription>, I>>(object: I): SetDescription {
    const message = createBaseSetDescription();
    message.description = object.description ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetProfileImageUrl(): SetProfileImageUrl {
  return { profileImageUrl: "", targetId: undefined };
}

export const SetProfileImageUrl = {
  encode(message: SetProfileImageUrl, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.profileImageUrl !== "") {
      writer.uint32(10).string(message.profileImageUrl);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetProfileImageUrl {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetProfileImageUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.profileImageUrl = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetProfileImageUrl {
    return {
      profileImageUrl: isSet(object.profileImageUrl) ? String(object.profileImageUrl) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetProfileImageUrl): unknown {
    const obj: any = {};
    message.profileImageUrl !== undefined && (obj.profileImageUrl = message.profileImageUrl);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetProfileImageUrl>, I>>(base?: I): SetProfileImageUrl {
    return SetProfileImageUrl.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetProfileImageUrl>, I>>(object: I): SetProfileImageUrl {
    const message = createBaseSetProfileImageUrl();
    message.profileImageUrl = object.profileImageUrl ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetPersonalImageUrl(): SetPersonalImageUrl {
  return { personalImageUrl: "", targetId: undefined };
}

export const SetPersonalImageUrl = {
  encode(message: SetPersonalImageUrl, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.personalImageUrl !== "") {
      writer.uint32(10).string(message.personalImageUrl);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPersonalImageUrl {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPersonalImageUrl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.personalImageUrl = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPersonalImageUrl {
    return {
      personalImageUrl: isSet(object.personalImageUrl) ? String(object.personalImageUrl) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetPersonalImageUrl): unknown {
    const obj: any = {};
    message.personalImageUrl !== undefined && (obj.personalImageUrl = message.personalImageUrl);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPersonalImageUrl>, I>>(base?: I): SetPersonalImageUrl {
    return SetPersonalImageUrl.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetPersonalImageUrl>, I>>(object: I): SetPersonalImageUrl {
    const message = createBaseSetPersonalImageUrl();
    message.personalImageUrl = object.personalImageUrl ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseExit(): Exit {
  return {};
}

export const Exit = {
  encode(_: Exit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Exit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Exit {
    return {};
  },

  toJSON(_: Exit): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Exit>, I>>(base?: I): Exit {
    return Exit.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Exit>, I>>(_: I): Exit {
    const message = createBaseExit();
    return message;
  },
};

function createBaseEnter(): Enter {
  return { info: undefined, spawnToken: undefined, targetId: undefined };
}

export const Enter = {
  encode(message: Enter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.info !== undefined) {
      PlayerInitInfo267.encode(message.info, writer.uint32(10).fork()).ldelim();
    }
    if (message.spawnToken !== undefined) {
      writer.uint32(18).string(message.spawnToken);
    }
    if (message.targetId !== undefined) {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Enter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.info = PlayerInitInfo267.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.spawnToken = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Enter {
    return {
      info: isSet(object.info) ? PlayerInitInfo267.fromJSON(object.info) : undefined,
      spawnToken: isSet(object.spawnToken) ? String(object.spawnToken) : undefined,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: Enter): unknown {
    const obj: any = {};
    message.info !== undefined && (obj.info = message.info ? PlayerInitInfo267.toJSON(message.info) : undefined);
    message.spawnToken !== undefined && (obj.spawnToken = message.spawnToken);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<Enter>, I>>(base?: I): Enter {
    return Enter.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Enter>, I>>(object: I): Enter {
    const message = createBaseEnter();
    message.info = (object.info !== undefined && object.info !== null)
      ? PlayerInitInfo267.fromPartial(object.info)
      : undefined;
    message.spawnToken = object.spawnToken ?? undefined;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBasePrecomputeEnter(): PrecomputeEnter {
  return { enterLocation: undefined, spawnToken: undefined };
}

export const PrecomputeEnter = {
  encode(message: PrecomputeEnter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.enterLocation !== undefined) {
      MapLocation170.encode(message.enterLocation, writer.uint32(10).fork()).ldelim();
    }
    if (message.spawnToken !== undefined) {
      writer.uint32(18).string(message.spawnToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PrecomputeEnter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrecomputeEnter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.enterLocation = MapLocation170.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.spawnToken = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrecomputeEnter {
    return {
      enterLocation: isSet(object.enterLocation) ? MapLocation170.fromJSON(object.enterLocation) : undefined,
      spawnToken: isSet(object.spawnToken) ? String(object.spawnToken) : undefined,
    };
  },

  toJSON(message: PrecomputeEnter): unknown {
    const obj: any = {};
    message.enterLocation !== undefined &&
      (obj.enterLocation = message.enterLocation ? MapLocation170.toJSON(message.enterLocation) : undefined);
    message.spawnToken !== undefined && (obj.spawnToken = message.spawnToken);
    return obj;
  },

  create<I extends Exact<DeepPartial<PrecomputeEnter>, I>>(base?: I): PrecomputeEnter {
    return PrecomputeEnter.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PrecomputeEnter>, I>>(object: I): PrecomputeEnter {
    const message = createBasePrecomputeEnter();
    message.enterLocation = (object.enterLocation !== undefined && object.enterLocation !== null)
      ? MapLocation170.fromPartial(object.enterLocation)
      : undefined;
    message.spawnToken = object.spawnToken ?? undefined;
    return message;
  },
};

function createBaseSetEmojiStatus(): SetEmojiStatus {
  return { emojiStatus: "", targetId: undefined };
}

export const SetEmojiStatus = {
  encode(message: SetEmojiStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.emojiStatus !== "") {
      writer.uint32(10).string(message.emojiStatus);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetEmojiStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetEmojiStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.emojiStatus = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetEmojiStatus {
    return {
      emojiStatus: isSet(object.emojiStatus) ? String(object.emojiStatus) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetEmojiStatus): unknown {
    const obj: any = {};
    message.emojiStatus !== undefined && (obj.emojiStatus = message.emojiStatus);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetEmojiStatus>, I>>(base?: I): SetEmojiStatus {
    return SetEmojiStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetEmojiStatus>, I>>(object: I): SetEmojiStatus {
    const message = createBaseSetEmojiStatus();
    message.emojiStatus = object.emojiStatus ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseTeleport(): Teleport {
  return { mapId: "", x: 0, y: 0, targetId: undefined, direction: undefined };
}

export const Teleport = {
  encode(message: Teleport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.x !== 0) {
      writer.uint32(16).uint32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(24).uint32(message.y);
    }
    if (message.targetId !== undefined) {
      writer.uint32(34).string(message.targetId);
    }
    if (message.direction !== undefined) {
      writer.uint32(40).int32(message.direction);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Teleport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTeleport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.x = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.y = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Teleport {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      x: isSet(object.x) ? Number(object.x) : 0,
      y: isSet(object.y) ? Number(object.y) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
      direction: isSet(object.direction) ? spriteDirectionEnum_ENUMFromJSON271(object.direction) : undefined,
    };
  },

  toJSON(message: Teleport): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.x !== undefined && (obj.x = Math.round(message.x));
    message.y !== undefined && (obj.y = Math.round(message.y));
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.direction !== undefined && (obj.direction = message.direction !== undefined
      ? spriteDirectionEnum_ENUMToJSON272(message.direction)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<Teleport>, I>>(base?: I): Teleport {
    return Teleport.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Teleport>, I>>(object: I): Teleport {
    const message = createBaseTeleport();
    message.mapId = object.mapId ?? "";
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.targetId = object.targetId ?? undefined;
    message.direction = object.direction ?? undefined;
    return message;
  },
};

function createBaseSetWorkCondition(): SetWorkCondition {
  return { workCondition: false, targetId: undefined };
}

export const SetWorkCondition = {
  encode(message: SetWorkCondition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.workCondition === true) {
      writer.uint32(8).bool(message.workCondition);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetWorkCondition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetWorkCondition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.workCondition = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetWorkCondition {
    return {
      workCondition: isSet(object.workCondition) ? Boolean(object.workCondition) : false,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetWorkCondition): unknown {
    const obj: any = {};
    message.workCondition !== undefined && (obj.workCondition = message.workCondition);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetWorkCondition>, I>>(base?: I): SetWorkCondition {
    return SetWorkCondition.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetWorkCondition>, I>>(object: I): SetWorkCondition {
    const message = createBaseSetWorkCondition();
    message.workCondition = object.workCondition ?? false;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSpawn(): Spawn {
  return { spawnToken: "" };
}

export const Spawn = {
  encode(message: Spawn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spawnToken !== "") {
      writer.uint32(10).string(message.spawnToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Spawn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpawn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.spawnToken = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Spawn {
    return { spawnToken: isSet(object.spawnToken) ? String(object.spawnToken) : "" };
  },

  toJSON(message: Spawn): unknown {
    const obj: any = {};
    message.spawnToken !== undefined && (obj.spawnToken = message.spawnToken);
    return obj;
  },

  create<I extends Exact<DeepPartial<Spawn>, I>>(base?: I): Spawn {
    return Spawn.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Spawn>, I>>(object: I): Spawn {
    const message = createBaseSpawn();
    message.spawnToken = object.spawnToken ?? "";
    return message;
  },
};

function createBaseRespawn(): Respawn {
  return {};
}

export const Respawn = {
  encode(_: Respawn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Respawn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespawn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Respawn {
    return {};
  },

  toJSON(_: Respawn): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Respawn>, I>>(base?: I): Respawn {
    return Respawn.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Respawn>, I>>(_: I): Respawn {
    const message = createBaseRespawn();
    return message;
  },
};

function createBaseRespawnAtDesk(): RespawnAtDesk {
  return {};
}

export const RespawnAtDesk = {
  encode(_: RespawnAtDesk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RespawnAtDesk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespawnAtDesk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RespawnAtDesk {
    return {};
  },

  toJSON(_: RespawnAtDesk): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RespawnAtDesk>, I>>(base?: I): RespawnAtDesk {
    return RespawnAtDesk.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RespawnAtDesk>, I>>(_: I): RespawnAtDesk {
    const message = createBaseRespawnAtDesk();
    return message;
  },
};

function createBaseRequestToJoinNook(): RequestToJoinNook {
  return { nookId: "", mapId: "", name: undefined };
}

export const RequestToJoinNook = {
  encode(message: RequestToJoinNook, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.nookId !== "") {
      writer.uint32(10).string(message.nookId);
    }
    if (message.mapId !== "") {
      writer.uint32(18).string(message.mapId);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestToJoinNook {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestToJoinNook();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.nookId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestToJoinNook {
    return {
      nookId: isSet(object.nookId) ? String(object.nookId) : "",
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      name: isSet(object.name) ? String(object.name) : undefined,
    };
  },

  toJSON(message: RequestToJoinNook): unknown {
    const obj: any = {};
    message.nookId !== undefined && (obj.nookId = message.nookId);
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestToJoinNook>, I>>(base?: I): RequestToJoinNook {
    return RequestToJoinNook.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestToJoinNook>, I>>(object: I): RequestToJoinNook {
    const message = createBaseRequestToJoinNook();
    message.nookId = object.nookId ?? "";
    message.mapId = object.mapId ?? "";
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseUpdateNookPermission(): UpdateNookPermission {
  return { playerId: "", nookId: "", granted: false };
}

export const UpdateNookPermission = {
  encode(message: UpdateNookPermission, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.nookId !== "") {
      writer.uint32(18).string(message.nookId);
    }
    if (message.granted === true) {
      writer.uint32(24).bool(message.granted);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateNookPermission {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNookPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.nookId = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.granted = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNookPermission {
    return {
      playerId: isSet(object.playerId) ? String(object.playerId) : "",
      nookId: isSet(object.nookId) ? String(object.nookId) : "",
      granted: isSet(object.granted) ? Boolean(object.granted) : false,
    };
  },

  toJSON(message: UpdateNookPermission): unknown {
    const obj: any = {};
    message.playerId !== undefined && (obj.playerId = message.playerId);
    message.nookId !== undefined && (obj.nookId = message.nookId);
    message.granted !== undefined && (obj.granted = message.granted);
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateNookPermission>, I>>(base?: I): UpdateNookPermission {
    return UpdateNookPermission.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<UpdateNookPermission>, I>>(object: I): UpdateNookPermission {
    const message = createBaseUpdateNookPermission();
    message.playerId = object.playerId ?? "";
    message.nookId = object.nookId ?? "";
    message.granted = object.granted ?? false;
    return message;
  },
};

function createBaseInit(): Init {
  return { spaceId: "", token: undefined, apiKey: undefined };
}

export const Init = {
  encode(message: Init, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.spaceId !== "") {
      writer.uint32(10).string(message.spaceId);
    }
    if (message.token !== undefined) {
      writer.uint32(18).string(message.token);
    }
    if (message.apiKey !== undefined) {
      writer.uint32(26).string(message.apiKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Init {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.spaceId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.apiKey = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Init {
    return {
      spaceId: isSet(object.spaceId) ? String(object.spaceId) : "",
      token: isSet(object.token) ? String(object.token) : undefined,
      apiKey: isSet(object.apiKey) ? String(object.apiKey) : undefined,
    };
  },

  toJSON(message: Init): unknown {
    const obj: any = {};
    message.spaceId !== undefined && (obj.spaceId = message.spaceId);
    message.token !== undefined && (obj.token = message.token);
    message.apiKey !== undefined && (obj.apiKey = message.apiKey);
    return obj;
  },

  create<I extends Exact<DeepPartial<Init>, I>>(base?: I): Init {
    return Init.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Init>, I>>(object: I): Init {
    const message = createBaseInit();
    message.spaceId = object.spaceId ?? "";
    message.token = object.token ?? undefined;
    message.apiKey = object.apiKey ?? undefined;
    return message;
  },
};

function createBaseMapAddObject(): MapAddObject {
  return { mapId: "", object: undefined, objectIdToPrependTo: undefined };
}

export const MapAddObject = {
  encode(message: MapAddObject, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.object !== undefined) {
      WireObject10.encode(message.object, writer.uint32(18).fork()).ldelim();
    }
    if (message.objectIdToPrependTo !== undefined) {
      writer.uint32(26).string(message.objectIdToPrependTo);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapAddObject {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapAddObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.object = WireObject10.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.objectIdToPrependTo = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapAddObject {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      object: isSet(object.object) ? WireObject10.fromJSON(object.object) : undefined,
      objectIdToPrependTo: isSet(object.objectIdToPrependTo) ? String(object.objectIdToPrependTo) : undefined,
    };
  },

  toJSON(message: MapAddObject): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.object !== undefined && (obj.object = message.object ? WireObject10.toJSON(message.object) : undefined);
    message.objectIdToPrependTo !== undefined && (obj.objectIdToPrependTo = message.objectIdToPrependTo);
    return obj;
  },

  create<I extends Exact<DeepPartial<MapAddObject>, I>>(base?: I): MapAddObject {
    return MapAddObject.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapAddObject>, I>>(object: I): MapAddObject {
    const message = createBaseMapAddObject();
    message.mapId = object.mapId ?? "";
    message.object = (object.object !== undefined && object.object !== null)
      ? WireObject10.fromPartial(object.object)
      : undefined;
    message.objectIdToPrependTo = object.objectIdToPrependTo ?? undefined;
    return message;
  },
};

function createBaseShootConfetti(): ShootConfetti {
  return { targetId: undefined };
}

export const ShootConfetti = {
  encode(message: ShootConfetti, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetId !== undefined) {
      writer.uint32(10).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ShootConfetti {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShootConfetti();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShootConfetti {
    return { targetId: isSet(object.targetId) ? String(object.targetId) : undefined };
  },

  toJSON(message: ShootConfetti): unknown {
    const obj: any = {};
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<ShootConfetti>, I>>(base?: I): ShootConfetti {
    return ShootConfetti.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ShootConfetti>, I>>(object: I): ShootConfetti {
    const message = createBaseShootConfetti();
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetEventStatus(): SetEventStatus {
  return { eventStatus: "", targetId: undefined };
}

export const SetEventStatus = {
  encode(message: SetEventStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.eventStatus !== "") {
      writer.uint32(10).string(message.eventStatus);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetEventStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetEventStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.eventStatus = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetEventStatus {
    return {
      eventStatus: isSet(object.eventStatus) ? String(object.eventStatus) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetEventStatus): unknown {
    const obj: any = {};
    message.eventStatus !== undefined && (obj.eventStatus = message.eventStatus);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetEventStatus>, I>>(base?: I): SetEventStatus {
    return SetEventStatus.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetEventStatus>, I>>(object: I): SetEventStatus {
    const message = createBaseSetEventStatus();
    message.eventStatus = object.eventStatus ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetInConversation(): SetInConversation {
  return { inConversation: false, targetId: undefined };
}

export const SetInConversation = {
  encode(message: SetInConversation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.inConversation === true) {
      writer.uint32(8).bool(message.inConversation);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetInConversation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetInConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.inConversation = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetInConversation {
    return {
      inConversation: isSet(object.inConversation) ? Boolean(object.inConversation) : false,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetInConversation): unknown {
    const obj: any = {};
    message.inConversation !== undefined && (obj.inConversation = message.inConversation);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetInConversation>, I>>(base?: I): SetInConversation {
    return SetInConversation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetInConversation>, I>>(object: I): SetInConversation {
    const message = createBaseSetInConversation();
    message.inConversation = object.inConversation ?? false;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetCurrentDesk(): SetCurrentDesk {
  return { currentDesk: "", targetId: undefined };
}

export const SetCurrentDesk = {
  encode(message: SetCurrentDesk, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentDesk !== "") {
      writer.uint32(10).string(message.currentDesk);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCurrentDesk {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCurrentDesk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.currentDesk = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCurrentDesk {
    return {
      currentDesk: isSet(object.currentDesk) ? String(object.currentDesk) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetCurrentDesk): unknown {
    const obj: any = {};
    message.currentDesk !== undefined && (obj.currentDesk = message.currentDesk);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCurrentDesk>, I>>(base?: I): SetCurrentDesk {
    return SetCurrentDesk.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetCurrentDesk>, I>>(object: I): SetCurrentDesk {
    const message = createBaseSetCurrentDesk();
    message.currentDesk = object.currentDesk ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetCurrentArea(): SetCurrentArea {
  return { currentArea: "", targetId: undefined };
}

export const SetCurrentArea = {
  encode(message: SetCurrentArea, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.currentArea !== "") {
      writer.uint32(10).string(message.currentArea);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCurrentArea {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCurrentArea();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.currentArea = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetCurrentArea {
    return {
      currentArea: isSet(object.currentArea) ? String(object.currentArea) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetCurrentArea): unknown {
    const obj: any = {};
    message.currentArea !== undefined && (obj.currentArea = message.currentArea);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetCurrentArea>, I>>(base?: I): SetCurrentArea {
    return SetCurrentArea.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetCurrentArea>, I>>(object: I): SetCurrentArea {
    const message = createBaseSetCurrentArea();
    message.currentArea = object.currentArea ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetGoKartId(): SetGoKartId {
  return { goKartId: "", targetId: undefined };
}

export const SetGoKartId = {
  encode(message: SetGoKartId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.goKartId !== "") {
      writer.uint32(10).string(message.goKartId);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetGoKartId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetGoKartId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.goKartId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetGoKartId {
    return {
      goKartId: isSet(object.goKartId) ? String(object.goKartId) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetGoKartId): unknown {
    const obj: any = {};
    message.goKartId !== undefined && (obj.goKartId = message.goKartId);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetGoKartId>, I>>(base?: I): SetGoKartId {
    return SetGoKartId.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetGoKartId>, I>>(object: I): SetGoKartId {
    const message = createBaseSetGoKartId();
    message.goKartId = object.goKartId ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetVehicleId(): SetVehicleId {
  return { vehicleId: "", targetId: undefined, action: undefined };
}

export const SetVehicleId = {
  encode(message: SetVehicleId, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.vehicleId !== "") {
      writer.uint32(10).string(message.vehicleId);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    if (message.action !== undefined) {
      writer.uint32(26).string(message.action);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetVehicleId {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetVehicleId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.vehicleId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.action = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetVehicleId {
    return {
      vehicleId: isSet(object.vehicleId) ? String(object.vehicleId) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
      action: isSet(object.action) ? String(object.action) : undefined,
    };
  },

  toJSON(message: SetVehicleId): unknown {
    const obj: any = {};
    message.vehicleId !== undefined && (obj.vehicleId = message.vehicleId);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.action !== undefined && (obj.action = message.action);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetVehicleId>, I>>(base?: I): SetVehicleId {
    return SetVehicleId.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetVehicleId>, I>>(object: I): SetVehicleId {
    const message = createBaseSetVehicleId();
    message.vehicleId = object.vehicleId ?? "";
    message.targetId = object.targetId ?? undefined;
    message.action = object.action ?? undefined;
    return message;
  },
};

function createBaseSetSpeedModifier(): SetSpeedModifier {
  return { speedModifier: 0, targetId: undefined };
}

export const SetSpeedModifier = {
  encode(message: SetSpeedModifier, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.speedModifier !== 0) {
      writer.uint32(13).float(message.speedModifier);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSpeedModifier {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSpeedModifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 13) {
            break;
          }

          message.speedModifier = reader.float();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSpeedModifier {
    return {
      speedModifier: isSet(object.speedModifier) ? Number(object.speedModifier) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetSpeedModifier): unknown {
    const obj: any = {};
    message.speedModifier !== undefined && (obj.speedModifier = message.speedModifier);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSpeedModifier>, I>>(base?: I): SetSpeedModifier {
    return SetSpeedModifier.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetSpeedModifier>, I>>(object: I): SetSpeedModifier {
    const message = createBaseSetSpeedModifier();
    message.speedModifier = object.speedModifier ?? 0;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetIsAlone(): SetIsAlone {
  return { isAlone: false, targetId: undefined };
}

export const SetIsAlone = {
  encode(message: SetIsAlone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isAlone === true) {
      writer.uint32(8).bool(message.isAlone);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetIsAlone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetIsAlone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.isAlone = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetIsAlone {
    return {
      isAlone: isSet(object.isAlone) ? Boolean(object.isAlone) : false,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetIsAlone): unknown {
    const obj: any = {};
    message.isAlone !== undefined && (obj.isAlone = message.isAlone);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetIsAlone>, I>>(base?: I): SetIsAlone {
    return SetIsAlone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetIsAlone>, I>>(object: I): SetIsAlone {
    const message = createBaseSetIsAlone();
    message.isAlone = object.isAlone ?? false;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetIsMobile(): SetIsMobile {
  return { isMobile: false };
}

export const SetIsMobile = {
  encode(message: SetIsMobile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isMobile === true) {
      writer.uint32(8).bool(message.isMobile);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetIsMobile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetIsMobile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.isMobile = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetIsMobile {
    return { isMobile: isSet(object.isMobile) ? Boolean(object.isMobile) : false };
  },

  toJSON(message: SetIsMobile): unknown {
    const obj: any = {};
    message.isMobile !== undefined && (obj.isMobile = message.isMobile);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetIsMobile>, I>>(base?: I): SetIsMobile {
    return SetIsMobile.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetIsMobile>, I>>(object: I): SetIsMobile {
    const message = createBaseSetIsMobile();
    message.isMobile = object.isMobile ?? false;
    return message;
  },
};

function createBasePlaySound(): PlaySound {
  return { src: "", volume: 0, targetId: undefined };
}

export const PlaySound = {
  encode(message: PlaySound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.volume !== 0) {
      writer.uint32(21).float(message.volume);
    }
    if (message.targetId !== undefined) {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlaySound {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaySound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 2:
          if (tag != 21) {
            break;
          }

          message.volume = reader.float();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaySound {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      volume: isSet(object.volume) ? Number(object.volume) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: PlaySound): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.volume !== undefined && (obj.volume = message.volume);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaySound>, I>>(base?: I): PlaySound {
    return PlaySound.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlaySound>, I>>(object: I): PlaySound {
    const message = createBasePlaySound();
    message.src = object.src ?? "";
    message.volume = object.volume ?? 0;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseStopSound(): StopSound {
  return { src: "", targetId: undefined };
}

export const StopSound = {
  encode(message: StopSound, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.src !== "") {
      writer.uint32(10).string(message.src);
    }
    if (message.targetId !== undefined) {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StopSound {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopSound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.src = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopSound {
    return {
      src: isSet(object.src) ? String(object.src) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: StopSound): unknown {
    const obj: any = {};
    message.src !== undefined && (obj.src = message.src);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<StopSound>, I>>(base?: I): StopSound {
    return StopSound.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<StopSound>, I>>(object: I): StopSound {
    const message = createBaseStopSound();
    message.src = object.src ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetFocusModeEndTime(): SetFocusModeEndTime {
  return { focusModeEndTime: "", targetId: undefined };
}

export const SetFocusModeEndTime = {
  encode(message: SetFocusModeEndTime, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.focusModeEndTime !== "") {
      writer.uint32(10).string(message.focusModeEndTime);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetFocusModeEndTime {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFocusModeEndTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.focusModeEndTime = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFocusModeEndTime {
    return {
      focusModeEndTime: isSet(object.focusModeEndTime) ? String(object.focusModeEndTime) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetFocusModeEndTime): unknown {
    const obj: any = {};
    message.focusModeEndTime !== undefined && (obj.focusModeEndTime = message.focusModeEndTime);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetFocusModeEndTime>, I>>(base?: I): SetFocusModeEndTime {
    return SetFocusModeEndTime.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetFocusModeEndTime>, I>>(object: I): SetFocusModeEndTime {
    const message = createBaseSetFocusModeEndTime();
    message.focusModeEndTime = object.focusModeEndTime ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetItemString(): SetItemString {
  return { itemString: "", targetId: undefined };
}

export const SetItemString = {
  encode(message: SetItemString, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.itemString !== "") {
      writer.uint32(10).string(message.itemString);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetItemString {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetItemString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.itemString = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetItemString {
    return {
      itemString: isSet(object.itemString) ? String(object.itemString) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetItemString): unknown {
    const obj: any = {};
    message.itemString !== undefined && (obj.itemString = message.itemString);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetItemString>, I>>(base?: I): SetItemString {
    return SetItemString.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetItemString>, I>>(object: I): SetItemString {
    const message = createBaseSetItemString();
    message.itemString = object.itemString ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseTriggerItem(): TriggerItem {
  return { closestObject: undefined, closestObjectTemplate: undefined };
}

export const TriggerItem = {
  encode(message: TriggerItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.closestObject !== undefined) {
      writer.uint32(10).string(message.closestObject);
    }
    if (message.closestObjectTemplate !== undefined) {
      writer.uint32(26).string(message.closestObjectTemplate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.closestObject = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.closestObjectTemplate = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerItem {
    return {
      closestObject: isSet(object.closestObject) ? String(object.closestObject) : undefined,
      closestObjectTemplate: isSet(object.closestObjectTemplate) ? String(object.closestObjectTemplate) : undefined,
    };
  },

  toJSON(message: TriggerItem): unknown {
    const obj: any = {};
    message.closestObject !== undefined && (obj.closestObject = message.closestObject);
    message.closestObjectTemplate !== undefined && (obj.closestObjectTemplate = message.closestObjectTemplate);
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerItem>, I>>(base?: I): TriggerItem {
    return TriggerItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<TriggerItem>, I>>(object: I): TriggerItem {
    const message = createBaseTriggerItem();
    message.closestObject = object.closestObject ?? undefined;
    message.closestObjectTemplate = object.closestObjectTemplate ?? undefined;
    return message;
  },
};

function createBaseCustomAction(): CustomAction {
  return { name: "", payload: "", recipients: [], sendToAll: undefined };
}

export const CustomAction = {
  encode(message: CustomAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.payload !== "") {
      writer.uint32(18).string(message.payload);
    }
    for (const v of message.recipients) {
      writer.uint32(26).string(v!);
    }
    if (message.sendToAll !== undefined) {
      writer.uint32(32).bool(message.sendToAll);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CustomAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.payload = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.recipients.push(reader.string());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.sendToAll = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomAction {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      payload: isSet(object.payload) ? String(object.payload) : "",
      recipients: Array.isArray(object?.recipients) ? object.recipients.map((e: any) => String(e)) : [],
      sendToAll: isSet(object.sendToAll) ? Boolean(object.sendToAll) : undefined,
    };
  },

  toJSON(message: CustomAction): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.payload !== undefined && (obj.payload = message.payload);
    if (message.recipients) {
      obj.recipients = message.recipients.map((e) => e);
    } else {
      obj.recipients = [];
    }
    message.sendToAll !== undefined && (obj.sendToAll = message.sendToAll);
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomAction>, I>>(base?: I): CustomAction {
    return CustomAction.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CustomAction>, I>>(object: I): CustomAction {
    const message = createBaseCustomAction();
    message.name = object.name ?? "";
    message.payload = object.payload ?? "";
    message.recipients = object.recipients?.map((e) => e) || [];
    message.sendToAll = object.sendToAll ?? undefined;
    return message;
  },
};

function createBaseSetFollowTarget(): SetFollowTarget {
  return { followTarget: "", targetId: undefined };
}

export const SetFollowTarget = {
  encode(message: SetFollowTarget, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.followTarget !== "") {
      writer.uint32(10).string(message.followTarget);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetFollowTarget {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetFollowTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.followTarget = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetFollowTarget {
    return {
      followTarget: isSet(object.followTarget) ? String(object.followTarget) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetFollowTarget): unknown {
    const obj: any = {};
    message.followTarget !== undefined && (obj.followTarget = message.followTarget);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetFollowTarget>, I>>(base?: I): SetFollowTarget {
    return SetFollowTarget.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetFollowTarget>, I>>(object: I): SetFollowTarget {
    const message = createBaseSetFollowTarget();
    message.followTarget = object.followTarget ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseRequestToLead(): RequestToLead {
  return { target: "", snapshot: "" };
}

export const RequestToLead = {
  encode(message: RequestToLead, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.target !== "") {
      writer.uint32(10).string(message.target);
    }
    if (message.snapshot !== "") {
      writer.uint32(18).string(message.snapshot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestToLead {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestToLead();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.target = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.snapshot = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestToLead {
    return {
      target: isSet(object.target) ? String(object.target) : "",
      snapshot: isSet(object.snapshot) ? String(object.snapshot) : "",
    };
  },

  toJSON(message: RequestToLead): unknown {
    const obj: any = {};
    message.target !== undefined && (obj.target = message.target);
    message.snapshot !== undefined && (obj.snapshot = message.snapshot);
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestToLead>, I>>(base?: I): RequestToLead {
    return RequestToLead.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestToLead>, I>>(object: I): RequestToLead {
    const message = createBaseRequestToLead();
    message.target = object.target ?? "";
    message.snapshot = object.snapshot ?? "";
    return message;
  },
};

function createBaseEnterPortal(): EnterPortal {
  return { targetUrl: "", bypassPrompt: undefined, targetId: undefined };
}

export const EnterPortal = {
  encode(message: EnterPortal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetUrl !== "") {
      writer.uint32(10).string(message.targetUrl);
    }
    if (message.bypassPrompt !== undefined) {
      writer.uint32(16).bool(message.bypassPrompt);
    }
    if (message.targetId !== undefined) {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EnterPortal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnterPortal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.targetUrl = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.bypassPrompt = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnterPortal {
    return {
      targetUrl: isSet(object.targetUrl) ? String(object.targetUrl) : "",
      bypassPrompt: isSet(object.bypassPrompt) ? Boolean(object.bypassPrompt) : undefined,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: EnterPortal): unknown {
    const obj: any = {};
    message.targetUrl !== undefined && (obj.targetUrl = message.targetUrl);
    message.bypassPrompt !== undefined && (obj.bypassPrompt = message.bypassPrompt);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<EnterPortal>, I>>(base?: I): EnterPortal {
    return EnterPortal.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<EnterPortal>, I>>(object: I): EnterPortal {
    const message = createBaseEnterPortal();
    message.targetUrl = object.targetUrl ?? "";
    message.bypassPrompt = object.bypassPrompt ?? undefined;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetManualVideoSrc(): SetManualVideoSrc {
  return { manualVideoSrc: "", targetId: undefined };
}

export const SetManualVideoSrc = {
  encode(message: SetManualVideoSrc, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.manualVideoSrc !== "") {
      writer.uint32(10).string(message.manualVideoSrc);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetManualVideoSrc {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetManualVideoSrc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.manualVideoSrc = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetManualVideoSrc {
    return {
      manualVideoSrc: isSet(object.manualVideoSrc) ? String(object.manualVideoSrc) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetManualVideoSrc): unknown {
    const obj: any = {};
    message.manualVideoSrc !== undefined && (obj.manualVideoSrc = message.manualVideoSrc);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetManualVideoSrc>, I>>(base?: I): SetManualVideoSrc {
    return SetManualVideoSrc.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetManualVideoSrc>, I>>(object: I): SetManualVideoSrc {
    const message = createBaseSetManualVideoSrc();
    message.manualVideoSrc = object.manualVideoSrc ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseSetSubtitle(): SetSubtitle {
  return { subtitle: "", targetId: undefined };
}

export const SetSubtitle = {
  encode(message: SetSubtitle, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.subtitle !== "") {
      writer.uint32(10).string(message.subtitle);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSubtitle {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSubtitle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSubtitle {
    return {
      subtitle: isSet(object.subtitle) ? String(object.subtitle) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetSubtitle): unknown {
    const obj: any = {};
    message.subtitle !== undefined && (obj.subtitle = message.subtitle);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSubtitle>, I>>(base?: I): SetSubtitle {
    return SetSubtitle.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetSubtitle>, I>>(object: I): SetSubtitle {
    const message = createBaseSetSubtitle();
    message.subtitle = object.subtitle ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseMapCommitsChanges(): MapCommitsChanges {
  return { mapId: "", updateId: 0 };
}

export const MapCommitsChanges = {
  encode(message: MapCommitsChanges, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mapId !== "") {
      writer.uint32(10).string(message.mapId);
    }
    if (message.updateId !== 0) {
      writer.uint32(16).uint64(message.updateId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MapCommitsChanges {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMapCommitsChanges();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.mapId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.updateId = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MapCommitsChanges {
    return {
      mapId: isSet(object.mapId) ? String(object.mapId) : "",
      updateId: isSet(object.updateId) ? Number(object.updateId) : 0,
    };
  },

  toJSON(message: MapCommitsChanges): unknown {
    const obj: any = {};
    message.mapId !== undefined && (obj.mapId = message.mapId);
    message.updateId !== undefined && (obj.updateId = Math.round(message.updateId));
    return obj;
  },

  create<I extends Exact<DeepPartial<MapCommitsChanges>, I>>(base?: I): MapCommitsChanges {
    return MapCommitsChanges.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MapCommitsChanges>, I>>(object: I): MapCommitsChanges {
    const message = createBaseMapCommitsChanges();
    message.mapId = object.mapId ?? "";
    message.updateId = object.updateId ?? 0;
    return message;
  },
};

function createBasePlayerUpdatesSession(): PlayerUpdatesSession {
  return {
    roomChecked: undefined,
    chatChecked: undefined,
    qaChecked: undefined,
    approveQuestionsChecked: undefined,
    roomId: "",
  };
}

export const PlayerUpdatesSession = {
  encode(message: PlayerUpdatesSession, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.roomChecked !== undefined) {
      writer.uint32(8).bool(message.roomChecked);
    }
    if (message.chatChecked !== undefined) {
      writer.uint32(16).bool(message.chatChecked);
    }
    if (message.qaChecked !== undefined) {
      writer.uint32(24).bool(message.qaChecked);
    }
    if (message.approveQuestionsChecked !== undefined) {
      writer.uint32(32).bool(message.approveQuestionsChecked);
    }
    if (message.roomId !== "") {
      writer.uint32(42).string(message.roomId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PlayerUpdatesSession {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerUpdatesSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.roomChecked = reader.bool();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.chatChecked = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.qaChecked = reader.bool();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.approveQuestionsChecked = reader.bool();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.roomId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerUpdatesSession {
    return {
      roomChecked: isSet(object.roomChecked) ? Boolean(object.roomChecked) : undefined,
      chatChecked: isSet(object.chatChecked) ? Boolean(object.chatChecked) : undefined,
      qaChecked: isSet(object.qaChecked) ? Boolean(object.qaChecked) : undefined,
      approveQuestionsChecked: isSet(object.approveQuestionsChecked)
        ? Boolean(object.approveQuestionsChecked)
        : undefined,
      roomId: isSet(object.roomId) ? String(object.roomId) : "",
    };
  },

  toJSON(message: PlayerUpdatesSession): unknown {
    const obj: any = {};
    message.roomChecked !== undefined && (obj.roomChecked = message.roomChecked);
    message.chatChecked !== undefined && (obj.chatChecked = message.chatChecked);
    message.qaChecked !== undefined && (obj.qaChecked = message.qaChecked);
    message.approveQuestionsChecked !== undefined && (obj.approveQuestionsChecked = message.approveQuestionsChecked);
    message.roomId !== undefined && (obj.roomId = message.roomId);
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerUpdatesSession>, I>>(base?: I): PlayerUpdatesSession {
    return PlayerUpdatesSession.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PlayerUpdatesSession>, I>>(object: I): PlayerUpdatesSession {
    const message = createBasePlayerUpdatesSession();
    message.roomChecked = object.roomChecked ?? undefined;
    message.chatChecked = object.chatChecked ?? undefined;
    message.qaChecked = object.qaChecked ?? undefined;
    message.approveQuestionsChecked = object.approveQuestionsChecked ?? undefined;
    message.roomId = object.roomId ?? "";
    return message;
  },
};

function createBaseSpeakerUpdatesSession(): SpeakerUpdatesSession {
  return {
    sessionId: "",
    customizeRoomEnabled: undefined,
    chatEnabled: undefined,
    qaEnabled: undefined,
    approveQuestionsEnabled: undefined,
    massMuteEnabled: undefined,
  };
}

export const SpeakerUpdatesSession = {
  encode(message: SpeakerUpdatesSession, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sessionId !== "") {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.customizeRoomEnabled !== undefined) {
      writer.uint32(16).bool(message.customizeRoomEnabled);
    }
    if (message.chatEnabled !== undefined) {
      writer.uint32(24).bool(message.chatEnabled);
    }
    if (message.qaEnabled !== undefined) {
      writer.uint32(32).bool(message.qaEnabled);
    }
    if (message.approveQuestionsEnabled !== undefined) {
      writer.uint32(40).bool(message.approveQuestionsEnabled);
    }
    if (message.massMuteEnabled !== undefined) {
      writer.uint32(48).bool(message.massMuteEnabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SpeakerUpdatesSession {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeakerUpdatesSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.customizeRoomEnabled = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.chatEnabled = reader.bool();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.qaEnabled = reader.bool();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }

          message.approveQuestionsEnabled = reader.bool();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }

          message.massMuteEnabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeakerUpdatesSession {
    return {
      sessionId: isSet(object.sessionId) ? String(object.sessionId) : "",
      customizeRoomEnabled: isSet(object.customizeRoomEnabled) ? Boolean(object.customizeRoomEnabled) : undefined,
      chatEnabled: isSet(object.chatEnabled) ? Boolean(object.chatEnabled) : undefined,
      qaEnabled: isSet(object.qaEnabled) ? Boolean(object.qaEnabled) : undefined,
      approveQuestionsEnabled: isSet(object.approveQuestionsEnabled)
        ? Boolean(object.approveQuestionsEnabled)
        : undefined,
      massMuteEnabled: isSet(object.massMuteEnabled) ? Boolean(object.massMuteEnabled) : undefined,
    };
  },

  toJSON(message: SpeakerUpdatesSession): unknown {
    const obj: any = {};
    message.sessionId !== undefined && (obj.sessionId = message.sessionId);
    message.customizeRoomEnabled !== undefined && (obj.customizeRoomEnabled = message.customizeRoomEnabled);
    message.chatEnabled !== undefined && (obj.chatEnabled = message.chatEnabled);
    message.qaEnabled !== undefined && (obj.qaEnabled = message.qaEnabled);
    message.approveQuestionsEnabled !== undefined && (obj.approveQuestionsEnabled = message.approveQuestionsEnabled);
    message.massMuteEnabled !== undefined && (obj.massMuteEnabled = message.massMuteEnabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<SpeakerUpdatesSession>, I>>(base?: I): SpeakerUpdatesSession {
    return SpeakerUpdatesSession.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SpeakerUpdatesSession>, I>>(object: I): SpeakerUpdatesSession {
    const message = createBaseSpeakerUpdatesSession();
    message.sessionId = object.sessionId ?? "";
    message.customizeRoomEnabled = object.customizeRoomEnabled ?? undefined;
    message.chatEnabled = object.chatEnabled ?? undefined;
    message.qaEnabled = object.qaEnabled ?? undefined;
    message.approveQuestionsEnabled = object.approveQuestionsEnabled ?? undefined;
    message.massMuteEnabled = object.massMuteEnabled ?? undefined;
    return message;
  },
};

function createBaseChatReply(): ChatReply {
  return { senderId: "", senderName: "", contents: "" };
}

export const ChatReply = {
  encode(message: ChatReply, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.senderId !== "") {
      writer.uint32(10).string(message.senderId);
    }
    if (message.senderName !== "") {
      writer.uint32(18).string(message.senderName);
    }
    if (message.contents !== "") {
      writer.uint32(26).string(message.contents);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChatReply {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.senderId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.senderName = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.contents = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatReply {
    return {
      senderId: isSet(object.senderId) ? String(object.senderId) : "",
      senderName: isSet(object.senderName) ? String(object.senderName) : "",
      contents: isSet(object.contents) ? String(object.contents) : "",
    };
  },

  toJSON(message: ChatReply): unknown {
    const obj: any = {};
    message.senderId !== undefined && (obj.senderId = message.senderId);
    message.senderName !== undefined && (obj.senderName = message.senderName);
    message.contents !== undefined && (obj.contents = message.contents);
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatReply>, I>>(base?: I): ChatReply {
    return ChatReply.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ChatReply>, I>>(object: I): ChatReply {
    const message = createBaseChatReply();
    message.senderId = object.senderId ?? "";
    message.senderName = object.senderName ?? "";
    message.contents = object.contents ?? "";
    return message;
  },
};

function createBaseChatMessageUpdated(): ChatMessageUpdated {
  return { id: "" };
}

export const ChatMessageUpdated = {
  encode(message: ChatMessageUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChatMessageUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessageUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatMessageUpdated {
    return { id: isSet(object.id) ? String(object.id) : "" };
  },

  toJSON(message: ChatMessageUpdated): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id);
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatMessageUpdated>, I>>(base?: I): ChatMessageUpdated {
    return ChatMessageUpdated.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ChatMessageUpdated>, I>>(object: I): ChatMessageUpdated {
    const message = createBaseChatMessageUpdated();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseSendCommand(): SendCommand {
  return { command: "", targetId: undefined };
}

export const SendCommand = {
  encode(message: SendCommand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.command !== "") {
      writer.uint32(10).string(message.command);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendCommand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.command = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendCommand {
    return {
      command: isSet(object.command) ? String(object.command) : "",
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SendCommand): unknown {
    const obj: any = {};
    message.command !== undefined && (obj.command = message.command);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SendCommand>, I>>(base?: I): SendCommand {
    return SendCommand.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SendCommand>, I>>(object: I): SendCommand {
    const message = createBaseSendCommand();
    message.command = object.command ?? "";
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseRegisterCommand(): RegisterCommand {
  return { command: "" };
}

export const RegisterCommand = {
  encode(message: RegisterCommand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.command !== "") {
      writer.uint32(10).string(message.command);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisterCommand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.command = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterCommand {
    return { command: isSet(object.command) ? String(object.command) : "" };
  },

  toJSON(message: RegisterCommand): unknown {
    const obj: any = {};
    message.command !== undefined && (obj.command = message.command);
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterCommand>, I>>(base?: I): RegisterCommand {
    return RegisterCommand.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RegisterCommand>, I>>(object: I): RegisterCommand {
    const message = createBaseRegisterCommand();
    message.command = object.command ?? "";
    return message;
  },
};

function createBaseCraft(): Craft {
  return { inputs: {} };
}

export const Craft = {
  encode(message: Craft, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.inputs).forEach(([key, value]) => {
      Craft_InputsEntry297.encode({ key: key as any, value }, writer.uint32(10).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Craft {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCraft();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = Craft_InputsEntry297.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.inputs[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Craft {
    return {
      inputs: isObject(object.inputs)
        ? Object.entries(object.inputs).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Craft): unknown {
    const obj: any = {};
    obj.inputs = {};
    if (message.inputs) {
      Object.entries(message.inputs).forEach(([k, v]) => {
        obj.inputs[k] = Math.round(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Craft>, I>>(base?: I): Craft {
    return Craft.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Craft>, I>>(object: I): Craft {
    const message = createBaseCraft();
    message.inputs = Object.entries(object.inputs ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = Number(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCraft_InputsEntry(): Craft_InputsEntry {
  return { key: "", value: 0 };
}

export const Craft_InputsEntry = {
  encode(message: Craft_InputsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Craft_InputsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCraft_InputsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.value = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Craft_InputsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? Number(object.value) : 0 };
  },

  toJSON(message: Craft_InputsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = Math.round(message.value));
    return obj;
  },

  create<I extends Exact<DeepPartial<Craft_InputsEntry>, I>>(base?: I): Craft_InputsEntry {
    return Craft_InputsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Craft_InputsEntry>, I>>(object: I): Craft_InputsEntry {
    const message = createBaseCraft_InputsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseHighFive(): HighFive {
  return { targetId: "", emote: undefined };
}

export const HighFive = {
  encode(message: HighFive, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetId !== "") {
      writer.uint32(10).string(message.targetId);
    }
    if (message.emote !== undefined) {
      writer.uint32(18).string(message.emote);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HighFive {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHighFive();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.targetId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.emote = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HighFive {
    return {
      targetId: isSet(object.targetId) ? String(object.targetId) : "",
      emote: isSet(object.emote) ? String(object.emote) : undefined,
    };
  },

  toJSON(message: HighFive): unknown {
    const obj: any = {};
    message.targetId !== undefined && (obj.targetId = message.targetId);
    message.emote !== undefined && (obj.emote = message.emote);
    return obj;
  },

  create<I extends Exact<DeepPartial<HighFive>, I>>(base?: I): HighFive {
    return HighFive.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<HighFive>, I>>(object: I): HighFive {
    const message = createBaseHighFive();
    message.targetId = object.targetId ?? "";
    message.emote = object.emote ?? undefined;
    return message;
  },
};

function createBaseAddInventoryItem(): AddInventoryItem {
  return { itemId: "", delta: 0, targetId: "" };
}

export const AddInventoryItem = {
  encode(message: AddInventoryItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.itemId !== "") {
      writer.uint32(10).string(message.itemId);
    }
    if (message.delta !== 0) {
      writer.uint32(16).uint64(message.delta);
    }
    if (message.targetId !== "") {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddInventoryItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddInventoryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.itemId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.delta = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddInventoryItem {
    return {
      itemId: isSet(object.itemId) ? String(object.itemId) : "",
      delta: isSet(object.delta) ? Number(object.delta) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : "",
    };
  },

  toJSON(message: AddInventoryItem): unknown {
    const obj: any = {};
    message.itemId !== undefined && (obj.itemId = message.itemId);
    message.delta !== undefined && (obj.delta = Math.round(message.delta));
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<AddInventoryItem>, I>>(base?: I): AddInventoryItem {
    return AddInventoryItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AddInventoryItem>, I>>(object: I): AddInventoryItem {
    const message = createBaseAddInventoryItem();
    message.itemId = object.itemId ?? "";
    message.delta = object.delta ?? 0;
    message.targetId = object.targetId ?? "";
    return message;
  },
};

function createBaseRemoveInventoryItem(): RemoveInventoryItem {
  return { itemId: "", delta: 0, targetId: undefined };
}

export const RemoveInventoryItem = {
  encode(message: RemoveInventoryItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.itemId !== "") {
      writer.uint32(10).string(message.itemId);
    }
    if (message.delta !== 0) {
      writer.uint32(16).uint64(message.delta);
    }
    if (message.targetId !== undefined) {
      writer.uint32(26).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveInventoryItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveInventoryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.itemId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.delta = longToNumber(reader.uint64() as Long);
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveInventoryItem {
    return {
      itemId: isSet(object.itemId) ? String(object.itemId) : "",
      delta: isSet(object.delta) ? Number(object.delta) : 0,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: RemoveInventoryItem): unknown {
    const obj: any = {};
    message.itemId !== undefined && (obj.itemId = message.itemId);
    message.delta !== undefined && (obj.delta = Math.round(message.delta));
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveInventoryItem>, I>>(base?: I): RemoveInventoryItem {
    return RemoveInventoryItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RemoveInventoryItem>, I>>(object: I): RemoveInventoryItem {
    const message = createBaseRemoveInventoryItem();
    message.itemId = object.itemId ?? "";
    message.delta = object.delta ?? 0;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseHipToBeSquare(): HipToBeSquare {
  return { data: "" };
}

export const HipToBeSquare = {
  encode(message: HipToBeSquare, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HipToBeSquare {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHipToBeSquare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HipToBeSquare {
    return { data: isSet(object.data) ? String(object.data) : "" };
  },

  toJSON(message: HipToBeSquare): unknown {
    const obj: any = {};
    message.data !== undefined && (obj.data = message.data);
    return obj;
  },

  create<I extends Exact<DeepPartial<HipToBeSquare>, I>>(base?: I): HipToBeSquare {
    return HipToBeSquare.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<HipToBeSquare>, I>>(object: I): HipToBeSquare {
    const message = createBaseHipToBeSquare();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseTriggerInventoryItem(): TriggerInventoryItem {
  return { itemId: "", abilityId: "" };
}

export const TriggerInventoryItem = {
  encode(message: TriggerInventoryItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.itemId !== "") {
      writer.uint32(10).string(message.itemId);
    }
    if (message.abilityId !== "") {
      writer.uint32(18).string(message.abilityId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TriggerInventoryItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerInventoryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.itemId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.abilityId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerInventoryItem {
    return {
      itemId: isSet(object.itemId) ? String(object.itemId) : "",
      abilityId: isSet(object.abilityId) ? String(object.abilityId) : "",
    };
  },

  toJSON(message: TriggerInventoryItem): unknown {
    const obj: any = {};
    message.itemId !== undefined && (obj.itemId = message.itemId);
    message.abilityId !== undefined && (obj.abilityId = message.abilityId);
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggerInventoryItem>, I>>(base?: I): TriggerInventoryItem {
    return TriggerInventoryItem.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<TriggerInventoryItem>, I>>(object: I): TriggerInventoryItem {
    const message = createBaseTriggerInventoryItem();
    message.itemId = object.itemId ?? "";
    message.abilityId = object.abilityId ?? "";
    return message;
  },
};

function createBaseSetAllowScreenPointer(): SetAllowScreenPointer {
  return { allowScreenPointer: false };
}

export const SetAllowScreenPointer = {
  encode(message: SetAllowScreenPointer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.allowScreenPointer === true) {
      writer.uint32(8).bool(message.allowScreenPointer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAllowScreenPointer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAllowScreenPointer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.allowScreenPointer = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAllowScreenPointer {
    return { allowScreenPointer: isSet(object.allowScreenPointer) ? Boolean(object.allowScreenPointer) : false };
  },

  toJSON(message: SetAllowScreenPointer): unknown {
    const obj: any = {};
    message.allowScreenPointer !== undefined && (obj.allowScreenPointer = message.allowScreenPointer);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAllowScreenPointer>, I>>(base?: I): SetAllowScreenPointer {
    return SetAllowScreenPointer.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetAllowScreenPointer>, I>>(object: I): SetAllowScreenPointer {
    const message = createBaseSetAllowScreenPointer();
    message.allowScreenPointer = object.allowScreenPointer ?? false;
    return message;
  },
};

function createBaseSetDeskInfo(): SetDeskInfo {
  return { deskInfo: undefined, targetId: undefined };
}

export const SetDeskInfo = {
  encode(message: SetDeskInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.deskInfo !== undefined) {
      DeskInfoV2171.encode(message.deskInfo, writer.uint32(10).fork()).ldelim();
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetDeskInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetDeskInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.deskInfo = DeskInfoV2171.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetDeskInfo {
    return {
      deskInfo: isSet(object.deskInfo) ? DeskInfoV2171.fromJSON(object.deskInfo) : undefined,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetDeskInfo): unknown {
    const obj: any = {};
    message.deskInfo !== undefined &&
      (obj.deskInfo = message.deskInfo ? DeskInfoV2171.toJSON(message.deskInfo) : undefined);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetDeskInfo>, I>>(base?: I): SetDeskInfo {
    return SetDeskInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetDeskInfo>, I>>(object: I): SetDeskInfo {
    const message = createBaseSetDeskInfo();
    message.deskInfo = (object.deskInfo !== undefined && object.deskInfo !== null)
      ? DeskInfoV2171.fromPartial(object.deskInfo)
      : undefined;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseWave(): Wave {
  return { user: "", isReply: false };
}

export const Wave = {
  encode(message: Wave, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.isReply === true) {
      writer.uint32(16).bool(message.isReply);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Wave {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWave();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.user = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.isReply = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wave {
    return {
      user: isSet(object.user) ? String(object.user) : "",
      isReply: isSet(object.isReply) ? Boolean(object.isReply) : false,
    };
  },

  toJSON(message: Wave): unknown {
    const obj: any = {};
    message.user !== undefined && (obj.user = message.user);
    message.isReply !== undefined && (obj.isReply = message.isReply);
    return obj;
  },

  create<I extends Exact<DeepPartial<Wave>, I>>(base?: I): Wave {
    return Wave.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Wave>, I>>(object: I): Wave {
    const message = createBaseWave();
    message.user = object.user ?? "";
    message.isReply = object.isReply ?? false;
    return message;
  },
};

function createBaseSetAway(): SetAway {
  return { away: false, targetId: undefined };
}

export const SetAway = {
  encode(message: SetAway, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.away === true) {
      writer.uint32(8).bool(message.away);
    }
    if (message.targetId !== undefined) {
      writer.uint32(18).string(message.targetId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetAway {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetAway();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.away = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.targetId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetAway {
    return {
      away: isSet(object.away) ? Boolean(object.away) : false,
      targetId: isSet(object.targetId) ? String(object.targetId) : undefined,
    };
  },

  toJSON(message: SetAway): unknown {
    const obj: any = {};
    message.away !== undefined && (obj.away = message.away);
    message.targetId !== undefined && (obj.targetId = message.targetId);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetAway>, I>>(base?: I): SetAway {
    return SetAway.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetAway>, I>>(object: I): SetAway {
    const message = createBaseSetAway();
    message.away = object.away ?? false;
    message.targetId = object.targetId ?? undefined;
    return message;
  },
};

function createBaseStartRecording(): StartRecording {
  return { nookId: "", initializing: undefined };
}

export const StartRecording = {
  encode(message: StartRecording, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.nookId !== "") {
      writer.uint32(10).string(message.nookId);
    }
    if (message.initializing !== undefined) {
      writer.uint32(16).bool(message.initializing);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): StartRecording {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartRecording();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.nookId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.initializing = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartRecording {
    return {
      nookId: isSet(object.nookId) ? String(object.nookId) : "",
      initializing: isSet(object.initializing) ? Boolean(object.initializing) : undefined,
    };
  },

  toJSON(message: StartRecording): unknown {
    const obj: any = {};
    message.nookId !== undefined && (obj.nookId = message.nookId);
    message.initializing !== undefined && (obj.initializing = message.initializing);
    return obj;
  },

  create<I extends Exact<DeepPartial<StartRecording>, I>>(base?: I): StartRecording {
    return StartRecording.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<StartRecording>, I>>(object: I): StartRecording {
    const message = createBaseStartRecording();
    message.nookId = object.nookId ?? "";
    message.initializing = object.initializing ?? undefined;
    return message;
  },
};

function createBaseRequestAccessViaCheckIn(): RequestAccessViaCheckIn {
  return { userId: "", canceled: false, name: undefined, outfitString: undefined };
}

export const RequestAccessViaCheckIn = {
  encode(message: RequestAccessViaCheckIn, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.canceled === true) {
      writer.uint32(16).bool(message.canceled);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.outfitString !== undefined) {
      writer.uint32(34).string(message.outfitString);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestAccessViaCheckIn {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestAccessViaCheckIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.canceled = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.outfitString = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestAccessViaCheckIn {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      canceled: isSet(object.canceled) ? Boolean(object.canceled) : false,
      name: isSet(object.name) ? String(object.name) : undefined,
      outfitString: isSet(object.outfitString) ? String(object.outfitString) : undefined,
    };
  },

  toJSON(message: RequestAccessViaCheckIn): unknown {
    const obj: any = {};
    message.userId !== undefined && (obj.userId = message.userId);
    message.canceled !== undefined && (obj.canceled = message.canceled);
    message.name !== undefined && (obj.name = message.name);
    message.outfitString !== undefined && (obj.outfitString = message.outfitString);
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestAccessViaCheckIn>, I>>(base?: I): RequestAccessViaCheckIn {
    return RequestAccessViaCheckIn.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RequestAccessViaCheckIn>, I>>(object: I): RequestAccessViaCheckIn {
    const message = createBaseRequestAccessViaCheckIn();
    message.userId = object.userId ?? "";
    message.canceled = object.canceled ?? false;
    message.name = object.name ?? undefined;
    message.outfitString = object.outfitString ?? undefined;
    return message;
  },
};

function createBaseRespondToAccessRequest(): RespondToAccessRequest {
  return { userId: "", accepted: false, locationType: undefined };
}

export const RespondToAccessRequest = {
  encode(message: RespondToAccessRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.accepted === true) {
      writer.uint32(16).bool(message.accepted);
    }
    if (message.locationType !== undefined) {
      writer.uint32(24).int32(message.locationType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RespondToAccessRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRespondToAccessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.locationType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RespondToAccessRequest {
    return {
      userId: isSet(object.userId) ? String(object.userId) : "",
      accepted: isSet(object.accepted) ? Boolean(object.accepted) : false,
      locationType: isSet(object.locationType)
        ? respondToAccessRequest_LocationTypeEnumFromJSON275(object.locationType)
        : undefined,
    };
  },

  toJSON(message: RespondToAccessRequest): unknown {
    const obj: any = {};
    message.userId !== undefined && (obj.userId = message.userId);
    message.accepted !== undefined && (obj.accepted = message.accepted);
    message.locationType !== undefined && (obj.locationType = message.locationType !== undefined
      ? respondToAccessRequest_LocationTypeEnumToJSON276(message.locationType)
      : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<RespondToAccessRequest>, I>>(base?: I): RespondToAccessRequest {
    return RespondToAccessRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RespondToAccessRequest>, I>>(object: I): RespondToAccessRequest {
    const message = createBaseRespondToAccessRequest();
    message.userId = object.userId ?? "";
    message.accepted = object.accepted ?? false;
    message.locationType = object.locationType ?? undefined;
    return message;
  },
};

function createBaseSetSpaceRolePermissionOverride(): SetSpaceRolePermissionOverride {
  return { role: "", permission: "", enabled: false };
}

export const SetSpaceRolePermissionOverride = {
  encode(message: SetSpaceRolePermissionOverride, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    if (message.permission !== "") {
      writer.uint32(18).string(message.permission);
    }
    if (message.enabled === true) {
      writer.uint32(24).bool(message.enabled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetSpaceRolePermissionOverride {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetSpaceRolePermissionOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.role = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.permission = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetSpaceRolePermissionOverride {
    return {
      role: isSet(object.role) ? String(object.role) : "",
      permission: isSet(object.permission) ? String(object.permission) : "",
      enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,
    };
  },

  toJSON(message: SetSpaceRolePermissionOverride): unknown {
    const obj: any = {};
    message.role !== undefined && (obj.role = message.role);
    message.permission !== undefined && (obj.permission = message.permission);
    message.enabled !== undefined && (obj.enabled = message.enabled);
    return obj;
  },

  create<I extends Exact<DeepPartial<SetSpaceRolePermissionOverride>, I>>(base?: I): SetSpaceRolePermissionOverride {
    return SetSpaceRolePermissionOverride.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SetSpaceRolePermissionOverride>, I>>(
    object: I,
  ): SetSpaceRolePermissionOverride {
    const message = createBaseSetSpaceRolePermissionOverride();
    message.role = object.role ?? "";
    message.permission = object.permission ?? "";
    message.enabled = object.enabled ?? false;
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

// If you get a compile-error about 'Constructor<Long> and ... have no overlap',
// add '--ts_proto_opt=esModuleInterop=true' as a flag when calling 'protoc'.
if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
